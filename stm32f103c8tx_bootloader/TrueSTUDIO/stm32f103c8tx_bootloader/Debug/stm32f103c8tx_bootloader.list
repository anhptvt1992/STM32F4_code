
stm32f103c8tx_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001560  0800810c  0800810c  0000810c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800966c  0800966c  0000966c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009694  08009694  00009694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009698  08009698  00009698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800969c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a4  20000070  0800970c  00010070  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000214  0800970c  00010214  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000505c  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001054b  00000000  00000000  000150f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000029fd  00000000  00000000  00025640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000748  00000000  00000000  00028040  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009a8  00000000  00000000  00028788  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003ac0  00000000  00000000  00029130  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b66  00000000  00000000  0002cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002f756  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001390  00000000  00000000  0002f7d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800810c <__do_global_dtors_aux>:
 800810c:	b510      	push	{r4, lr}
 800810e:	4c05      	ldr	r4, [pc, #20]	; (8008124 <__do_global_dtors_aux+0x18>)
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	b933      	cbnz	r3, 8008122 <__do_global_dtors_aux+0x16>
 8008114:	4b04      	ldr	r3, [pc, #16]	; (8008128 <__do_global_dtors_aux+0x1c>)
 8008116:	b113      	cbz	r3, 800811e <__do_global_dtors_aux+0x12>
 8008118:	4804      	ldr	r0, [pc, #16]	; (800812c <__do_global_dtors_aux+0x20>)
 800811a:	f3af 8000 	nop.w
 800811e:	2301      	movs	r3, #1
 8008120:	7023      	strb	r3, [r4, #0]
 8008122:	bd10      	pop	{r4, pc}
 8008124:	20000070 	.word	0x20000070
 8008128:	00000000 	.word	0x00000000
 800812c:	08009654 	.word	0x08009654

08008130 <frame_dummy>:
 8008130:	b508      	push	{r3, lr}
 8008132:	4b03      	ldr	r3, [pc, #12]	; (8008140 <frame_dummy+0x10>)
 8008134:	b11b      	cbz	r3, 800813e <frame_dummy+0xe>
 8008136:	4903      	ldr	r1, [pc, #12]	; (8008144 <frame_dummy+0x14>)
 8008138:	4803      	ldr	r0, [pc, #12]	; (8008148 <frame_dummy+0x18>)
 800813a:	f3af 8000 	nop.w
 800813e:	bd08      	pop	{r3, pc}
 8008140:	00000000 	.word	0x00000000
 8008144:	20000074 	.word	0x20000074
 8008148:	08009654 	.word	0x08009654

0800814c <__aeabi_llsr>:
 800814c:	40d0      	lsrs	r0, r2
 800814e:	1c0b      	adds	r3, r1, #0
 8008150:	40d1      	lsrs	r1, r2
 8008152:	469c      	mov	ip, r3
 8008154:	3a20      	subs	r2, #32
 8008156:	40d3      	lsrs	r3, r2
 8008158:	4318      	orrs	r0, r3
 800815a:	4252      	negs	r2, r2
 800815c:	4663      	mov	r3, ip
 800815e:	4093      	lsls	r3, r2
 8008160:	4318      	orrs	r0, r3
 8008162:	4770      	bx	lr

08008164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008164:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008166:	e003      	b.n	8008170 <LoopCopyDataInit>

08008168 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800816a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800816c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800816e:	3104      	adds	r1, #4

08008170 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008170:	480a      	ldr	r0, [pc, #40]	; (800819c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008172:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008174:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008176:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008178:	d3f6      	bcc.n	8008168 <CopyDataInit>
  ldr r2, =_sbss
 800817a:	4a0a      	ldr	r2, [pc, #40]	; (80081a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800817c:	e002      	b.n	8008184 <LoopFillZerobss>

0800817e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800817e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008180:	f842 3b04 	str.w	r3, [r2], #4

08008184 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008184:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008186:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008188:	d3f9      	bcc.n	800817e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800818a:	f000 f959 	bl	8008440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800818e:	f001 f961 	bl	8009454 <__libc_init_array>
/* Call the application's entry point.*/
  bl boot_main
 8008192:	f000 f875 	bl	8008280 <boot_main>
  bx lr
 8008196:	4770      	bx	lr
  ldr r3, =_sidata
 8008198:	0800969c 	.word	0x0800969c
  ldr r0, =_sdata
 800819c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80081a0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80081a4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80081a8:	20000214 	.word	0x20000214

080081ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80081ac:	e7fe      	b.n	80081ac <ADC1_2_IRQHandler>
	...

080081b0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80081b0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80081b2:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <_sbrk+0x2c>)
{
 80081b4:	4602      	mov	r2, r0
	if (heap_end == 0)
 80081b6:	6819      	ldr	r1, [r3, #0]
 80081b8:	b909      	cbnz	r1, 80081be <_sbrk+0xe>
		heap_end = &end;
 80081ba:	4909      	ldr	r1, [pc, #36]	; (80081e0 <_sbrk+0x30>)
 80081bc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80081be:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80081c0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80081c2:	4402      	add	r2, r0
 80081c4:	428a      	cmp	r2, r1
 80081c6:	d906      	bls.n	80081d6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80081c8:	f001 f93e 	bl	8009448 <__errno>
 80081cc:	230c      	movs	r3, #12
 80081ce:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80081d6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80081d8:	bd08      	pop	{r3, pc}
 80081da:	bf00      	nop
 80081dc:	2000008c 	.word	0x2000008c
 80081e0:	20000214 	.word	0x20000214

080081e4 <HAL_UART_RxCpltCallback>:
  /* USER CODE END 3 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == huart1.Instance)
 80081e4:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <HAL_UART_RxCpltCallback+0x3c>)
 80081e6:	6802      	ldr	r2, [r0, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
{
 80081ea:	b510      	push	{r4, lr}
	if(huart->Instance == huart1.Instance)
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d116      	bne.n	800821e <HAL_UART_RxCpltCallback+0x3a>
	{
		if(uart_app.data_uart == DATA_END_LINE_UART)
 80081f0:	480c      	ldr	r0, [pc, #48]	; (8008224 <HAL_UART_RxCpltCallback+0x40>)
 80081f2:	7803      	ldrb	r3, [r0, #0]
 80081f4:	2bff      	cmp	r3, #255	; 0xff
 80081f6:	d112      	bne.n	800821e <HAL_UART_RxCpltCallback+0x3a>
		{
			uart_app.data_end_count++;
 80081f8:	7843      	ldrb	r3, [r0, #1]
 80081fa:	3301      	adds	r3, #1
 80081fc:	b2db      	uxtb	r3, r3
			if(uart_app.data_end_count == DATA_END_LINE_UART_COUNT)
 80081fe:	2b04      	cmp	r3, #4
			uart_app.data_end_count++;
 8008200:	7043      	strb	r3, [r0, #1]
			if(uart_app.data_end_count == DATA_END_LINE_UART_COUNT)
 8008202:	d10c      	bne.n	800821e <HAL_UART_RxCpltCallback+0x3a>
			{
				uart_app.data_count = 0;
 8008204:	2300      	movs	r3, #0
				BOOT_handle_data(uart_app.data_colectt, &data_prog);
 8008206:	4c08      	ldr	r4, [pc, #32]	; (8008228 <HAL_UART_RxCpltCallback+0x44>)
				uart_app.data_count = 0;
 8008208:	8043      	strh	r3, [r0, #2]
				BOOT_handle_data(uart_app.data_colectt, &data_prog);
 800820a:	4621      	mov	r1, r4
 800820c:	3004      	adds	r0, #4
 800820e:	f001 f881 	bl	8009314 <BOOT_handle_data>
				BOOT_flash_prog(data_prog);
 8008212:	e894 0003 	ldmia.w	r4, {r0, r1}

			}
		}
	}
}
 8008216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				BOOT_flash_prog(data_prog);
 800821a:	f001 b891 	b.w	8009340 <BOOT_flash_prog>
 800821e:	bd10      	pop	{r4, pc}
 8008220:	20000098 	.word	0x20000098
 8008224:	200000e0 	.word	0x200000e0
 8008228:	200000d8 	.word	0x200000d8

0800822c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800822c:	b510      	push	{r4, lr}
 800822e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008230:	2228      	movs	r2, #40	; 0x28
 8008232:	2100      	movs	r1, #0
 8008234:	a806      	add	r0, sp, #24
 8008236:	f001 f941 	bl	80094bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800823a:	2100      	movs	r1, #0
 800823c:	2214      	movs	r2, #20
 800823e:	a801      	add	r0, sp, #4
 8008240:	f001 f93c 	bl	80094bc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008248:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800824a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800824c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800824e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008250:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008254:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008256:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008258:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800825a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800825c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800825e:	f000 fc39 	bl	8008ad4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008262:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008264:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008268:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800826a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800826c:	4621      	mov	r1, r4
 800826e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008270:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008272:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008274:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008276:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008278:	f000 fe06 	bl	8008e88 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800827c:	b010      	add	sp, #64	; 0x40
 800827e:	bd10      	pop	{r4, pc}

08008280 <boot_main>:
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
  HAL_Init();
 8008284:	f000 f926 	bl	80084d4 <HAL_Init>
  SystemClock_Config();
 8008288:	f7ff ffd0 	bl	800822c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800828c:	2210      	movs	r2, #16
 800828e:	2100      	movs	r1, #0
 8008290:	eb0d 0002 	add.w	r0, sp, r2
 8008294:	f001 f912 	bl	80094bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008298:	4b29      	ldr	r3, [pc, #164]	; (8008340 <boot_main+0xc0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800829a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800829e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80082a0:	4828      	ldr	r0, [pc, #160]	; (8008344 <boot_main+0xc4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082a2:	f042 0210 	orr.w	r2, r2, #16
 80082a6:	619a      	str	r2, [r3, #24]
 80082a8:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082aa:	2500      	movs	r5, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80082ac:	f002 0210 	and.w	r2, r2, #16
 80082b0:	9201      	str	r2, [sp, #4]
 80082b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082b4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082b6:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082b8:	f042 0220 	orr.w	r2, r2, #32
 80082bc:	619a      	str	r2, [r3, #24]
 80082be:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 80082c0:	4c21      	ldr	r4, [pc, #132]	; (8008348 <boot_main+0xc8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80082c2:	f002 0220 	and.w	r2, r2, #32
 80082c6:	9202      	str	r2, [sp, #8]
 80082c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ca:	699a      	ldr	r2, [r3, #24]
  uart_app.data_count = 0;
 80082cc:	4e1f      	ldr	r6, [pc, #124]	; (800834c <boot_main+0xcc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ce:	f042 0204 	orr.w	r2, r2, #4
 80082d2:	619a      	str	r2, [r3, #24]
 80082d4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80082d6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	9303      	str	r3, [sp, #12]
 80082de:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80082e0:	f000 fbf2 	bl	8008ac8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80082e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082ea:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082ec:	a904      	add	r1, sp, #16
 80082ee:	4815      	ldr	r0, [pc, #84]	; (8008344 <boot_main+0xc4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80082f0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80082f2:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f4:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082f6:	f000 fb05 	bl	8008904 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80082fa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80082fe:	4a14      	ldr	r2, [pc, #80]	; (8008350 <boot_main+0xd0>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008300:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8008302:	e884 000c 	stmia.w	r4, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008306:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008308:	60a5      	str	r5, [r4, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800830a:	6163      	str	r3, [r4, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800830c:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800830e:	6125      	str	r5, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008310:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008312:	61e5      	str	r5, [r4, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008314:	f000 febe 	bl	8009094 <HAL_UART_Init>
  memset(uart_app.data_colectt, 0xFF, DATA_FILE_RAW_DATA_LEN);
 8008318:	f240 1207 	movw	r2, #263	; 0x107
 800831c:	21ff      	movs	r1, #255	; 0xff
 800831e:	1d30      	adds	r0, r6, #4
  uart_app.data_count = 0;
 8008320:	8075      	strh	r5, [r6, #2]
  uart_app.data_end_count = 0;
 8008322:	7075      	strb	r5, [r6, #1]
  memset(uart_app.data_colectt, 0xFF, DATA_FILE_RAW_DATA_LEN);
 8008324:	f001 f8ca 	bl	80094bc <memset>
  HAL_UART_Receive_IT(&huart1, &uart_app.data_uart, 1);
 8008328:	4631      	mov	r1, r6
 800832a:	463a      	mov	r2, r7
 800832c:	4620      	mov	r0, r4
 800832e:	f000 fedf 	bl	80090f0 <HAL_UART_Receive_IT>
  BOOT_erase(APPLICATION_ADDRESS_PRO, APPLICATION_FLASH_LEN);
 8008332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008336:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800833a:	f000 ffe9 	bl	8009310 <BOOT_erase>
 800833e:	e7fe      	b.n	800833e <boot_main+0xbe>
 8008340:	40021000 	.word	0x40021000
 8008344:	40011000 	.word	0x40011000
 8008348:	20000098 	.word	0x20000098
 800834c:	200000e0 	.word	0x200000e0
 8008350:	40013800 	.word	0x40013800

08008354 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008354:	4b0e      	ldr	r3, [pc, #56]	; (8008390 <HAL_MspInit+0x3c>)
{
 8008356:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	f042 0201 	orr.w	r2, r2, #1
 800835e:	619a      	str	r2, [r3, #24]
 8008360:	699a      	ldr	r2, [r3, #24]
 8008362:	f002 0201 	and.w	r2, r2, #1
 8008366:	9200      	str	r2, [sp, #0]
 8008368:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008370:	61da      	str	r2, [r3, #28]
 8008372:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8008374:	4a07      	ldr	r2, [pc, #28]	; (8008394 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8008376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800837e:	6853      	ldr	r3, [r2, #4]
 8008380:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800838a:	b002      	add	sp, #8
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	40021000 	.word	0x40021000
 8008394:	40010000 	.word	0x40010000

08008398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008398:	b510      	push	{r4, lr}
 800839a:	4604      	mov	r4, r0
 800839c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800839e:	2210      	movs	r2, #16
 80083a0:	2100      	movs	r1, #0
 80083a2:	a802      	add	r0, sp, #8
 80083a4:	f001 f88a 	bl	80094bc <memset>
  if(huart->Instance==USART1)
 80083a8:	6822      	ldr	r2, [r4, #0]
 80083aa:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <HAL_UART_MspInit+0x80>)
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d130      	bne.n	8008412 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80083b0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80083b4:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b6:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80083b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083bc:	619a      	str	r2, [r3, #24]
 80083be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083c0:	4816      	ldr	r0, [pc, #88]	; (800841c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80083c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80083c6:	9200      	str	r2, [sp, #0]
 80083c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ca:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083cc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ce:	f042 0204 	orr.w	r2, r2, #4
 80083d2:	619a      	str	r2, [r3, #24]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	9301      	str	r3, [sp, #4]
 80083dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80083de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083e4:	2302      	movs	r3, #2
 80083e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083e8:	2303      	movs	r3, #3
 80083ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ec:	f000 fa8a 	bl	8008904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80083f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083f4:	a902      	add	r1, sp, #8
 80083f6:	4809      	ldr	r0, [pc, #36]	; (800841c <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80083f8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083fa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083fe:	f000 fa81 	bl	8008904 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008402:	2025      	movs	r0, #37	; 0x25
 8008404:	4622      	mov	r2, r4
 8008406:	4621      	mov	r1, r4
 8008408:	f000 f89a 	bl	8008540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800840c:	2025      	movs	r0, #37	; 0x25
 800840e:	f000 f8cb 	bl	80085a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008412:	b006      	add	sp, #24
 8008414:	bd10      	pop	{r4, pc}
 8008416:	bf00      	nop
 8008418:	40013800 	.word	0x40013800
 800841c:	40010800 	.word	0x40010800

08008420 <NMI_Handler>:
 8008420:	4770      	bx	lr

08008422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008422:	e7fe      	b.n	8008422 <HardFault_Handler>

08008424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008424:	e7fe      	b.n	8008424 <MemManage_Handler>

08008426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008426:	e7fe      	b.n	8008426 <BusFault_Handler>

08008428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008428:	e7fe      	b.n	8008428 <UsageFault_Handler>

0800842a <SVC_Handler>:
 800842a:	4770      	bx	lr

0800842c <DebugMon_Handler>:
 800842c:	4770      	bx	lr

0800842e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800842e:	4770      	bx	lr

08008430 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008430:	f000 b862 	b.w	80084f8 <HAL_IncTick>

08008434 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <USART1_IRQHandler+0x8>)
 8008436:	f000 bec3 	b.w	80091c0 <HAL_UART_IRQHandler>
 800843a:	bf00      	nop
 800843c:	20000098 	.word	0x20000098

08008440 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008440:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <SystemInit+0x40>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	f042 0201 	orr.w	r2, r2, #1
 8008448:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800844a:	6859      	ldr	r1, [r3, #4]
 800844c:	4a0d      	ldr	r2, [pc, #52]	; (8008484 <SystemInit+0x44>)
 800844e:	400a      	ands	r2, r1
 8008450:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008458:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800845c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008464:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800846c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800846e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008472:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008474:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008478:	4b03      	ldr	r3, [pc, #12]	; (8008488 <SystemInit+0x48>)
 800847a:	609a      	str	r2, [r3, #8]
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	40021000 	.word	0x40021000
 8008484:	f8ff0000 	.word	0xf8ff0000
 8008488:	e000ed00 	.word	0xe000ed00

0800848c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800848c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <HAL_InitTick+0x3c>)
{
 8008490:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008492:	7818      	ldrb	r0, [r3, #0]
 8008494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008498:	fbb3 f3f0 	udiv	r3, r3, r0
 800849c:	4a0b      	ldr	r2, [pc, #44]	; (80084cc <HAL_InitTick+0x40>)
 800849e:	6810      	ldr	r0, [r2, #0]
 80084a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80084a4:	f000 f88e 	bl	80085c4 <HAL_SYSTICK_Config>
 80084a8:	4604      	mov	r4, r0
 80084aa:	b958      	cbnz	r0, 80084c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084ac:	2d0f      	cmp	r5, #15
 80084ae:	d809      	bhi.n	80084c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084b0:	4602      	mov	r2, r0
 80084b2:	4629      	mov	r1, r5
 80084b4:	f04f 30ff 	mov.w	r0, #4294967295
 80084b8:	f000 f842 	bl	8008540 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084bc:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <HAL_InitTick+0x44>)
 80084be:	4620      	mov	r0, r4
 80084c0:	601d      	str	r5, [r3, #0]
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80084c4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80084c6:	bd38      	pop	{r3, r4, r5, pc}
 80084c8:	20000004 	.word	0x20000004
 80084cc:	20000000 	.word	0x20000000
 80084d0:	20000008 	.word	0x20000008

080084d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084d4:	4a07      	ldr	r2, [pc, #28]	; (80084f4 <HAL_Init+0x20>)
{
 80084d6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084d8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084da:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084dc:	f043 0310 	orr.w	r3, r3, #16
 80084e0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084e2:	f000 f81b 	bl	800851c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80084e6:	2000      	movs	r0, #0
 80084e8:	f7ff ffd0 	bl	800848c <HAL_InitTick>
  HAL_MspInit();
 80084ec:	f7ff ff32 	bl	8008354 <HAL_MspInit>
}
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd08      	pop	{r3, pc}
 80084f4:	40022000 	.word	0x40022000

080084f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80084f8:	4a03      	ldr	r2, [pc, #12]	; (8008508 <HAL_IncTick+0x10>)
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <HAL_IncTick+0x14>)
 80084fc:	6811      	ldr	r1, [r2, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	440b      	add	r3, r1
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	200001ec 	.word	0x200001ec
 800850c:	20000004 	.word	0x20000004

08008510 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008510:	4b01      	ldr	r3, [pc, #4]	; (8008518 <HAL_GetTick+0x8>)
 8008512:	6818      	ldr	r0, [r3, #0]
}
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	200001ec 	.word	0x200001ec

0800851c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800851c:	4a07      	ldr	r2, [pc, #28]	; (800853c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800851e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008520:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008522:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008526:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	0c1b      	lsrs	r3, r3, #16
 800852e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8008536:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008538:	60d3      	str	r3, [r2, #12]
 800853a:	4770      	bx	lr
 800853c:	e000ed00 	.word	0xe000ed00

08008540 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008540:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008542:	b530      	push	{r4, r5, lr}
 8008544:	68dc      	ldr	r4, [r3, #12]
 8008546:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800854a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800854e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008550:	2b04      	cmp	r3, #4
 8008552:	bf28      	it	cs
 8008554:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008556:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008558:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800855c:	bf98      	it	ls
 800855e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008560:	fa05 f303 	lsl.w	r3, r5, r3
 8008564:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008568:	bf88      	it	hi
 800856a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800856c:	4019      	ands	r1, r3
 800856e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008570:	fa05 f404 	lsl.w	r4, r5, r4
 8008574:	3c01      	subs	r4, #1
 8008576:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8008578:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800857a:	ea42 0201 	orr.w	r2, r2, r1
 800857e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008582:	bfa9      	itett	ge
 8008584:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008588:	4b06      	ldrlt	r3, [pc, #24]	; (80085a4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800858a:	b2d2      	uxtbge	r2, r2
 800858c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008590:	bfbb      	ittet	lt
 8008592:	f000 000f 	andlt.w	r0, r0, #15
 8008596:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008598:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800859c:	541a      	strblt	r2, [r3, r0]
 800859e:	bd30      	pop	{r4, r5, pc}
 80085a0:	e000ed00 	.word	0xe000ed00
 80085a4:	e000ed14 	.word	0xe000ed14

080085a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80085a8:	2800      	cmp	r0, #0
 80085aa:	db08      	blt.n	80085be <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085ac:	2301      	movs	r3, #1
 80085ae:	0942      	lsrs	r2, r0, #5
 80085b0:	f000 001f 	and.w	r0, r0, #31
 80085b4:	fa03 f000 	lsl.w	r0, r3, r0
 80085b8:	4b01      	ldr	r3, [pc, #4]	; (80085c0 <HAL_NVIC_EnableIRQ+0x18>)
 80085ba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80085be:	4770      	bx	lr
 80085c0:	e000e100 	.word	0xe000e100

080085c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085c4:	3801      	subs	r0, #1
 80085c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80085ca:	d20a      	bcs.n	80085e2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085cc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085d0:	4a06      	ldr	r2, [pc, #24]	; (80085ec <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085d2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085d4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085d8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085da:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085dc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80085e2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	e000e010 	.word	0xe000e010
 80085ec:	e000ed00 	.word	0xe000ed00

080085f0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80085f0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80085f4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d003      	beq.n	8008602 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085fa:	2304      	movs	r3, #4
 80085fc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80085fe:	2001      	movs	r0, #1
 8008600:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008602:	6803      	ldr	r3, [r0, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	f022 020e 	bic.w	r2, r2, #14
 800860a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	f022 0201 	bic.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008614:	4a18      	ldr	r2, [pc, #96]	; (8008678 <HAL_DMA_Abort_IT+0x88>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d01f      	beq.n	800865a <HAL_DMA_Abort_IT+0x6a>
 800861a:	3214      	adds	r2, #20
 800861c:	4293      	cmp	r3, r2
 800861e:	d01e      	beq.n	800865e <HAL_DMA_Abort_IT+0x6e>
 8008620:	3214      	adds	r2, #20
 8008622:	4293      	cmp	r3, r2
 8008624:	d01d      	beq.n	8008662 <HAL_DMA_Abort_IT+0x72>
 8008626:	3214      	adds	r2, #20
 8008628:	4293      	cmp	r3, r2
 800862a:	d01d      	beq.n	8008668 <HAL_DMA_Abort_IT+0x78>
 800862c:	3214      	adds	r2, #20
 800862e:	4293      	cmp	r3, r2
 8008630:	d01d      	beq.n	800866e <HAL_DMA_Abort_IT+0x7e>
 8008632:	3214      	adds	r2, #20
 8008634:	4293      	cmp	r3, r2
 8008636:	bf0c      	ite	eq
 8008638:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800863c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8008640:	4a0e      	ldr	r2, [pc, #56]	; (800867c <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008642:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008644:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008646:	2301      	movs	r3, #1
 8008648:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800864c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800864e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8008652:	b17b      	cbz	r3, 8008674 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8008654:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008656:	4620      	mov	r0, r4
 8008658:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800865a:	2301      	movs	r3, #1
 800865c:	e7f0      	b.n	8008640 <HAL_DMA_Abort_IT+0x50>
 800865e:	2310      	movs	r3, #16
 8008660:	e7ee      	b.n	8008640 <HAL_DMA_Abort_IT+0x50>
 8008662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008666:	e7eb      	b.n	8008640 <HAL_DMA_Abort_IT+0x50>
 8008668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800866c:	e7e8      	b.n	8008640 <HAL_DMA_Abort_IT+0x50>
 800866e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008672:	e7e5      	b.n	8008640 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8008674:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8008676:	bd10      	pop	{r4, pc}
 8008678:	40020008 	.word	0x40020008
 800867c:	40020000 	.word	0x40020000

08008680 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8008680:	4a11      	ldr	r2, [pc, #68]	; (80086c8 <FLASH_SetErrorCode+0x48>)
 8008682:	68d3      	ldr	r3, [r2, #12]
 8008684:	f013 0310 	ands.w	r3, r3, #16
 8008688:	d005      	beq.n	8008696 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800868a:	4910      	ldr	r1, [pc, #64]	; (80086cc <FLASH_SetErrorCode+0x4c>)
 800868c:	69cb      	ldr	r3, [r1, #28]
 800868e:	f043 0302 	orr.w	r3, r3, #2
 8008692:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8008694:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8008696:	68d2      	ldr	r2, [r2, #12]
 8008698:	0750      	lsls	r0, r2, #29
 800869a:	d506      	bpl.n	80086aa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800869c:	490b      	ldr	r1, [pc, #44]	; (80086cc <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800869e:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80086a2:	69ca      	ldr	r2, [r1, #28]
 80086a4:	f042 0201 	orr.w	r2, r2, #1
 80086a8:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80086aa:	4a07      	ldr	r2, [pc, #28]	; (80086c8 <FLASH_SetErrorCode+0x48>)
 80086ac:	69d1      	ldr	r1, [r2, #28]
 80086ae:	07c9      	lsls	r1, r1, #31
 80086b0:	d508      	bpl.n	80086c4 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80086b2:	4806      	ldr	r0, [pc, #24]	; (80086cc <FLASH_SetErrorCode+0x4c>)
 80086b4:	69c1      	ldr	r1, [r0, #28]
 80086b6:	f041 0104 	orr.w	r1, r1, #4
 80086ba:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80086bc:	69d1      	ldr	r1, [r2, #28]
 80086be:	f021 0101 	bic.w	r1, r1, #1
 80086c2:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80086c4:	60d3      	str	r3, [r2, #12]
 80086c6:	4770      	bx	lr
 80086c8:	40022000 	.word	0x40022000
 80086cc:	200001f0 	.word	0x200001f0

080086d0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80086d0:	4b06      	ldr	r3, [pc, #24]	; (80086ec <HAL_FLASH_Unlock+0x1c>)
 80086d2:	6918      	ldr	r0, [r3, #16]
 80086d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80086d8:	d007      	beq.n	80086ea <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80086da:	4a05      	ldr	r2, [pc, #20]	; (80086f0 <HAL_FLASH_Unlock+0x20>)
 80086dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80086de:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80086e2:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80086e4:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80086e6:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80086ea:	4770      	bx	lr
 80086ec:	40022000 	.word	0x40022000
 80086f0:	45670123 	.word	0x45670123

080086f4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80086f4:	4a03      	ldr	r2, [pc, #12]	; (8008704 <HAL_FLASH_Lock+0x10>)
}
 80086f6:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80086f8:	6913      	ldr	r3, [r2, #16]
 80086fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086fe:	6113      	str	r3, [r2, #16]
}
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	40022000 	.word	0x40022000

08008708 <HAL_FLASH_OB_Unlock>:
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <HAL_FLASH_OB_Unlock+0x1c>)
 800870a:	6918      	ldr	r0, [r3, #16]
 800870c:	f410 7000 	ands.w	r0, r0, #512	; 0x200
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8008710:	bf09      	itett	eq
 8008712:	4a05      	ldreq	r2, [pc, #20]	; (8008728 <HAL_FLASH_OB_Unlock+0x20>)
    return HAL_ERROR;
 8008714:	2001      	movne	r0, #1
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8008716:	609a      	streq	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8008718:	f102 3288 	addeq.w	r2, r2, #2290649224	; 0x88888888
 800871c:	bf08      	it	eq
 800871e:	609a      	streq	r2, [r3, #8]
}
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	40022000 	.word	0x40022000
 8008728:	45670123 	.word	0x45670123

0800872c <HAL_FLASH_OB_Lock>:
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 800872c:	4a03      	ldr	r2, [pc, #12]	; (800873c <HAL_FLASH_OB_Lock+0x10>)
}
 800872e:	2000      	movs	r0, #0
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8008730:	6913      	ldr	r3, [r2, #16]
 8008732:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008736:	6113      	str	r3, [r2, #16]
}
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40022000 	.word	0x40022000

08008740 <FLASH_WaitForLastOperation>:
{
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8008744:	f7ff fee4 	bl	8008510 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008748:	4c11      	ldr	r4, [pc, #68]	; (8008790 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800874a:	4607      	mov	r7, r0
 800874c:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800874e:	68e3      	ldr	r3, [r4, #12]
 8008750:	07d8      	lsls	r0, r3, #31
 8008752:	d412      	bmi.n	800877a <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008754:	68e3      	ldr	r3, [r4, #12]
 8008756:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008758:	bf44      	itt	mi
 800875a:	2320      	movmi	r3, #32
 800875c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800875e:	68eb      	ldr	r3, [r5, #12]
 8008760:	06da      	lsls	r2, r3, #27
 8008762:	d406      	bmi.n	8008772 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8008764:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008766:	07db      	lsls	r3, r3, #31
 8008768:	d403      	bmi.n	8008772 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800876a:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800876c:	f010 0004 	ands.w	r0, r0, #4
 8008770:	d002      	beq.n	8008778 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8008772:	f7ff ff85 	bl	8008680 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008776:	2001      	movs	r0, #1
}
 8008778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800877a:	1c73      	adds	r3, r6, #1
 800877c:	d0e7      	beq.n	800874e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800877e:	b90e      	cbnz	r6, 8008784 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8008780:	2003      	movs	r0, #3
 8008782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008784:	f7ff fec4 	bl	8008510 <HAL_GetTick>
 8008788:	1bc0      	subs	r0, r0, r7
 800878a:	4286      	cmp	r6, r0
 800878c:	d2df      	bcs.n	800874e <FLASH_WaitForLastOperation+0xe>
 800878e:	e7f7      	b.n	8008780 <FLASH_WaitForLastOperation+0x40>
 8008790:	40022000 	.word	0x40022000

08008794 <HAL_FLASH_Program>:
{
 8008794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8008798:	4c1f      	ldr	r4, [pc, #124]	; (8008818 <HAL_FLASH_Program+0x84>)
{
 800879a:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 800879c:	7e23      	ldrb	r3, [r4, #24]
{
 800879e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80087a0:	2b01      	cmp	r3, #1
{
 80087a2:	460f      	mov	r7, r1
 80087a4:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80087a6:	d033      	beq.n	8008810 <HAL_FLASH_Program+0x7c>
 80087a8:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80087aa:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80087ae:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80087b0:	f7ff ffc6 	bl	8008740 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80087b4:	bb40      	cbnz	r0, 8008808 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80087b6:	2d01      	cmp	r5, #1
 80087b8:	d003      	beq.n	80087c2 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80087ba:	2d02      	cmp	r5, #2
 80087bc:	bf0c      	ite	eq
 80087be:	2502      	moveq	r5, #2
 80087c0:	2504      	movne	r5, #4
 80087c2:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80087c4:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80087c6:	f8df b054 	ldr.w	fp, [pc, #84]	; 800881c <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80087ca:	0132      	lsls	r2, r6, #4
 80087cc:	4640      	mov	r0, r8
 80087ce:	4649      	mov	r1, r9
 80087d0:	f7ff fcbc 	bl	800814c <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80087d4:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80087d8:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80087dc:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80087de:	f043 0301 	orr.w	r3, r3, #1
 80087e2:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 80087e6:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80087ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80087ee:	f7ff ffa7 	bl	8008740 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80087f2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80087f6:	f023 0301 	bic.w	r3, r3, #1
 80087fa:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 80087fe:	b918      	cbnz	r0, 8008808 <HAL_FLASH_Program+0x74>
 8008800:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8008802:	b2f3      	uxtb	r3, r6
 8008804:	429d      	cmp	r5, r3
 8008806:	d8e0      	bhi.n	80087ca <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8008808:	2300      	movs	r3, #0
 800880a:	7623      	strb	r3, [r4, #24]
  return status;
 800880c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8008810:	2002      	movs	r0, #2
}
 8008812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008816:	bf00      	nop
 8008818:	200001f0 	.word	0x200001f0
 800881c:	40022000 	.word	0x40022000

08008820 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008820:	2200      	movs	r2, #0
 8008822:	4b06      	ldr	r3, [pc, #24]	; (800883c <FLASH_MassErase.isra.0+0x1c>)
 8008824:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008826:	4b06      	ldr	r3, [pc, #24]	; (8008840 <FLASH_MassErase.isra.0+0x20>)
 8008828:	691a      	ldr	r2, [r3, #16]
 800882a:	f042 0204 	orr.w	r2, r2, #4
 800882e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008830:	691a      	ldr	r2, [r3, #16]
 8008832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008836:	611a      	str	r2, [r3, #16]
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	200001f0 	.word	0x200001f0
 8008840:	40022000 	.word	0x40022000

08008844 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008844:	2200      	movs	r2, #0
 8008846:	4b06      	ldr	r3, [pc, #24]	; (8008860 <FLASH_PageErase+0x1c>)
 8008848:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <FLASH_PageErase+0x20>)
 800884c:	691a      	ldr	r2, [r3, #16]
 800884e:	f042 0202 	orr.w	r2, r2, #2
 8008852:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008854:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800885c:	611a      	str	r2, [r3, #16]
 800885e:	4770      	bx	lr
 8008860:	200001f0 	.word	0x200001f0
 8008864:	40022000 	.word	0x40022000

08008868 <HAL_FLASHEx_Erase>:
{
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800886c:	4d23      	ldr	r5, [pc, #140]	; (80088fc <HAL_FLASHEx_Erase+0x94>)
{
 800886e:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8008870:	7e2b      	ldrb	r3, [r5, #24]
{
 8008872:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8008874:	2b01      	cmp	r3, #1
 8008876:	d03d      	beq.n	80088f4 <HAL_FLASHEx_Erase+0x8c>
 8008878:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800887a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 800887c:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800887e:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008880:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008884:	d113      	bne.n	80088ae <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008886:	f7ff ff5b 	bl	8008740 <FLASH_WaitForLastOperation>
 800888a:	b120      	cbz	r0, 8008896 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800888c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800888e:	2300      	movs	r3, #0
 8008890:	762b      	strb	r3, [r5, #24]
  return status;
 8008892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8008896:	f7ff ffc3 	bl	8008820 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800889a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800889e:	f7ff ff4f 	bl	8008740 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80088a2:	4a17      	ldr	r2, [pc, #92]	; (8008900 <HAL_FLASHEx_Erase+0x98>)
 80088a4:	6913      	ldr	r3, [r2, #16]
 80088a6:	f023 0304 	bic.w	r3, r3, #4
 80088aa:	6113      	str	r3, [r2, #16]
 80088ac:	e7ef      	b.n	800888e <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80088ae:	f7ff ff47 	bl	8008740 <FLASH_WaitForLastOperation>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	d1ea      	bne.n	800888c <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80088b6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ba:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088be:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80088c0:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80088c2:	4c0f      	ldr	r4, [pc, #60]	; (8008900 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80088cc:	429e      	cmp	r6, r3
 80088ce:	d2de      	bcs.n	800888e <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff ffb7 	bl	8008844 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80088d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80088da:	f7ff ff31 	bl	8008740 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80088de:	6923      	ldr	r3, [r4, #16]
 80088e0:	f023 0302 	bic.w	r3, r3, #2
 80088e4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80088e6:	b110      	cbz	r0, 80088ee <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 80088e8:	f8c8 6000 	str.w	r6, [r8]
            break;
 80088ec:	e7cf      	b.n	800888e <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80088ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80088f2:	e7e7      	b.n	80088c4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80088f4:	2002      	movs	r0, #2
}
 80088f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fa:	bf00      	nop
 80088fc:	200001f0 	.word	0x200001f0
 8008900:	40022000 	.word	0x40022000

08008904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008908:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800890a:	4626      	mov	r6, r4
 800890c:	4b66      	ldr	r3, [pc, #408]	; (8008aa8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800890e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8008ab8 <HAL_GPIO_Init+0x1b4>
 8008912:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8008abc <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008916:	680a      	ldr	r2, [r1, #0]
 8008918:	fa32 f506 	lsrs.w	r5, r2, r6
 800891c:	d102      	bne.n	8008924 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800891e:	b003      	add	sp, #12
 8008920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8008924:	f04f 0801 	mov.w	r8, #1
 8008928:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800892c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8008930:	4590      	cmp	r8, r2
 8008932:	d17f      	bne.n	8008a34 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8008934:	684d      	ldr	r5, [r1, #4]
 8008936:	2d12      	cmp	r5, #18
 8008938:	f000 80aa 	beq.w	8008a90 <HAL_GPIO_Init+0x18c>
 800893c:	f200 8083 	bhi.w	8008a46 <HAL_GPIO_Init+0x142>
 8008940:	2d02      	cmp	r5, #2
 8008942:	f000 80a2 	beq.w	8008a8a <HAL_GPIO_Init+0x186>
 8008946:	d877      	bhi.n	8008a38 <HAL_GPIO_Init+0x134>
 8008948:	2d00      	cmp	r5, #0
 800894a:	f000 8089 	beq.w	8008a60 <HAL_GPIO_Init+0x15c>
 800894e:	2d01      	cmp	r5, #1
 8008950:	f000 8099 	beq.w	8008a86 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008954:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008958:	2aff      	cmp	r2, #255	; 0xff
 800895a:	bf93      	iteet	ls
 800895c:	4682      	movls	sl, r0
 800895e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8008962:	3d08      	subhi	r5, #8
 8008964:	f8d0 b000 	ldrls.w	fp, [r0]
 8008968:	bf92      	itee	ls
 800896a:	00b5      	lslls	r5, r6, #2
 800896c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8008970:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008972:	fa09 f805 	lsl.w	r8, r9, r5
 8008976:	ea2b 0808 	bic.w	r8, fp, r8
 800897a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800897e:	bf88      	it	hi
 8008980:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008984:	ea48 0505 	orr.w	r5, r8, r5
 8008988:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800898c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8008990:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8008994:	d04e      	beq.n	8008a34 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008996:	4d45      	ldr	r5, [pc, #276]	; (8008aac <HAL_GPIO_Init+0x1a8>)
 8008998:	4f44      	ldr	r7, [pc, #272]	; (8008aac <HAL_GPIO_Init+0x1a8>)
 800899a:	69ad      	ldr	r5, [r5, #24]
 800899c:	f026 0803 	bic.w	r8, r6, #3
 80089a0:	f045 0501 	orr.w	r5, r5, #1
 80089a4:	61bd      	str	r5, [r7, #24]
 80089a6:	69bd      	ldr	r5, [r7, #24]
 80089a8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80089ac:	f005 0501 	and.w	r5, r5, #1
 80089b0:	9501      	str	r5, [sp, #4]
 80089b2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80089b6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80089ba:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80089bc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80089c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80089c4:	fa09 f90b 	lsl.w	r9, r9, fp
 80089c8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80089cc:	4d38      	ldr	r5, [pc, #224]	; (8008ab0 <HAL_GPIO_Init+0x1ac>)
 80089ce:	42a8      	cmp	r0, r5
 80089d0:	d063      	beq.n	8008a9a <HAL_GPIO_Init+0x196>
 80089d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089d6:	42a8      	cmp	r0, r5
 80089d8:	d061      	beq.n	8008a9e <HAL_GPIO_Init+0x19a>
 80089da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089de:	42a8      	cmp	r0, r5
 80089e0:	d05f      	beq.n	8008aa2 <HAL_GPIO_Init+0x19e>
 80089e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80089e6:	42a8      	cmp	r0, r5
 80089e8:	bf0c      	ite	eq
 80089ea:	2503      	moveq	r5, #3
 80089ec:	2504      	movne	r5, #4
 80089ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80089f2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80089f6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80089fa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80089fc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8008a00:	bf14      	ite	ne
 8008a02:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008a04:	4395      	biceq	r5, r2
 8008a06:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8008a08:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a0a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8008a0e:	bf14      	ite	ne
 8008a10:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008a12:	4395      	biceq	r5, r2
 8008a14:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8008a16:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008a18:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8008a1c:	bf14      	ite	ne
 8008a1e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008a20:	4395      	biceq	r5, r2
 8008a22:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8008a24:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008a26:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8008a2a:	bf14      	ite	ne
 8008a2c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008a2e:	ea25 0202 	biceq.w	r2, r5, r2
 8008a32:	60da      	str	r2, [r3, #12]
	position++;
 8008a34:	3601      	adds	r6, #1
 8008a36:	e76e      	b.n	8008916 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8008a38:	2d03      	cmp	r5, #3
 8008a3a:	d022      	beq.n	8008a82 <HAL_GPIO_Init+0x17e>
 8008a3c:	2d11      	cmp	r5, #17
 8008a3e:	d189      	bne.n	8008954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008a40:	68cc      	ldr	r4, [r1, #12]
 8008a42:	3404      	adds	r4, #4
          break;
 8008a44:	e786      	b.n	8008954 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8008a46:	4f1b      	ldr	r7, [pc, #108]	; (8008ab4 <HAL_GPIO_Init+0x1b0>)
 8008a48:	42bd      	cmp	r5, r7
 8008a4a:	d009      	beq.n	8008a60 <HAL_GPIO_Init+0x15c>
 8008a4c:	d812      	bhi.n	8008a74 <HAL_GPIO_Init+0x170>
 8008a4e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008ac0 <HAL_GPIO_Init+0x1bc>
 8008a52:	454d      	cmp	r5, r9
 8008a54:	d004      	beq.n	8008a60 <HAL_GPIO_Init+0x15c>
 8008a56:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8008a5a:	454d      	cmp	r5, r9
 8008a5c:	f47f af7a 	bne.w	8008954 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008a60:	688c      	ldr	r4, [r1, #8]
 8008a62:	b1c4      	cbz	r4, 8008a96 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008a64:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8008a66:	bf0c      	ite	eq
 8008a68:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8008a6c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a70:	2408      	movs	r4, #8
 8008a72:	e76f      	b.n	8008954 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8008a74:	4575      	cmp	r5, lr
 8008a76:	d0f3      	beq.n	8008a60 <HAL_GPIO_Init+0x15c>
 8008a78:	4565      	cmp	r5, ip
 8008a7a:	d0f1      	beq.n	8008a60 <HAL_GPIO_Init+0x15c>
 8008a7c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008ac4 <HAL_GPIO_Init+0x1c0>
 8008a80:	e7eb      	b.n	8008a5a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008a82:	2400      	movs	r4, #0
 8008a84:	e766      	b.n	8008954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008a86:	68cc      	ldr	r4, [r1, #12]
          break;
 8008a88:	e764      	b.n	8008954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008a8a:	68cc      	ldr	r4, [r1, #12]
 8008a8c:	3408      	adds	r4, #8
          break;
 8008a8e:	e761      	b.n	8008954 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008a90:	68cc      	ldr	r4, [r1, #12]
 8008a92:	340c      	adds	r4, #12
          break;
 8008a94:	e75e      	b.n	8008954 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008a96:	2404      	movs	r4, #4
 8008a98:	e75c      	b.n	8008954 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	e7a7      	b.n	80089ee <HAL_GPIO_Init+0xea>
 8008a9e:	2501      	movs	r5, #1
 8008aa0:	e7a5      	b.n	80089ee <HAL_GPIO_Init+0xea>
 8008aa2:	2502      	movs	r5, #2
 8008aa4:	e7a3      	b.n	80089ee <HAL_GPIO_Init+0xea>
 8008aa6:	bf00      	nop
 8008aa8:	40010400 	.word	0x40010400
 8008aac:	40021000 	.word	0x40021000
 8008ab0:	40010800 	.word	0x40010800
 8008ab4:	10210000 	.word	0x10210000
 8008ab8:	10310000 	.word	0x10310000
 8008abc:	10320000 	.word	0x10320000
 8008ac0:	10110000 	.word	0x10110000
 8008ac4:	10220000 	.word	0x10220000

08008ac8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ac8:	b10a      	cbz	r2, 8008ace <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008aca:	6101      	str	r1, [r0, #16]
 8008acc:	4770      	bx	lr
 8008ace:	0409      	lsls	r1, r1, #16
 8008ad0:	e7fb      	b.n	8008aca <HAL_GPIO_WritePin+0x2>
	...

08008ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ad4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ad8:	4605      	mov	r5, r0
 8008ada:	b908      	cbnz	r0, 8008ae0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8008adc:	2001      	movs	r0, #1
 8008ade:	e03c      	b.n	8008b5a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ae0:	6803      	ldr	r3, [r0, #0]
 8008ae2:	07db      	lsls	r3, r3, #31
 8008ae4:	d410      	bmi.n	8008b08 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ae6:	682b      	ldr	r3, [r5, #0]
 8008ae8:	079f      	lsls	r7, r3, #30
 8008aea:	d45d      	bmi.n	8008ba8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	0719      	lsls	r1, r3, #28
 8008af0:	f100 8094 	bmi.w	8008c1c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	075a      	lsls	r2, r3, #29
 8008af8:	f100 80be 	bmi.w	8008c78 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008afc:	69e8      	ldr	r0, [r5, #28]
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f040 812c 	bne.w	8008d5c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8008b04:	2000      	movs	r0, #0
 8008b06:	e028      	b.n	8008b5a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b08:	4c8f      	ldr	r4, [pc, #572]	; (8008d48 <HAL_RCC_OscConfig+0x274>)
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	f003 030c 	and.w	r3, r3, #12
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	d007      	beq.n	8008b24 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	f003 030c 	and.w	r3, r3, #12
 8008b1a:	2b08      	cmp	r3, #8
 8008b1c:	d109      	bne.n	8008b32 <HAL_RCC_OscConfig+0x5e>
 8008b1e:	6863      	ldr	r3, [r4, #4]
 8008b20:	03de      	lsls	r6, r3, #15
 8008b22:	d506      	bpl.n	8008b32 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	039c      	lsls	r4, r3, #14
 8008b28:	d5dd      	bpl.n	8008ae6 <HAL_RCC_OscConfig+0x12>
 8008b2a:	686b      	ldr	r3, [r5, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1da      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x12>
 8008b30:	e7d4      	b.n	8008adc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b32:	686b      	ldr	r3, [r5, #4]
 8008b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b38:	d112      	bne.n	8008b60 <HAL_RCC_OscConfig+0x8c>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b40:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008b42:	f7ff fce5 	bl	8008510 <HAL_GetTick>
 8008b46:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	0398      	lsls	r0, r3, #14
 8008b4c:	d4cb      	bmi.n	8008ae6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b4e:	f7ff fcdf 	bl	8008510 <HAL_GetTick>
 8008b52:	1b80      	subs	r0, r0, r6
 8008b54:	2864      	cmp	r0, #100	; 0x64
 8008b56:	d9f7      	bls.n	8008b48 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8008b58:	2003      	movs	r0, #3
}
 8008b5a:	b002      	add	sp, #8
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b60:	b99b      	cbnz	r3, 8008b8a <HAL_RCC_OscConfig+0xb6>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8008b72:	f7ff fccd 	bl	8008510 <HAL_GetTick>
 8008b76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	0399      	lsls	r1, r3, #14
 8008b7c:	d5b3      	bpl.n	8008ae6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b7e:	f7ff fcc7 	bl	8008510 <HAL_GetTick>
 8008b82:	1b80      	subs	r0, r0, r6
 8008b84:	2864      	cmp	r0, #100	; 0x64
 8008b86:	d9f7      	bls.n	8008b78 <HAL_RCC_OscConfig+0xa4>
 8008b88:	e7e6      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	d103      	bne.n	8008b9a <HAL_RCC_OscConfig+0xc6>
 8008b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	e7cf      	b.n	8008b3a <HAL_RCC_OscConfig+0x66>
 8008b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ba6:	e7cb      	b.n	8008b40 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ba8:	4c67      	ldr	r4, [pc, #412]	; (8008d48 <HAL_RCC_OscConfig+0x274>)
 8008baa:	6863      	ldr	r3, [r4, #4]
 8008bac:	f013 0f0c 	tst.w	r3, #12
 8008bb0:	d007      	beq.n	8008bc2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	f003 030c 	and.w	r3, r3, #12
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d110      	bne.n	8008bde <HAL_RCC_OscConfig+0x10a>
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	03da      	lsls	r2, r3, #15
 8008bc0:	d40d      	bmi.n	8008bde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	079b      	lsls	r3, r3, #30
 8008bc6:	d502      	bpl.n	8008bce <HAL_RCC_OscConfig+0xfa>
 8008bc8:	692b      	ldr	r3, [r5, #16]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d186      	bne.n	8008adc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	696a      	ldr	r2, [r5, #20]
 8008bd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008bd6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	e786      	b.n	8008aec <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008bde:	692a      	ldr	r2, [r5, #16]
 8008be0:	4b5a      	ldr	r3, [pc, #360]	; (8008d4c <HAL_RCC_OscConfig+0x278>)
 8008be2:	b16a      	cbz	r2, 8008c00 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8008be4:	2201      	movs	r2, #1
 8008be6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008be8:	f7ff fc92 	bl	8008510 <HAL_GetTick>
 8008bec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	079f      	lsls	r7, r3, #30
 8008bf2:	d4ec      	bmi.n	8008bce <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bf4:	f7ff fc8c 	bl	8008510 <HAL_GetTick>
 8008bf8:	1b80      	subs	r0, r0, r6
 8008bfa:	2802      	cmp	r0, #2
 8008bfc:	d9f7      	bls.n	8008bee <HAL_RCC_OscConfig+0x11a>
 8008bfe:	e7ab      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8008c00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008c02:	f7ff fc85 	bl	8008510 <HAL_GetTick>
 8008c06:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	0798      	lsls	r0, r3, #30
 8008c0c:	f57f af6e 	bpl.w	8008aec <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c10:	f7ff fc7e 	bl	8008510 <HAL_GetTick>
 8008c14:	1b80      	subs	r0, r0, r6
 8008c16:	2802      	cmp	r0, #2
 8008c18:	d9f6      	bls.n	8008c08 <HAL_RCC_OscConfig+0x134>
 8008c1a:	e79d      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c1c:	69aa      	ldr	r2, [r5, #24]
 8008c1e:	4c4a      	ldr	r4, [pc, #296]	; (8008d48 <HAL_RCC_OscConfig+0x274>)
 8008c20:	4b4b      	ldr	r3, [pc, #300]	; (8008d50 <HAL_RCC_OscConfig+0x27c>)
 8008c22:	b1da      	cbz	r2, 8008c5c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8008c24:	2201      	movs	r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008c28:	f7ff fc72 	bl	8008510 <HAL_GetTick>
 8008c2c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c30:	079b      	lsls	r3, r3, #30
 8008c32:	d50d      	bpl.n	8008c50 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008c34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008c38:	4b46      	ldr	r3, [pc, #280]	; (8008d54 <HAL_RCC_OscConfig+0x280>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c40:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008c42:	bf00      	nop
  }
  while (Delay --);
 8008c44:	9b01      	ldr	r3, [sp, #4]
 8008c46:	1e5a      	subs	r2, r3, #1
 8008c48:	9201      	str	r2, [sp, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f9      	bne.n	8008c42 <HAL_RCC_OscConfig+0x16e>
 8008c4e:	e751      	b.n	8008af4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c50:	f7ff fc5e 	bl	8008510 <HAL_GetTick>
 8008c54:	1b80      	subs	r0, r0, r6
 8008c56:	2802      	cmp	r0, #2
 8008c58:	d9e9      	bls.n	8008c2e <HAL_RCC_OscConfig+0x15a>
 8008c5a:	e77d      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8008c5c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008c5e:	f7ff fc57 	bl	8008510 <HAL_GetTick>
 8008c62:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c66:	079f      	lsls	r7, r3, #30
 8008c68:	f57f af44 	bpl.w	8008af4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c6c:	f7ff fc50 	bl	8008510 <HAL_GetTick>
 8008c70:	1b80      	subs	r0, r0, r6
 8008c72:	2802      	cmp	r0, #2
 8008c74:	d9f6      	bls.n	8008c64 <HAL_RCC_OscConfig+0x190>
 8008c76:	e76f      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c78:	4c33      	ldr	r4, [pc, #204]	; (8008d48 <HAL_RCC_OscConfig+0x274>)
 8008c7a:	69e3      	ldr	r3, [r4, #28]
 8008c7c:	00d8      	lsls	r0, r3, #3
 8008c7e:	d424      	bmi.n	8008cca <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8008c80:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c82:	69e3      	ldr	r3, [r4, #28]
 8008c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c88:	61e3      	str	r3, [r4, #28]
 8008c8a:	69e3      	ldr	r3, [r4, #28]
 8008c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c90:	9300      	str	r3, [sp, #0]
 8008c92:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c94:	4e30      	ldr	r6, [pc, #192]	; (8008d58 <HAL_RCC_OscConfig+0x284>)
 8008c96:	6833      	ldr	r3, [r6, #0]
 8008c98:	05d9      	lsls	r1, r3, #23
 8008c9a:	d518      	bpl.n	8008cce <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c9c:	68eb      	ldr	r3, [r5, #12]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d126      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x21c>
 8008ca2:	6a23      	ldr	r3, [r4, #32]
 8008ca4:	f043 0301 	orr.w	r3, r3, #1
 8008ca8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008caa:	f7ff fc31 	bl	8008510 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cae:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008cb2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cb4:	6a23      	ldr	r3, [r4, #32]
 8008cb6:	079b      	lsls	r3, r3, #30
 8008cb8:	d53f      	bpl.n	8008d3a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8008cba:	2f00      	cmp	r7, #0
 8008cbc:	f43f af1e 	beq.w	8008afc <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cc0:	69e3      	ldr	r3, [r4, #28]
 8008cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc6:	61e3      	str	r3, [r4, #28]
 8008cc8:	e718      	b.n	8008afc <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8008cca:	2700      	movs	r7, #0
 8008ccc:	e7e2      	b.n	8008c94 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008cce:	6833      	ldr	r3, [r6, #0]
 8008cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008cd6:	f7ff fc1b 	bl	8008510 <HAL_GetTick>
 8008cda:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cdc:	6833      	ldr	r3, [r6, #0]
 8008cde:	05da      	lsls	r2, r3, #23
 8008ce0:	d4dc      	bmi.n	8008c9c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ce2:	f7ff fc15 	bl	8008510 <HAL_GetTick>
 8008ce6:	eba0 0008 	sub.w	r0, r0, r8
 8008cea:	2864      	cmp	r0, #100	; 0x64
 8008cec:	d9f6      	bls.n	8008cdc <HAL_RCC_OscConfig+0x208>
 8008cee:	e733      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cf0:	b9ab      	cbnz	r3, 8008d1e <HAL_RCC_OscConfig+0x24a>
 8008cf2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cf4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cf8:	f023 0301 	bic.w	r3, r3, #1
 8008cfc:	6223      	str	r3, [r4, #32]
 8008cfe:	6a23      	ldr	r3, [r4, #32]
 8008d00:	f023 0304 	bic.w	r3, r3, #4
 8008d04:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8008d06:	f7ff fc03 	bl	8008510 <HAL_GetTick>
 8008d0a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d0c:	6a23      	ldr	r3, [r4, #32]
 8008d0e:	0798      	lsls	r0, r3, #30
 8008d10:	d5d3      	bpl.n	8008cba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d12:	f7ff fbfd 	bl	8008510 <HAL_GetTick>
 8008d16:	1b80      	subs	r0, r0, r6
 8008d18:	4540      	cmp	r0, r8
 8008d1a:	d9f7      	bls.n	8008d0c <HAL_RCC_OscConfig+0x238>
 8008d1c:	e71c      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d1e:	2b05      	cmp	r3, #5
 8008d20:	6a23      	ldr	r3, [r4, #32]
 8008d22:	d103      	bne.n	8008d2c <HAL_RCC_OscConfig+0x258>
 8008d24:	f043 0304 	orr.w	r3, r3, #4
 8008d28:	6223      	str	r3, [r4, #32]
 8008d2a:	e7ba      	b.n	8008ca2 <HAL_RCC_OscConfig+0x1ce>
 8008d2c:	f023 0301 	bic.w	r3, r3, #1
 8008d30:	6223      	str	r3, [r4, #32]
 8008d32:	6a23      	ldr	r3, [r4, #32]
 8008d34:	f023 0304 	bic.w	r3, r3, #4
 8008d38:	e7b6      	b.n	8008ca8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d3a:	f7ff fbe9 	bl	8008510 <HAL_GetTick>
 8008d3e:	eba0 0008 	sub.w	r0, r0, r8
 8008d42:	42b0      	cmp	r0, r6
 8008d44:	d9b6      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x1e0>
 8008d46:	e707      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	42420000 	.word	0x42420000
 8008d50:	42420480 	.word	0x42420480
 8008d54:	20000000 	.word	0x20000000
 8008d58:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <HAL_RCC_OscConfig+0x334>)
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	461c      	mov	r4, r3
 8008d62:	f002 020c 	and.w	r2, r2, #12
 8008d66:	2a08      	cmp	r2, #8
 8008d68:	d03d      	beq.n	8008de6 <HAL_RCC_OscConfig+0x312>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4e27      	ldr	r6, [pc, #156]	; (8008e0c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d6e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008d70:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d72:	d12b      	bne.n	8008dcc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8008d74:	f7ff fbcc 	bl	8008510 <HAL_GetTick>
 8008d78:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d7a:	6823      	ldr	r3, [r4, #0]
 8008d7c:	0199      	lsls	r1, r3, #6
 8008d7e:	d41f      	bmi.n	8008dc0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008d80:	6a2b      	ldr	r3, [r5, #32]
 8008d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d86:	d105      	bne.n	8008d94 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008d88:	6862      	ldr	r2, [r4, #4]
 8008d8a:	68a9      	ldr	r1, [r5, #8]
 8008d8c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008d90:	430a      	orrs	r2, r1
 8008d92:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d94:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8008da2:	2301      	movs	r3, #1
 8008da4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008da6:	f7ff fbb3 	bl	8008510 <HAL_GetTick>
 8008daa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008dac:	6823      	ldr	r3, [r4, #0]
 8008dae:	019a      	lsls	r2, r3, #6
 8008db0:	f53f aea8 	bmi.w	8008b04 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db4:	f7ff fbac 	bl	8008510 <HAL_GetTick>
 8008db8:	1b40      	subs	r0, r0, r5
 8008dba:	2802      	cmp	r0, #2
 8008dbc:	d9f6      	bls.n	8008dac <HAL_RCC_OscConfig+0x2d8>
 8008dbe:	e6cb      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc0:	f7ff fba6 	bl	8008510 <HAL_GetTick>
 8008dc4:	1bc0      	subs	r0, r0, r7
 8008dc6:	2802      	cmp	r0, #2
 8008dc8:	d9d7      	bls.n	8008d7a <HAL_RCC_OscConfig+0x2a6>
 8008dca:	e6c5      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8008dcc:	f7ff fba0 	bl	8008510 <HAL_GetTick>
 8008dd0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008dd2:	6823      	ldr	r3, [r4, #0]
 8008dd4:	019b      	lsls	r3, r3, #6
 8008dd6:	f57f ae95 	bpl.w	8008b04 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dda:	f7ff fb99 	bl	8008510 <HAL_GetTick>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	2802      	cmp	r0, #2
 8008de2:	d9f6      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x2fe>
 8008de4:	e6b8      	b.n	8008b58 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008de6:	2801      	cmp	r0, #1
 8008de8:	f43f aeb7 	beq.w	8008b5a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8008dec:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dee:	6a2b      	ldr	r3, [r5, #32]
 8008df0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8008df4:	429a      	cmp	r2, r3
 8008df6:	f47f ae71 	bne.w	8008adc <HAL_RCC_OscConfig+0x8>
 8008dfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008dfc:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8008e00:	1ac0      	subs	r0, r0, r3
 8008e02:	bf18      	it	ne
 8008e04:	2001      	movne	r0, #1
 8008e06:	e6a8      	b.n	8008b5a <HAL_RCC_OscConfig+0x86>
 8008e08:	40021000 	.word	0x40021000
 8008e0c:	42420060 	.word	0x42420060

08008e10 <HAL_RCC_GetSysClockFreq>:
{
 8008e10:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e12:	4b19      	ldr	r3, [pc, #100]	; (8008e78 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8008e14:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008e16:	ac02      	add	r4, sp, #8
 8008e18:	f103 0510 	add.w	r5, r3, #16
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	6859      	ldr	r1, [r3, #4]
 8008e22:	3308      	adds	r3, #8
 8008e24:	c203      	stmia	r2!, {r0, r1}
 8008e26:	42ab      	cmp	r3, r5
 8008e28:	4614      	mov	r4, r2
 8008e2a:	d1f7      	bne.n	8008e1c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f88d 3004 	strb.w	r3, [sp, #4]
 8008e32:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8008e34:	4911      	ldr	r1, [pc, #68]	; (8008e7c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008e36:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8008e3a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8008e3c:	f003 020c 	and.w	r2, r3, #12
 8008e40:	2a08      	cmp	r2, #8
 8008e42:	d117      	bne.n	8008e74 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e44:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8008e48:	a806      	add	r0, sp, #24
 8008e4a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e4c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008e4e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008e52:	d50c      	bpl.n	8008e6e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e54:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e56:	480a      	ldr	r0, [pc, #40]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e58:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e5c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008e5e:	aa06      	add	r2, sp, #24
 8008e60:	4413      	add	r3, r2
 8008e62:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008e66:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8008e6a:	b007      	add	sp, #28
 8008e6c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008e6e:	4805      	ldr	r0, [pc, #20]	; (8008e84 <HAL_RCC_GetSysClockFreq+0x74>)
 8008e70:	4350      	muls	r0, r2
 8008e72:	e7fa      	b.n	8008e6a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8008e74:	4802      	ldr	r0, [pc, #8]	; (8008e80 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8008e76:	e7f8      	b.n	8008e6a <HAL_RCC_GetSysClockFreq+0x5a>
 8008e78:	0800966c 	.word	0x0800966c
 8008e7c:	40021000 	.word	0x40021000
 8008e80:	007a1200 	.word	0x007a1200
 8008e84:	003d0900 	.word	0x003d0900

08008e88 <HAL_RCC_ClockConfig>:
{
 8008e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8008e8e:	4604      	mov	r4, r0
 8008e90:	b910      	cbnz	r0, 8008e98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008e92:	2001      	movs	r0, #1
 8008e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e98:	4a45      	ldr	r2, [pc, #276]	; (8008fb0 <HAL_RCC_ClockConfig+0x128>)
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	d329      	bcc.n	8008ef8 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ea4:	6821      	ldr	r1, [r4, #0]
 8008ea6:	078e      	lsls	r6, r1, #30
 8008ea8:	d431      	bmi.n	8008f0e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008eaa:	07ca      	lsls	r2, r1, #31
 8008eac:	d444      	bmi.n	8008f38 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008eae:	4a40      	ldr	r2, [pc, #256]	; (8008fb0 <HAL_RCC_ClockConfig+0x128>)
 8008eb0:	6813      	ldr	r3, [r2, #0]
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	429d      	cmp	r5, r3
 8008eb8:	d367      	bcc.n	8008f8a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	4d3d      	ldr	r5, [pc, #244]	; (8008fb4 <HAL_RCC_ClockConfig+0x12c>)
 8008ebe:	f012 0f04 	tst.w	r2, #4
 8008ec2:	d16e      	bne.n	8008fa2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ec4:	0713      	lsls	r3, r2, #28
 8008ec6:	d506      	bpl.n	8008ed6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008ec8:	686b      	ldr	r3, [r5, #4]
 8008eca:	6922      	ldr	r2, [r4, #16]
 8008ecc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8008ed0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008ed4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ed6:	f7ff ff9b 	bl	8008e10 <HAL_RCC_GetSysClockFreq>
 8008eda:	686b      	ldr	r3, [r5, #4]
 8008edc:	4a36      	ldr	r2, [pc, #216]	; (8008fb8 <HAL_RCC_ClockConfig+0x130>)
 8008ede:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008ee2:	5cd3      	ldrb	r3, [r2, r3]
 8008ee4:	40d8      	lsrs	r0, r3
 8008ee6:	4b35      	ldr	r3, [pc, #212]	; (8008fbc <HAL_RCC_ClockConfig+0x134>)
 8008ee8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8008eea:	4b35      	ldr	r3, [pc, #212]	; (8008fc0 <HAL_RCC_ClockConfig+0x138>)
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	f7ff facd 	bl	800848c <HAL_InitTick>
  return HAL_OK;
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ef8:	6813      	ldr	r3, [r2, #0]
 8008efa:	f023 0307 	bic.w	r3, r3, #7
 8008efe:	430b      	orrs	r3, r1
 8008f00:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f02:	6813      	ldr	r3, [r2, #0]
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	4299      	cmp	r1, r3
 8008f0a:	d1c2      	bne.n	8008e92 <HAL_RCC_ClockConfig+0xa>
 8008f0c:	e7ca      	b.n	8008ea4 <HAL_RCC_ClockConfig+0x1c>
 8008f0e:	4b29      	ldr	r3, [pc, #164]	; (8008fb4 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f10:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f14:	bf1e      	ittt	ne
 8008f16:	685a      	ldrne	r2, [r3, #4]
 8008f18:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8008f1c:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f1e:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f20:	bf42      	ittt	mi
 8008f22:	685a      	ldrmi	r2, [r3, #4]
 8008f24:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8008f28:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	68a0      	ldr	r0, [r4, #8]
 8008f2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008f32:	4302      	orrs	r2, r0
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	e7b8      	b.n	8008eaa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f38:	6862      	ldr	r2, [r4, #4]
 8008f3a:	4e1e      	ldr	r6, [pc, #120]	; (8008fb4 <HAL_RCC_ClockConfig+0x12c>)
 8008f3c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f3e:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f40:	d11b      	bne.n	8008f7a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f46:	d0a4      	beq.n	8008e92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f48:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f4a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	4313      	orrs	r3, r2
 8008f54:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8008f56:	f7ff fadb 	bl	8008510 <HAL_GetTick>
 8008f5a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f5c:	6873      	ldr	r3, [r6, #4]
 8008f5e:	6862      	ldr	r2, [r4, #4]
 8008f60:	f003 030c 	and.w	r3, r3, #12
 8008f64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008f68:	d0a1      	beq.n	8008eae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f6a:	f7ff fad1 	bl	8008510 <HAL_GetTick>
 8008f6e:	1bc0      	subs	r0, r0, r7
 8008f70:	4540      	cmp	r0, r8
 8008f72:	d9f3      	bls.n	8008f5c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8008f74:	2003      	movs	r0, #3
}
 8008f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f7a:	2a02      	cmp	r2, #2
 8008f7c:	d102      	bne.n	8008f84 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8008f82:	e7e0      	b.n	8008f46 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f84:	f013 0f02 	tst.w	r3, #2
 8008f88:	e7dd      	b.n	8008f46 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	f023 0307 	bic.w	r3, r3, #7
 8008f90:	432b      	orrs	r3, r5
 8008f92:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f94:	6813      	ldr	r3, [r2, #0]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	429d      	cmp	r5, r3
 8008f9c:	f47f af79 	bne.w	8008e92 <HAL_RCC_ClockConfig+0xa>
 8008fa0:	e78b      	b.n	8008eba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fa2:	686b      	ldr	r3, [r5, #4]
 8008fa4:	68e1      	ldr	r1, [r4, #12]
 8008fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008faa:	430b      	orrs	r3, r1
 8008fac:	606b      	str	r3, [r5, #4]
 8008fae:	e789      	b.n	8008ec4 <HAL_RCC_ClockConfig+0x3c>
 8008fb0:	40022000 	.word	0x40022000
 8008fb4:	40021000 	.word	0x40021000
 8008fb8:	0800967c 	.word	0x0800967c
 8008fbc:	20000000 	.word	0x20000000
 8008fc0:	20000008 	.word	0x20000008

08008fc4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fc4:	4b04      	ldr	r3, [pc, #16]	; (8008fd8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8008fc6:	4a05      	ldr	r2, [pc, #20]	; (8008fdc <HAL_RCC_GetPCLK1Freq+0x18>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008fce:	5cd3      	ldrb	r3, [r2, r3]
 8008fd0:	4a03      	ldr	r2, [pc, #12]	; (8008fe0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008fd2:	6810      	ldr	r0, [r2, #0]
}
 8008fd4:	40d8      	lsrs	r0, r3
 8008fd6:	4770      	bx	lr
 8008fd8:	40021000 	.word	0x40021000
 8008fdc:	0800968c 	.word	0x0800968c
 8008fe0:	20000000 	.word	0x20000000

08008fe4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8008fe6:	4a05      	ldr	r2, [pc, #20]	; (8008ffc <HAL_RCC_GetPCLK2Freq+0x18>)
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8008fee:	5cd3      	ldrb	r3, [r2, r3]
 8008ff0:	4a03      	ldr	r2, [pc, #12]	; (8009000 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8008ff2:	6810      	ldr	r0, [r2, #0]
}
 8008ff4:	40d8      	lsrs	r0, r3
 8008ff6:	4770      	bx	lr
 8008ff8:	40021000 	.word	0x40021000
 8008ffc:	0800968c 	.word	0x0800968c
 8009000:	20000000 	.word	0x20000000

08009004 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009004:	6803      	ldr	r3, [r0, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800900c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900e:	695a      	ldr	r2, [r3, #20]
 8009010:	f022 0201 	bic.w	r2, r2, #1
 8009014:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009016:	2320      	movs	r3, #32
 8009018:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800901c:	4770      	bx	lr
	...

08009020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009024:	6803      	ldr	r3, [r0, #0]
 8009026:	68c1      	ldr	r1, [r0, #12]
 8009028:	691a      	ldr	r2, [r3, #16]
 800902a:	2419      	movs	r4, #25
 800902c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8009030:	430a      	orrs	r2, r1
 8009032:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009034:	6882      	ldr	r2, [r0, #8]
 8009036:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8009038:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800903a:	4302      	orrs	r2, r0
 800903c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800903e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8009042:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009046:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8009048:	430a      	orrs	r2, r1
 800904a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800904c:	695a      	ldr	r2, [r3, #20]
 800904e:	69a9      	ldr	r1, [r5, #24]
 8009050:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009054:	430a      	orrs	r2, r1
 8009056:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009058:	4a0d      	ldr	r2, [pc, #52]	; (8009090 <UART_SetConfig+0x70>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d114      	bne.n	8009088 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800905e:	f7ff ffc1 	bl	8008fe4 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009062:	4360      	muls	r0, r4
 8009064:	686c      	ldr	r4, [r5, #4]
 8009066:	2264      	movs	r2, #100	; 0x64
 8009068:	00a4      	lsls	r4, r4, #2
 800906a:	fbb0 f0f4 	udiv	r0, r0, r4
 800906e:	fbb0 f4f2 	udiv	r4, r0, r2
 8009072:	fb02 0314 	mls	r3, r2, r4, r0
 8009076:	011b      	lsls	r3, r3, #4
 8009078:	3332      	adds	r3, #50	; 0x32
 800907a:	fbb3 f3f2 	udiv	r3, r3, r2
 800907e:	6829      	ldr	r1, [r5, #0]
 8009080:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8009084:	608b      	str	r3, [r1, #8]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8009088:	f7ff ff9c 	bl	8008fc4 <HAL_RCC_GetPCLK1Freq>
 800908c:	e7e9      	b.n	8009062 <UART_SetConfig+0x42>
 800908e:	bf00      	nop
 8009090:	40013800 	.word	0x40013800

08009094 <HAL_UART_Init>:
{
 8009094:	b510      	push	{r4, lr}
  if (huart == NULL)
 8009096:	4604      	mov	r4, r0
 8009098:	b340      	cbz	r0, 80090ec <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800909a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800909e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80090a2:	b91b      	cbnz	r3, 80090ac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80090a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80090a8:	f7ff f976 	bl	8008398 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80090ac:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80090ae:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80090b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80090b4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80090b6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80090b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090bc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80090be:	f7ff ffaf 	bl	8009020 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090c2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090ce:	695a      	ldr	r2, [r3, #20]
 80090d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090d4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80090dc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80090de:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090e0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80090e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80090e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80090ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80090ec:	2001      	movs	r0, #1
}
 80090ee:	bd10      	pop	{r4, pc}

080090f0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80090f0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80090f4:	2b20      	cmp	r3, #32
 80090f6:	d120      	bne.n	800913a <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80090f8:	b1e9      	cbz	r1, 8009136 <HAL_UART_Receive_IT+0x46>
 80090fa:	b1e2      	cbz	r2, 8009136 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80090fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009100:	2b01      	cmp	r3, #1
 8009102:	d01a      	beq.n	800913a <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8009104:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8009106:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009108:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800910a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800910e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009112:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8009114:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009116:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8009118:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800911c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009120:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009122:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8009124:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009126:	f041 0101 	orr.w	r1, r1, #1
 800912a:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800912c:	68d1      	ldr	r1, [r2, #12]
 800912e:	f041 0120 	orr.w	r1, r1, #32
 8009132:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8009134:	4770      	bx	lr
      return HAL_ERROR;
 8009136:	2001      	movs	r0, #1
 8009138:	4770      	bx	lr
    return HAL_BUSY;
 800913a:	2002      	movs	r0, #2
}
 800913c:	4770      	bx	lr

0800913e <HAL_UART_TxCpltCallback>:
 800913e:	4770      	bx	lr

08009140 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009140:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8009144:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009146:	2b22      	cmp	r3, #34	; 0x22
 8009148:	d136      	bne.n	80091b8 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800914a:	6883      	ldr	r3, [r0, #8]
 800914c:	6901      	ldr	r1, [r0, #16]
 800914e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009152:	6802      	ldr	r2, [r0, #0]
 8009154:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009156:	d123      	bne.n	80091a0 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009158:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800915a:	b9e9      	cbnz	r1, 8009198 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800915c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009160:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8009164:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8009166:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8009168:	3c01      	subs	r4, #1
 800916a:	b2a4      	uxth	r4, r4
 800916c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800916e:	b98c      	cbnz	r4, 8009194 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009170:	6803      	ldr	r3, [r0, #0]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	f022 0220 	bic.w	r2, r2, #32
 8009178:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009180:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	f022 0201 	bic.w	r2, r2, #1
 8009188:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800918a:	2320      	movs	r3, #32
 800918c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8009190:	f7ff f828 	bl	80081e4 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8009194:	2000      	movs	r0, #0
}
 8009196:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009198:	b2d2      	uxtb	r2, r2
 800919a:	f823 2b01 	strh.w	r2, [r3], #1
 800919e:	e7e1      	b.n	8009164 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091a0:	b921      	cbnz	r1, 80091ac <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091a2:	1c59      	adds	r1, r3, #1
 80091a4:	6852      	ldr	r2, [r2, #4]
 80091a6:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e7dc      	b.n	8009166 <UART_Receive_IT+0x26>
 80091ac:	6852      	ldr	r2, [r2, #4]
 80091ae:	1c59      	adds	r1, r3, #1
 80091b0:	6281      	str	r1, [r0, #40]	; 0x28
 80091b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091b6:	e7f7      	b.n	80091a8 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80091b8:	2002      	movs	r0, #2
 80091ba:	bd10      	pop	{r4, pc}

080091bc <HAL_UART_ErrorCallback>:
 80091bc:	4770      	bx	lr
	...

080091c0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091c0:	6803      	ldr	r3, [r0, #0]
{
 80091c2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091c4:	681a      	ldr	r2, [r3, #0]
{
 80091c6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80091c8:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091ca:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80091cc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80091ce:	d107      	bne.n	80091e0 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80091d0:	0696      	lsls	r6, r2, #26
 80091d2:	d55a      	bpl.n	800928a <HAL_UART_IRQHandler+0xca>
 80091d4:	068d      	lsls	r5, r1, #26
 80091d6:	d558      	bpl.n	800928a <HAL_UART_IRQHandler+0xca>
}
 80091d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80091dc:	f7ff bfb0 	b.w	8009140 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091e0:	f015 0501 	ands.w	r5, r5, #1
 80091e4:	d102      	bne.n	80091ec <HAL_UART_IRQHandler+0x2c>
 80091e6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80091ea:	d04e      	beq.n	800928a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091ec:	07d3      	lsls	r3, r2, #31
 80091ee:	d505      	bpl.n	80091fc <HAL_UART_IRQHandler+0x3c>
 80091f0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091f2:	bf42      	ittt	mi
 80091f4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80091f6:	f043 0301 	orrmi.w	r3, r3, #1
 80091fa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091fc:	0750      	lsls	r0, r2, #29
 80091fe:	d504      	bpl.n	800920a <HAL_UART_IRQHandler+0x4a>
 8009200:	b11d      	cbz	r5, 800920a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009202:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009204:	f043 0302 	orr.w	r3, r3, #2
 8009208:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800920a:	0793      	lsls	r3, r2, #30
 800920c:	d504      	bpl.n	8009218 <HAL_UART_IRQHandler+0x58>
 800920e:	b11d      	cbz	r5, 8009218 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009210:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009212:	f043 0304 	orr.w	r3, r3, #4
 8009216:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009218:	0716      	lsls	r6, r2, #28
 800921a:	d504      	bpl.n	8009226 <HAL_UART_IRQHandler+0x66>
 800921c:	b11d      	cbz	r5, 8009226 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800921e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009220:	f043 0308 	orr.w	r3, r3, #8
 8009224:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009226:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d066      	beq.n	80092fa <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800922c:	0695      	lsls	r5, r2, #26
 800922e:	d504      	bpl.n	800923a <HAL_UART_IRQHandler+0x7a>
 8009230:	0688      	lsls	r0, r1, #26
 8009232:	d502      	bpl.n	800923a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8009234:	4620      	mov	r0, r4
 8009236:	f7ff ff83 	bl	8009140 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800923a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800923c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800923e:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009240:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009242:	0711      	lsls	r1, r2, #28
 8009244:	d402      	bmi.n	800924c <HAL_UART_IRQHandler+0x8c>
 8009246:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800924a:	d01a      	beq.n	8009282 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800924c:	f7ff feda 	bl	8009004 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	695a      	ldr	r2, [r3, #20]
 8009254:	0652      	lsls	r2, r2, #25
 8009256:	d510      	bpl.n	800927a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009258:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800925a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800925c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009260:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8009262:	b150      	cbz	r0, 800927a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009264:	4b25      	ldr	r3, [pc, #148]	; (80092fc <HAL_UART_IRQHandler+0x13c>)
 8009266:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009268:	f7ff f9c2 	bl	80085f0 <HAL_DMA_Abort_IT>
 800926c:	2800      	cmp	r0, #0
 800926e:	d044      	beq.n	80092fa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009270:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8009272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009276:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009278:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800927a:	4620      	mov	r0, r4
 800927c:	f7ff ff9e 	bl	80091bc <HAL_UART_ErrorCallback>
 8009280:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8009282:	f7ff ff9b 	bl	80091bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009286:	63e5      	str	r5, [r4, #60]	; 0x3c
 8009288:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800928a:	0616      	lsls	r6, r2, #24
 800928c:	d527      	bpl.n	80092de <HAL_UART_IRQHandler+0x11e>
 800928e:	060d      	lsls	r5, r1, #24
 8009290:	d525      	bpl.n	80092de <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009292:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8009296:	2a21      	cmp	r2, #33	; 0x21
 8009298:	d12f      	bne.n	80092fa <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800929a:	68a2      	ldr	r2, [r4, #8]
 800929c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80092a0:	6a22      	ldr	r2, [r4, #32]
 80092a2:	d117      	bne.n	80092d4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092a4:	8811      	ldrh	r1, [r2, #0]
 80092a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80092aa:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80092ac:	6921      	ldr	r1, [r4, #16]
 80092ae:	b979      	cbnz	r1, 80092d0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80092b0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80092b2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80092b4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80092b6:	3a01      	subs	r2, #1
 80092b8:	b292      	uxth	r2, r2
 80092ba:	84e2      	strh	r2, [r4, #38]	; 0x26
 80092bc:	b9ea      	cbnz	r2, 80092fa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092c4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092c6:	68da      	ldr	r2, [r3, #12]
 80092c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092cc:	60da      	str	r2, [r3, #12]
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80092d0:	3201      	adds	r2, #1
 80092d2:	e7ee      	b.n	80092b2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092d4:	1c51      	adds	r1, r2, #1
 80092d6:	6221      	str	r1, [r4, #32]
 80092d8:	7812      	ldrb	r2, [r2, #0]
 80092da:	605a      	str	r2, [r3, #4]
 80092dc:	e7ea      	b.n	80092b4 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092de:	0650      	lsls	r0, r2, #25
 80092e0:	d50b      	bpl.n	80092fa <HAL_UART_IRQHandler+0x13a>
 80092e2:	064a      	lsls	r2, r1, #25
 80092e4:	d509      	bpl.n	80092fa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092e6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80092e8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092ee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80092f0:	2320      	movs	r3, #32
 80092f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80092f6:	f7ff ff22 	bl	800913e <HAL_UART_TxCpltCallback>
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
 80092fc:	08009301 	.word	0x08009301

08009300 <UART_DMAAbortOnError>:
{
 8009300:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8009302:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009304:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8009306:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009308:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800930a:	f7ff ff57 	bl	80091bc <HAL_UART_ErrorCallback>
 800930e:	bd08      	pop	{r3, pc}

08009310 <BOOT_erase>:

uint8_t BOOT_erase(uint32_t add, uint16_t flash_app_len)
{
	uint8_t ret_val;

	ret_val = FLASH_erase_page(add, flash_app_len);
 8009310:	f000 b824 	b.w	800935c <FLASH_erase_page>

08009314 <BOOT_handle_data>:

	return ret_val;
}

uint8_t BOOT_handle_data(uint8_t *raw_data, DATA_FILE *data_prog)
{
 8009314:	b530      	push	{r4, r5, lr}
	uint8_t idx;

	data_prog->add_flash = (((uint32_t)raw_data[DATA_FILE_ADD_POS] << 24) & 0xFF000000) | (((uint32_t)raw_data[DATA_FILE_ADD_POS + 1] << 16) & 0x00FF0000) |\
			 (((uint32_t)raw_data[DATA_FILE_ADD_POS + 2] << 8) & 0x0000FF00) | ((uint32_t)raw_data[DATA_FILE_ADD_POS + 3] & 0x000000FF);
 8009316:	7882      	ldrb	r2, [r0, #2]
 8009318:	78c3      	ldrb	r3, [r0, #3]
 800931a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data_prog->add_flash = (((uint32_t)raw_data[DATA_FILE_ADD_POS] << 24) & 0xFF000000) | (((uint32_t)raw_data[DATA_FILE_ADD_POS + 1] << 16) & 0x00FF0000) |\
 800931e:	800b      	strh	r3, [r1, #0]

	data_prog->data_len = raw_data[DATA_FILE_LEN_POS];
 8009320:	7903      	ldrb	r3, [r0, #4]
 8009322:	708b      	strb	r3, [r1, #2]

	for(idx = 0; idx < data_prog->data_len; idx++)
 8009324:	2300      	movs	r3, #0
 8009326:	788a      	ldrb	r2, [r1, #2]
 8009328:	1c5c      	adds	r4, r3, #1
 800932a:	b2db      	uxtb	r3, r3
 800932c:	429a      	cmp	r2, r3
 800932e:	d801      	bhi.n	8009334 <BOOT_handle_data+0x20>
	{
		data_prog->data[idx] = raw_data[DATA_FILE_DATA_POS + idx];
	}

	return BOOT_PROCESS_SUCCESS;
}
 8009330:	2000      	movs	r0, #0
 8009332:	bd30      	pop	{r4, r5, pc}
		data_prog->data[idx] = raw_data[DATA_FILE_DATA_POS + idx];
 8009334:	18c2      	adds	r2, r0, r3
 8009336:	7955      	ldrb	r5, [r2, #5]
 8009338:	684a      	ldr	r2, [r1, #4]
 800933a:	54d5      	strb	r5, [r2, r3]
 800933c:	4623      	mov	r3, r4
 800933e:	e7f2      	b.n	8009326 <BOOT_handle_data+0x12>

08009340 <BOOT_flash_prog>:

uint8_t BOOT_flash_prog(DATA_FILE data)
{
 8009340:	b082      	sub	sp, #8
 8009342:	ab02      	add	r3, sp, #8
 8009344:	e903 0003 	stmdb	r3, {r0, r1}
	uint8_t ret_val;

	ret_val = FLASH_saving_1byte_data(APPLICATION_ADDRESS_PRO + (uint32_t)data.add_flash, \
 8009348:	f8bd 0000 	ldrh.w	r0, [sp]
 800934c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8009350:	9901      	ldr	r1, [sp, #4]
 8009352:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
			data.data, data.data_len);

	return ret_val;
}
 8009356:	b002      	add	sp, #8
	ret_val = FLASH_saving_1byte_data(APPLICATION_ADDRESS_PRO + (uint32_t)data.add_flash, \
 8009358:	f000 b828 	b.w	80093ac <FLASH_saving_1byte_data>

0800935c <FLASH_erase_page>:
 */

#include "flash_handle.h"

uint8_t FLASH_erase_page(uint32_t add, uint16_t n_page)
{
 800935c:	b530      	push	{r4, r5, lr}
 800935e:	4605      	mov	r5, r0
 8009360:	460c      	mov	r4, r1
 8009362:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef FErase;
	uint32_t pageError;

	while(HAL_OK != HAL_FLASH_Unlock());
 8009364:	f7ff f9b4 	bl	80086d0 <HAL_FLASH_Unlock>
 8009368:	2800      	cmp	r0, #0
 800936a:	d1fb      	bne.n	8009364 <FLASH_erase_page+0x8>

	while(HAL_OK != HAL_FLASH_OB_Unlock());
 800936c:	f7ff f9cc 	bl	8008708 <HAL_FLASH_OB_Unlock>
 8009370:	2800      	cmp	r0, #0
 8009372:	d1fb      	bne.n	800936c <FLASH_erase_page+0x10>

	FErase.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8009374:	9002      	str	r0, [sp, #8]
	FErase.PageAddress 	= add;
	FErase.NbPages		= n_page;

	if(HAL_OK != HAL_FLASHEx_Erase(&FErase, &pageError))
 8009376:	a901      	add	r1, sp, #4
 8009378:	a802      	add	r0, sp, #8
	FErase.PageAddress 	= add;
 800937a:	9504      	str	r5, [sp, #16]
	FErase.NbPages		= n_page;
 800937c:	9405      	str	r4, [sp, #20]
	if(HAL_OK != HAL_FLASHEx_Erase(&FErase, &pageError))
 800937e:	f7ff fa73 	bl	8008868 <HAL_FLASHEx_Erase>
 8009382:	b150      	cbz	r0, 800939a <FLASH_erase_page+0x3e>
	{
		while(HAL_OK != HAL_FLASH_OB_Lock());
 8009384:	f7ff f9d2 	bl	800872c <HAL_FLASH_OB_Lock>
 8009388:	2800      	cmp	r0, #0
 800938a:	d1fb      	bne.n	8009384 <FLASH_erase_page+0x28>

		while(HAL_OK != HAL_FLASH_Lock());
 800938c:	f7ff f9b2 	bl	80086f4 <HAL_FLASH_Lock>
 8009390:	2800      	cmp	r0, #0
 8009392:	d1fb      	bne.n	800938c <FLASH_erase_page+0x30>

		return FLASH_ERASE_FAIL;
 8009394:	2001      	movs	r0, #1
	while(HAL_OK != HAL_FLASH_OB_Lock());

	while(HAL_OK != HAL_FLASH_Lock());

	return FLASH_WRITE_SUCCESS;
}
 8009396:	b007      	add	sp, #28
 8009398:	bd30      	pop	{r4, r5, pc}
	while(HAL_OK != HAL_FLASH_OB_Lock());
 800939a:	f7ff f9c7 	bl	800872c <HAL_FLASH_OB_Lock>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d1fb      	bne.n	800939a <FLASH_erase_page+0x3e>
	while(HAL_OK != HAL_FLASH_Lock());
 80093a2:	f7ff f9a7 	bl	80086f4 <HAL_FLASH_Lock>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d1fb      	bne.n	80093a2 <FLASH_erase_page+0x46>
 80093aa:	e7f4      	b.n	8009396 <FLASH_erase_page+0x3a>

080093ac <FLASH_saving_1byte_data>:

uint8_t FLASH_saving_1byte_data(uint32_t add, uint8_t *data, uint16_t data_len)
{
 80093ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t status_prog;
	uint8_t error_prog;


	data_prog_len = data_len/4;
	if((data_len%4) != 0)
 80093b0:	0793      	lsls	r3, r2, #30
	data_prog_len = data_len/4;
 80093b2:	ea4f 0692 	mov.w	r6, r2, lsr #2
	{
		data_prog_len = data_prog_len + 1;
 80093b6:	bf18      	it	ne
 80093b8:	3601      	addne	r6, #1
{
 80093ba:	4680      	mov	r8, r0
	}

	data_prog = (uint32_t *)malloc(data_prog_len * 4);
 80093bc:	00b0      	lsls	r0, r6, #2
{
 80093be:	460c      	mov	r4, r1
	data_prog = (uint32_t *)malloc(data_prog_len * 4);
 80093c0:	f000 f86c 	bl	800949c <malloc>
 80093c4:	4607      	mov	r7, r0

	memset(data_prog, 0xFFFFFFFF, data_prog_len);
 80093c6:	f04f 31ff 	mov.w	r1, #4294967295
 80093ca:	4632      	mov	r2, r6
 80093cc:	f000 f876 	bl	80094bc <memset>
	strcpy((char *)data_prog, (char *)data);
 80093d0:	4621      	mov	r1, r4
 80093d2:	4638      	mov	r0, r7
 80093d4:	f000 f934 	bl	8009640 <strcpy>

	while(HAL_OK != HAL_FLASH_Unlock());
 80093d8:	f7ff f97a 	bl	80086d0 <HAL_FLASH_Unlock>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d1fb      	bne.n	80093d8 <FLASH_saving_1byte_data+0x2c>

	while(HAL_OK != HAL_FLASH_OB_Unlock());
 80093e0:	f7ff f992 	bl	8008708 <HAL_FLASH_OB_Unlock>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d1fb      	bne.n	80093e0 <FLASH_saving_1byte_data+0x34>
 80093e8:	4604      	mov	r4, r0
 80093ea:	4605      	mov	r5, r0

	error_prog = 0;
	idx = 0;
	while(idx < data_prog_len)
 80093ec:	42ae      	cmp	r6, r5
 80093ee:	d80e      	bhi.n	800940e <FLASH_saving_1byte_data+0x62>
				return FLASH_WRITE_FAIL;
			}
		}
	}

	while(HAL_OK != HAL_FLASH_OB_Lock());
 80093f0:	f7ff f99c 	bl	800872c <HAL_FLASH_OB_Lock>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d1fb      	bne.n	80093f0 <FLASH_saving_1byte_data+0x44>

	while(HAL_OK != HAL_FLASH_Lock());
 80093f8:	f7ff f97c 	bl	80086f4 <HAL_FLASH_Lock>
 80093fc:	4604      	mov	r4, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	d1fa      	bne.n	80093f8 <FLASH_saving_1byte_data+0x4c>

	free(data_prog);
 8009402:	4638      	mov	r0, r7
 8009404:	f000 f852 	bl	80094ac <free>
	return FLASH_WRITE_SUCCESS;
 8009408:	4620      	mov	r0, r4
}
 800940a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		status_prog = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, add + (FLASH_OFFSET_ADD_DATA * idx), data_prog[idx]);
 800940e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8009412:	2300      	movs	r3, #0
 8009414:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 8009418:	2002      	movs	r0, #2
 800941a:	f7ff f9bb 	bl	8008794 <HAL_FLASH_Program>
		if(status_prog == HAL_OK)
 800941e:	b918      	cbnz	r0, 8009428 <FLASH_saving_1byte_data+0x7c>
			idx++;
 8009420:	3501      	adds	r5, #1
 8009422:	b2ad      	uxth	r5, r5
 8009424:	4604      	mov	r4, r0
 8009426:	e7e1      	b.n	80093ec <FLASH_saving_1byte_data+0x40>
			error_prog++;
 8009428:	3401      	adds	r4, #1
 800942a:	b2e0      	uxtb	r0, r4
			if(error_prog == 5)
 800942c:	2805      	cmp	r0, #5
 800942e:	d1f9      	bne.n	8009424 <FLASH_saving_1byte_data+0x78>
				while(HAL_OK != HAL_FLASH_OB_Lock());
 8009430:	f7ff f97c 	bl	800872c <HAL_FLASH_OB_Lock>
 8009434:	2800      	cmp	r0, #0
 8009436:	d1fb      	bne.n	8009430 <FLASH_saving_1byte_data+0x84>
				while(HAL_OK != HAL_FLASH_Lock());
 8009438:	f7ff f95c 	bl	80086f4 <HAL_FLASH_Lock>
 800943c:	2800      	cmp	r0, #0
 800943e:	d1fb      	bne.n	8009438 <FLASH_saving_1byte_data+0x8c>
				return FLASH_WRITE_FAIL;
 8009440:	2001      	movs	r0, #1
 8009442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009448 <__errno>:
 8009448:	4b01      	ldr	r3, [pc, #4]	; (8009450 <__errno+0x8>)
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	2000000c 	.word	0x2000000c

08009454 <__libc_init_array>:
 8009454:	b570      	push	{r4, r5, r6, lr}
 8009456:	2500      	movs	r5, #0
 8009458:	4e0c      	ldr	r6, [pc, #48]	; (800948c <__libc_init_array+0x38>)
 800945a:	4c0d      	ldr	r4, [pc, #52]	; (8009490 <__libc_init_array+0x3c>)
 800945c:	1ba4      	subs	r4, r4, r6
 800945e:	10a4      	asrs	r4, r4, #2
 8009460:	42a5      	cmp	r5, r4
 8009462:	d109      	bne.n	8009478 <__libc_init_array+0x24>
 8009464:	f000 f8f6 	bl	8009654 <_init>
 8009468:	2500      	movs	r5, #0
 800946a:	4e0a      	ldr	r6, [pc, #40]	; (8009494 <__libc_init_array+0x40>)
 800946c:	4c0a      	ldr	r4, [pc, #40]	; (8009498 <__libc_init_array+0x44>)
 800946e:	1ba4      	subs	r4, r4, r6
 8009470:	10a4      	asrs	r4, r4, #2
 8009472:	42a5      	cmp	r5, r4
 8009474:	d105      	bne.n	8009482 <__libc_init_array+0x2e>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800947c:	4798      	blx	r3
 800947e:	3501      	adds	r5, #1
 8009480:	e7ee      	b.n	8009460 <__libc_init_array+0xc>
 8009482:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009486:	4798      	blx	r3
 8009488:	3501      	adds	r5, #1
 800948a:	e7f2      	b.n	8009472 <__libc_init_array+0x1e>
 800948c:	08009694 	.word	0x08009694
 8009490:	08009694 	.word	0x08009694
 8009494:	08009694 	.word	0x08009694
 8009498:	08009698 	.word	0x08009698

0800949c <malloc>:
 800949c:	4b02      	ldr	r3, [pc, #8]	; (80094a8 <malloc+0xc>)
 800949e:	4601      	mov	r1, r0
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f000 b85f 	b.w	8009564 <_malloc_r>
 80094a6:	bf00      	nop
 80094a8:	2000000c 	.word	0x2000000c

080094ac <free>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <free+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f000 b80b 	b.w	80094cc <_free_r>
 80094b6:	bf00      	nop
 80094b8:	2000000c 	.word	0x2000000c

080094bc <memset>:
 80094bc:	4603      	mov	r3, r0
 80094be:	4402      	add	r2, r0
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d100      	bne.n	80094c6 <memset+0xa>
 80094c4:	4770      	bx	lr
 80094c6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ca:	e7f9      	b.n	80094c0 <memset+0x4>

080094cc <_free_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4605      	mov	r5, r0
 80094d0:	2900      	cmp	r1, #0
 80094d2:	d043      	beq.n	800955c <_free_r+0x90>
 80094d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d8:	1f0c      	subs	r4, r1, #4
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bfb8      	it	lt
 80094de:	18e4      	addlt	r4, r4, r3
 80094e0:	f000 f8b6 	bl	8009650 <__malloc_lock>
 80094e4:	4a1e      	ldr	r2, [pc, #120]	; (8009560 <_free_r+0x94>)
 80094e6:	6813      	ldr	r3, [r2, #0]
 80094e8:	4610      	mov	r0, r2
 80094ea:	b933      	cbnz	r3, 80094fa <_free_r+0x2e>
 80094ec:	6063      	str	r3, [r4, #4]
 80094ee:	6014      	str	r4, [r2, #0]
 80094f0:	4628      	mov	r0, r5
 80094f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094f6:	f000 b8ac 	b.w	8009652 <__malloc_unlock>
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	d90b      	bls.n	8009516 <_free_r+0x4a>
 80094fe:	6821      	ldr	r1, [r4, #0]
 8009500:	1862      	adds	r2, r4, r1
 8009502:	4293      	cmp	r3, r2
 8009504:	bf01      	itttt	eq
 8009506:	681a      	ldreq	r2, [r3, #0]
 8009508:	685b      	ldreq	r3, [r3, #4]
 800950a:	1852      	addeq	r2, r2, r1
 800950c:	6022      	streq	r2, [r4, #0]
 800950e:	6063      	str	r3, [r4, #4]
 8009510:	6004      	str	r4, [r0, #0]
 8009512:	e7ed      	b.n	80094f0 <_free_r+0x24>
 8009514:	4613      	mov	r3, r2
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	b10a      	cbz	r2, 800951e <_free_r+0x52>
 800951a:	42a2      	cmp	r2, r4
 800951c:	d9fa      	bls.n	8009514 <_free_r+0x48>
 800951e:	6819      	ldr	r1, [r3, #0]
 8009520:	1858      	adds	r0, r3, r1
 8009522:	42a0      	cmp	r0, r4
 8009524:	d10b      	bne.n	800953e <_free_r+0x72>
 8009526:	6820      	ldr	r0, [r4, #0]
 8009528:	4401      	add	r1, r0
 800952a:	1858      	adds	r0, r3, r1
 800952c:	4282      	cmp	r2, r0
 800952e:	6019      	str	r1, [r3, #0]
 8009530:	d1de      	bne.n	80094f0 <_free_r+0x24>
 8009532:	6810      	ldr	r0, [r2, #0]
 8009534:	6852      	ldr	r2, [r2, #4]
 8009536:	4401      	add	r1, r0
 8009538:	6019      	str	r1, [r3, #0]
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	e7d8      	b.n	80094f0 <_free_r+0x24>
 800953e:	d902      	bls.n	8009546 <_free_r+0x7a>
 8009540:	230c      	movs	r3, #12
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	e7d4      	b.n	80094f0 <_free_r+0x24>
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	1821      	adds	r1, r4, r0
 800954a:	428a      	cmp	r2, r1
 800954c:	bf01      	itttt	eq
 800954e:	6811      	ldreq	r1, [r2, #0]
 8009550:	6852      	ldreq	r2, [r2, #4]
 8009552:	1809      	addeq	r1, r1, r0
 8009554:	6021      	streq	r1, [r4, #0]
 8009556:	6062      	str	r2, [r4, #4]
 8009558:	605c      	str	r4, [r3, #4]
 800955a:	e7c9      	b.n	80094f0 <_free_r+0x24>
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	20000090 	.word	0x20000090

08009564 <_malloc_r>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	1ccd      	adds	r5, r1, #3
 8009568:	f025 0503 	bic.w	r5, r5, #3
 800956c:	3508      	adds	r5, #8
 800956e:	2d0c      	cmp	r5, #12
 8009570:	bf38      	it	cc
 8009572:	250c      	movcc	r5, #12
 8009574:	2d00      	cmp	r5, #0
 8009576:	4606      	mov	r6, r0
 8009578:	db01      	blt.n	800957e <_malloc_r+0x1a>
 800957a:	42a9      	cmp	r1, r5
 800957c:	d903      	bls.n	8009586 <_malloc_r+0x22>
 800957e:	230c      	movs	r3, #12
 8009580:	6033      	str	r3, [r6, #0]
 8009582:	2000      	movs	r0, #0
 8009584:	bd70      	pop	{r4, r5, r6, pc}
 8009586:	f000 f863 	bl	8009650 <__malloc_lock>
 800958a:	4a23      	ldr	r2, [pc, #140]	; (8009618 <_malloc_r+0xb4>)
 800958c:	6814      	ldr	r4, [r2, #0]
 800958e:	4621      	mov	r1, r4
 8009590:	b991      	cbnz	r1, 80095b8 <_malloc_r+0x54>
 8009592:	4c22      	ldr	r4, [pc, #136]	; (800961c <_malloc_r+0xb8>)
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	b91b      	cbnz	r3, 80095a0 <_malloc_r+0x3c>
 8009598:	4630      	mov	r0, r6
 800959a:	f000 f841 	bl	8009620 <_sbrk_r>
 800959e:	6020      	str	r0, [r4, #0]
 80095a0:	4629      	mov	r1, r5
 80095a2:	4630      	mov	r0, r6
 80095a4:	f000 f83c 	bl	8009620 <_sbrk_r>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d126      	bne.n	80095fa <_malloc_r+0x96>
 80095ac:	230c      	movs	r3, #12
 80095ae:	4630      	mov	r0, r6
 80095b0:	6033      	str	r3, [r6, #0]
 80095b2:	f000 f84e 	bl	8009652 <__malloc_unlock>
 80095b6:	e7e4      	b.n	8009582 <_malloc_r+0x1e>
 80095b8:	680b      	ldr	r3, [r1, #0]
 80095ba:	1b5b      	subs	r3, r3, r5
 80095bc:	d41a      	bmi.n	80095f4 <_malloc_r+0x90>
 80095be:	2b0b      	cmp	r3, #11
 80095c0:	d90f      	bls.n	80095e2 <_malloc_r+0x7e>
 80095c2:	600b      	str	r3, [r1, #0]
 80095c4:	18cc      	adds	r4, r1, r3
 80095c6:	50cd      	str	r5, [r1, r3]
 80095c8:	4630      	mov	r0, r6
 80095ca:	f000 f842 	bl	8009652 <__malloc_unlock>
 80095ce:	f104 000b 	add.w	r0, r4, #11
 80095d2:	1d23      	adds	r3, r4, #4
 80095d4:	f020 0007 	bic.w	r0, r0, #7
 80095d8:	1ac3      	subs	r3, r0, r3
 80095da:	d01b      	beq.n	8009614 <_malloc_r+0xb0>
 80095dc:	425a      	negs	r2, r3
 80095de:	50e2      	str	r2, [r4, r3]
 80095e0:	bd70      	pop	{r4, r5, r6, pc}
 80095e2:	428c      	cmp	r4, r1
 80095e4:	bf0b      	itete	eq
 80095e6:	6863      	ldreq	r3, [r4, #4]
 80095e8:	684b      	ldrne	r3, [r1, #4]
 80095ea:	6013      	streq	r3, [r2, #0]
 80095ec:	6063      	strne	r3, [r4, #4]
 80095ee:	bf18      	it	ne
 80095f0:	460c      	movne	r4, r1
 80095f2:	e7e9      	b.n	80095c8 <_malloc_r+0x64>
 80095f4:	460c      	mov	r4, r1
 80095f6:	6849      	ldr	r1, [r1, #4]
 80095f8:	e7ca      	b.n	8009590 <_malloc_r+0x2c>
 80095fa:	1cc4      	adds	r4, r0, #3
 80095fc:	f024 0403 	bic.w	r4, r4, #3
 8009600:	42a0      	cmp	r0, r4
 8009602:	d005      	beq.n	8009610 <_malloc_r+0xac>
 8009604:	1a21      	subs	r1, r4, r0
 8009606:	4630      	mov	r0, r6
 8009608:	f000 f80a 	bl	8009620 <_sbrk_r>
 800960c:	3001      	adds	r0, #1
 800960e:	d0cd      	beq.n	80095ac <_malloc_r+0x48>
 8009610:	6025      	str	r5, [r4, #0]
 8009612:	e7d9      	b.n	80095c8 <_malloc_r+0x64>
 8009614:	bd70      	pop	{r4, r5, r6, pc}
 8009616:	bf00      	nop
 8009618:	20000090 	.word	0x20000090
 800961c:	20000094 	.word	0x20000094

08009620 <_sbrk_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	2300      	movs	r3, #0
 8009624:	4c05      	ldr	r4, [pc, #20]	; (800963c <_sbrk_r+0x1c>)
 8009626:	4605      	mov	r5, r0
 8009628:	4608      	mov	r0, r1
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	f7fe fdc0 	bl	80081b0 <_sbrk>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_sbrk_r+0x1a>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	b103      	cbz	r3, 800963a <_sbrk_r+0x1a>
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	20000210 	.word	0x20000210

08009640 <strcpy>:
 8009640:	4603      	mov	r3, r0
 8009642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009646:	f803 2b01 	strb.w	r2, [r3], #1
 800964a:	2a00      	cmp	r2, #0
 800964c:	d1f9      	bne.n	8009642 <strcpy+0x2>
 800964e:	4770      	bx	lr

08009650 <__malloc_lock>:
 8009650:	4770      	bx	lr

08009652 <__malloc_unlock>:
 8009652:	4770      	bx	lr

08009654 <_init>:
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	bf00      	nop
 8009658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965a:	bc08      	pop	{r3}
 800965c:	469e      	mov	lr, r3
 800965e:	4770      	bx	lr

08009660 <_fini>:
 8009660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009662:	bf00      	nop
 8009664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009666:	bc08      	pop	{r3}
 8009668:	469e      	mov	lr, r3
 800966a:	4770      	bx	lr
