
AUTO_PARKING_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002040  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800214c  0800214c  0001214c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800217c  0800217c  0001217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002180  08002180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000fc  20000070  080021f4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000016c  080021f4  0002016c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_line   00007f95  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000186b5  00000000  00000000  0002802e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000035a8  00000000  00000000  000406e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009a8  00000000  00000000  00043c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dd8  00000000  00000000  00044638  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000072d9  00000000  00000000  00045410  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000034e5  00000000  00000000  0004c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004fbce  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d04  00000000  00000000  0004fc4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002134 	.word	0x08002134

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002134 	.word	0x08002134

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f000 f9a3 	bl	80004bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 fed5 	bl	8001f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 f8ef 	bl	800035c <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r3, =_sidata
 8000180:	08002184 	.word	0x08002184
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800018c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000190:	2000016c 	.word	0x2000016c

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000198:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800019a:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <_sbrk+0x2c>)
{
 800019c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800019e:	6819      	ldr	r1, [r3, #0]
 80001a0:	b909      	cbnz	r1, 80001a6 <_sbrk+0xe>
		heap_end = &end;
 80001a2:	4909      	ldr	r1, [pc, #36]	; (80001c8 <_sbrk+0x30>)
 80001a4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80001a6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80001a8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80001aa:	4402      	add	r2, r0
 80001ac:	428a      	cmp	r2, r1
 80001ae:	d906      	bls.n	80001be <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80001b0:	f001 feb2 	bl	8001f18 <__errno>
 80001b4:	230c      	movs	r3, #12
 80001b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80001b8:	f04f 30ff 	mov.w	r0, #4294967295
 80001bc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80001be:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80001c0:	bd08      	pop	{r3, pc}
 80001c2:	bf00      	nop
 80001c4:	2000008c 	.word	0x2000008c
 80001c8:	2000016c 	.word	0x2000016c

080001cc <CHECK_CARD_ID>:
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

void CHECK_CARD_ID(void)
{
 80001cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx;
	uint8_t mode_sel;
	NODE_PARKING *tmp_node;

	memset(card_id, 0, CARD_ID_DATA_LEN);
 80001ce:	4c44      	ldr	r4, [pc, #272]	; (80002e0 <CHECK_CARD_ID+0x114>)
 80001d0:	2200      	movs	r2, #0
	while(MI_OK != MFRC522_Check(card_id));
 80001d2:	4625      	mov	r5, r4
	memset(card_id, 0, CARD_ID_DATA_LEN);
 80001d4:	6022      	str	r2, [r4, #0]
 80001d6:	7122      	strb	r2, [r4, #4]
	while(MI_OK != MFRC522_Check(card_id));
 80001d8:	4628      	mov	r0, r5
 80001da:	f001 fe05 	bl	8001de8 <MFRC522_Check>
 80001de:	2800      	cmp	r0, #0
 80001e0:	d1fa      	bne.n	80001d8 <CHECK_CARD_ID+0xc>
	if(card_id[0] != 0)
 80001e2:	7823      	ldrb	r3, [r4, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d139      	bne.n	800025c <CHECK_CARD_ID+0x90>
			HAL_Delay(100);
		}
	}

	mode_sel = MODE_PARKING_AUTO;
	tmp_node = node_base;
 80001e8:	2405      	movs	r4, #5
 80001ea:	4b3e      	ldr	r3, [pc, #248]	; (80002e4 <CHECK_CARD_ID+0x118>)
	for(idx = 0; idx < 5; idx++)
	{
		if(tmp_node->has_car == true)
		{
			if(memcmp(tmp_node->card_id, card_id, CARD_ID_DATA_LEN) == 0)
 80001ec:	4e3c      	ldr	r6, [pc, #240]	; (80002e0 <CHECK_CARD_ID+0x114>)
	tmp_node = node_base;
 80001ee:	681d      	ldr	r5, [r3, #0]
		if(tmp_node->has_car == true)
 80001f0:	792b      	ldrb	r3, [r5, #4]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d04b      	beq.n	800028e <CHECK_CARD_ID+0xc2>
			if(memcmp(tmp_node->card_id, card_id, CARD_ID_DATA_LEN) == 0)
 80001f6:	2205      	movs	r2, #5
 80001f8:	4631      	mov	r1, r6
 80001fa:	6828      	ldr	r0, [r5, #0]
 80001fc:	f001 fec6 	bl	8001f8c <memcmp>
 8000200:	2800      	cmp	r0, #0
 8000202:	d144      	bne.n	800028e <CHECK_CARD_ID+0xc2>
			{
				mode_sel = MODE_TAKING_AUTO;
				HAL_Delay(100);
 8000204:	2064      	movs	r0, #100	; 0x64
 8000206:	f000 f9b5 	bl	8000574 <HAL_Delay>
				mode_sel = MODE_TAKING_AUTO;
 800020a:	2402      	movs	r4, #2
			}
		}
		tmp_node = tmp_node->next;
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	4835      	ldr	r0, [pc, #212]	; (80002e8 <CHECK_CARD_ID+0x11c>)
 8000214:	f000 faec 	bl	80007f0 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000218:	2032      	movs	r0, #50	; 0x32
 800021a:	f000 f9ab 	bl	8000574 <HAL_Delay>

	switch(mode_sel)
 800021e:	2c02      	cmp	r4, #2
 8000220:	d03c      	beq.n	800029c <CHECK_CARD_ID+0xd0>
 8000222:	2409      	movs	r4, #9
	{
		case MODE_PARKING_AUTO:
			for(idx = 0; idx < 9; idx++)
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000224:	4d30      	ldr	r5, [pc, #192]	; (80002e8 <CHECK_CARD_ID+0x11c>)
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022c:	4628      	mov	r0, r5
 800022e:	f000 fadf 	bl	80007f0 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8000232:	20c8      	movs	r0, #200	; 0xc8
 8000234:	f000 f99e 	bl	8000574 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	4628      	mov	r0, r5
 8000240:	f000 fad6 	bl	80007f0 <HAL_GPIO_WritePin>
 8000244:	3c01      	subs	r4, #1
				HAL_Delay(200);
 8000246:	20c8      	movs	r0, #200	; 0xc8
 8000248:	f000 f994 	bl	8000574 <HAL_Delay>
			for(idx = 0; idx < 9; idx++)
 800024c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8000250:	d1e9      	bne.n	8000226 <CHECK_CARD_ID+0x5a>
			break;

		default:
			break;
	}
}
 8000252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			NODE_parking_car_proc(card_id);
 8000256:	4822      	ldr	r0, [pc, #136]	; (80002e0 <CHECK_CARD_ID+0x114>)
 8000258:	f001 ba98 	b.w	800178c <NODE_parking_car_proc>
 800025c:	2405      	movs	r4, #5
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800025e:	4d22      	ldr	r5, [pc, #136]	; (80002e8 <CHECK_CARD_ID+0x11c>)
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	4628      	mov	r0, r5
 8000268:	f000 fac2 	bl	80007f0 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 800026c:	2064      	movs	r0, #100	; 0x64
 800026e:	f000 f981 	bl	8000574 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000278:	4628      	mov	r0, r5
 800027a:	f000 fab9 	bl	80007f0 <HAL_GPIO_WritePin>
 800027e:	3c01      	subs	r4, #1
			HAL_Delay(100);
 8000280:	2064      	movs	r0, #100	; 0x64
 8000282:	f000 f977 	bl	8000574 <HAL_Delay>
		for(idx = 0; idx < 5; idx++)
 8000286:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800028a:	d1e9      	bne.n	8000260 <CHECK_CARD_ID+0x94>
 800028c:	e7ac      	b.n	80001e8 <CHECK_CARD_ID+0x1c>
 800028e:	3c01      	subs	r4, #1
	for(idx = 0; idx < 5; idx++)
 8000290:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		tmp_node = tmp_node->next;
 8000294:	69ad      	ldr	r5, [r5, #24]
	for(idx = 0; idx < 5; idx++)
 8000296:	d1ab      	bne.n	80001f0 <CHECK_CARD_ID+0x24>
	mode_sel = MODE_PARKING_AUTO;
 8000298:	2401      	movs	r4, #1
 800029a:	e7b7      	b.n	800020c <CHECK_CARD_ID+0x40>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800029c:	4d12      	ldr	r5, [pc, #72]	; (80002e8 <CHECK_CARD_ID+0x11c>)
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a4:	4628      	mov	r0, r5
 80002a6:	f000 faa3 	bl	80007f0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 80002aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ae:	f000 f961 	bl	8000574 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002b2:	2201      	movs	r2, #1
 80002b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b8:	4628      	mov	r0, r5
 80002ba:	f000 fa99 	bl	80007f0 <HAL_GPIO_WritePin>
 80002be:	3c01      	subs	r4, #1
				HAL_Delay(500);
 80002c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c4:	f000 f956 	bl	8000574 <HAL_Delay>
			for(idx = 0; idx < 2; idx++)
 80002c8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80002cc:	d1e7      	bne.n	800029e <CHECK_CARD_ID+0xd2>
			HAL_Delay(500);
 80002ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d2:	f000 f94f 	bl	8000574 <HAL_Delay>
}
 80002d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			NODE_taking_car_proc(card_id);
 80002da:	4801      	ldr	r0, [pc, #4]	; (80002e0 <CHECK_CARD_ID+0x114>)
 80002dc:	f001 ba76 	b.w	80017cc <NODE_taking_car_proc>
 80002e0:	20000148 	.word	0x20000148
 80002e4:	20000144 	.word	0x20000144
 80002e8:	40011000 	.word	0x40011000

080002ec <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ec:	2228      	movs	r2, #40	; 0x28
{
 80002ee:	b510      	push	{r4, lr}
 80002f0:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	eb0d 0002 	add.w	r0, sp, r2
 80002f6:	2100      	movs	r1, #0
 80002f8:	f001 fe57 	bl	8001faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	2214      	movs	r2, #20
 80002fe:	2100      	movs	r1, #0
 8000300:	eb0d 0002 	add.w	r0, sp, r2
 8000304:	f001 fe51 	bl	8001faa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000308:	2100      	movs	r1, #0
 800030a:	2210      	movs	r2, #16
 800030c:	a801      	add	r0, sp, #4
 800030e:	f001 fe4c 	bl	8001faa <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000316:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000318:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800031c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000324:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000326:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000328:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f000 fcb4 	bl	8000c98 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000330:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000338:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	4621      	mov	r1, r4
 800033c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000340:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000342:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000346:	f000 fe81 	bl	800104c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800034a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000350:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000352:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000354:	f000 ff28 	bl	80011a8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000358:	b014      	add	sp, #80	; 0x50
 800035a:	bd10      	pop	{r4, pc}

0800035c <main>:
{
 800035c:	b508      	push	{r3, lr}
  SystemClock_Config();
 800035e:	f7ff ffc5 	bl	80002ec <SystemClock_Config>
  GPIO_Init();
 8000362:	f001 fa87 	bl	8001874 <GPIO_Init>
  HAL_GPIO_WritePin(RELAY_ODOOR_GPIO_Port, RELAY_ODOOR_Pin, GPIO_PIN_RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800036c:	4815      	ldr	r0, [pc, #84]	; (80003c4 <main+0x68>)
 800036e:	f000 fa3f 	bl	80007f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_CDOOR_GPIO_Port, RELAY_CDOOR_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000378:	4812      	ldr	r0, [pc, #72]	; (80003c4 <main+0x68>)
 800037a:	f000 fa39 	bl	80007f0 <HAL_GPIO_WritePin>
  MFRC522_Init();
 800037e:	f001 fcf2 	bl	8001d66 <MFRC522_Init>
  lcd_init();
 8000382:	f001 fb7b 	bl	8001a7c <lcd_init>
  NODE_init();
 8000386:	f001 f90f 	bl	80015a8 <NODE_init>
  lcd_goto_XY(1,2);
 800038a:	2102      	movs	r1, #2
 800038c:	2001      	movs	r0, #1
 800038e:	f001 fbb0 	bl	8001af2 <lcd_goto_XY>
  lcd_send_string("Start");
 8000392:	480d      	ldr	r0, [pc, #52]	; (80003c8 <main+0x6c>)
 8000394:	f001 fba4 	bl	8001ae0 <lcd_send_string>
  HAL_Delay(1000);
 8000398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800039c:	f000 f8ea 	bl	8000574 <HAL_Delay>
  HAL_Delay(500);
 80003a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a4:	f000 f8e6 	bl	8000574 <HAL_Delay>
	  CHECK_CARD_ID();
 80003a8:	f7ff ff10 	bl	80001cc <CHECK_CARD_ID>
	  HAL_Delay(2000);
 80003ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003b0:	f000 f8e0 	bl	8000574 <HAL_Delay>
	  action_motor(ACTION_OPEN_DOOR);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f001 fa29 	bl	800180c <action_motor>
	  action_motor(ACTION_CLOSE_DOOR);
 80003ba:	2001      	movs	r0, #1
 80003bc:	f001 fa26 	bl	800180c <action_motor>
 80003c0:	e7f2      	b.n	80003a8 <main+0x4c>
 80003c2:	bf00      	nop
 80003c4:	40010c00 	.word	0x40010c00
 80003c8:	0800215c 	.word	0x0800215c

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	4770      	bx	lr
	...

080003d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003d0:	b510      	push	{r4, lr}
 80003d2:	4604      	mov	r4, r0
 80003d4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	2210      	movs	r2, #16
 80003d8:	2100      	movs	r1, #0
 80003da:	a802      	add	r0, sp, #8
 80003dc:	f001 fde5 	bl	8001faa <memset>
  if(hi2c->Instance==I2C1)
 80003e0:	6822      	ldr	r2, [r4, #0]
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <HAL_I2C_MspInit+0x58>)
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d11c      	bne.n	8000422 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e8:	4c10      	ldr	r4, [pc, #64]	; (800042c <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ea:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ee:	4810      	ldr	r0, [pc, #64]	; (8000430 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	f043 0308 	orr.w	r3, r3, #8
 80003f4:	61a3      	str	r3, [r4, #24]
 80003f6:	69a3      	ldr	r3, [r4, #24]
 80003f8:	f003 0308 	and.w	r3, r3, #8
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000400:	23c0      	movs	r3, #192	; 0xc0
 8000402:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000404:	2312      	movs	r3, #18
 8000406:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040c:	f000 f90e 	bl	800062c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000410:	69e3      	ldr	r3, [r4, #28]
 8000412:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000416:	61e3      	str	r3, [r4, #28]
 8000418:	69e3      	ldr	r3, [r4, #28]
 800041a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000422:	b006      	add	sp, #24
 8000424:	bd10      	pop	{r4, pc}
 8000426:	bf00      	nop
 8000428:	40005400 	.word	0x40005400
 800042c:	40021000 	.word	0x40021000
 8000430:	40010c00 	.word	0x40010c00

08000434 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000434:	b510      	push	{r4, lr}
 8000436:	4604      	mov	r4, r0
 8000438:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	2210      	movs	r2, #16
 800043c:	2100      	movs	r1, #0
 800043e:	a802      	add	r0, sp, #8
 8000440:	f001 fdb3 	bl	8001faa <memset>
  if(hspi->Instance==SPI1)
 8000444:	6822      	ldr	r2, [r4, #0]
 8000446:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <HAL_SPI_MspInit+0x6c>)
 8000448:	429a      	cmp	r2, r3
 800044a:	d126      	bne.n	800049a <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800044c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000450:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045c:	4811      	ldr	r0, [pc, #68]	; (80004a4 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800045e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000462:	9200      	str	r2, [sp, #0]
 8000464:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	699a      	ldr	r2, [r3, #24]
 8000468:	f042 0204 	orr.w	r2, r2, #4
 800046c:	619a      	str	r2, [r3, #24]
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000478:	23a0      	movs	r3, #160	; 0xa0
 800047a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	2302      	movs	r3, #2
 800047e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f000 f8d2 	bl	800062c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800048c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	a902      	add	r1, sp, #8
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	f000 f8c9 	bl	800062c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800049a:	b006      	add	sp, #24
 800049c:	bd10      	pop	{r4, pc}
 800049e:	bf00      	nop
 80004a0:	40013000 	.word	0x40013000
 80004a4:	40010800 	.word	0x40010800

080004a8 <NMI_Handler>:
 80004a8:	4770      	bx	lr

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	e7fe      	b.n	80004aa <HardFault_Handler>

080004ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	e7fe      	b.n	80004b0 <UsageFault_Handler>

080004b2 <SVC_Handler>:
 80004b2:	4770      	bx	lr

080004b4 <DebugMon_Handler>:
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b8:	f000 b84a 	b.w	8000550 <HAL_IncTick>

080004bc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <SystemInit+0x40>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	f042 0201 	orr.w	r2, r2, #1
 80004c4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004c6:	6859      	ldr	r1, [r3, #4]
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <SystemInit+0x44>)
 80004ca:	400a      	ands	r2, r1
 80004cc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80004d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004d8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004e0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80004e8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004f4:	4b03      	ldr	r3, [pc, #12]	; (8000504 <SystemInit+0x48>)
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000
 8000500:	f8ff0000 	.word	0xf8ff0000
 8000504:	e000ed00 	.word	0xe000ed00

08000508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000508:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_InitTick+0x3c>)
{
 800050c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050e:	7818      	ldrb	r0, [r3, #0]
 8000510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000514:	fbb3 f3f0 	udiv	r3, r3, r0
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <HAL_InitTick+0x40>)
 800051a:	6810      	ldr	r0, [r2, #0]
 800051c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000520:	f000 f86e 	bl	8000600 <HAL_SYSTICK_Config>
 8000524:	4604      	mov	r4, r0
 8000526:	b958      	cbnz	r0, 8000540 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000528:	2d0f      	cmp	r5, #15
 800052a:	d809      	bhi.n	8000540 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800052c:	4602      	mov	r2, r0
 800052e:	4629      	mov	r1, r5
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f000 f830 	bl	8000598 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <HAL_InitTick+0x44>)
 800053a:	4620      	mov	r0, r4
 800053c:	601d      	str	r5, [r3, #0]
 800053e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000540:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000542:	bd38      	pop	{r3, r4, r5, pc}
 8000544:	20000004 	.word	0x20000004
 8000548:	20000000 	.word	0x20000000
 800054c:	20000008 	.word	0x20000008

08000550 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x10>)
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HAL_IncTick+0x14>)
 8000554:	6811      	ldr	r1, [r2, #0]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	440b      	add	r3, r1
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000164 	.word	0x20000164
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000568:	4b01      	ldr	r3, [pc, #4]	; (8000570 <HAL_GetTick+0x8>)
 800056a:	6818      	ldr	r0, [r3, #0]
}
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000164 	.word	0x20000164

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b538      	push	{r3, r4, r5, lr}
 8000576:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff6 	bl	8000568 <HAL_GetTick>
 800057c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000580:	bf1e      	ittt	ne
 8000582:	4b04      	ldrne	r3, [pc, #16]	; (8000594 <HAL_Delay+0x20>)
 8000584:	781b      	ldrbne	r3, [r3, #0]
 8000586:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000588:	f7ff ffee 	bl	8000568 <HAL_GetTick>
 800058c:	1b40      	subs	r0, r0, r5
 800058e:	4284      	cmp	r4, r0
 8000590:	d8fa      	bhi.n	8000588 <HAL_Delay+0x14>
  {
  }
}
 8000592:	bd38      	pop	{r3, r4, r5, pc}
 8000594:	20000004 	.word	0x20000004

08000598 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	68dc      	ldr	r4, [r3, #12]
 800059e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	bf28      	it	cs
 80005ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b4:	bf98      	it	ls
 80005b6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b8:	fa05 f303 	lsl.w	r3, r5, r3
 80005bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	bf88      	it	hi
 80005c2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c4:	4019      	ands	r1, r3
 80005c6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c8:	fa05 f404 	lsl.w	r4, r5, r4
 80005cc:	3c01      	subs	r4, #1
 80005ce:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005d0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d2:	ea42 0201 	orr.w	r2, r2, r1
 80005d6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	bfa9      	itett	ge
 80005dc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	4b06      	ldrlt	r3, [pc, #24]	; (80005fc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	b2d2      	uxtbge	r2, r2
 80005e4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	bfbb      	ittet	lt
 80005ea:	f000 000f 	andlt.w	r0, r0, #15
 80005ee:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	541a      	strblt	r2, [r3, r0]
 80005f6:	bd30      	pop	{r4, r5, pc}
 80005f8:	e000ed00 	.word	0xe000ed00
 80005fc:	e000ed14 	.word	0xe000ed14

08000600 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000600:	3801      	subs	r0, #1
 8000602:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000606:	d20a      	bcs.n	800061e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000608:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000614:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000616:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000618:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800061e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000e010 	.word	0xe000e010
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800062c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000630:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000632:	4626      	mov	r6, r4
 8000634:	4b66      	ldr	r3, [pc, #408]	; (80007d0 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000636:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80007e0 <HAL_GPIO_Init+0x1b4>
 800063a:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80007e4 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800063e:	680a      	ldr	r2, [r1, #0]
 8000640:	fa32 f506 	lsrs.w	r5, r2, r6
 8000644:	d102      	bne.n	800064c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000646:	b003      	add	sp, #12
 8000648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800064c:	f04f 0801 	mov.w	r8, #1
 8000650:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000654:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000658:	4590      	cmp	r8, r2
 800065a:	d17f      	bne.n	800075c <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 800065c:	684d      	ldr	r5, [r1, #4]
 800065e:	2d12      	cmp	r5, #18
 8000660:	f000 80aa 	beq.w	80007b8 <HAL_GPIO_Init+0x18c>
 8000664:	f200 8083 	bhi.w	800076e <HAL_GPIO_Init+0x142>
 8000668:	2d02      	cmp	r5, #2
 800066a:	f000 80a2 	beq.w	80007b2 <HAL_GPIO_Init+0x186>
 800066e:	d877      	bhi.n	8000760 <HAL_GPIO_Init+0x134>
 8000670:	2d00      	cmp	r5, #0
 8000672:	f000 8089 	beq.w	8000788 <HAL_GPIO_Init+0x15c>
 8000676:	2d01      	cmp	r5, #1
 8000678:	f000 8099 	beq.w	80007ae <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800067c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000680:	2aff      	cmp	r2, #255	; 0xff
 8000682:	bf93      	iteet	ls
 8000684:	4682      	movls	sl, r0
 8000686:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800068a:	3d08      	subhi	r5, #8
 800068c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000690:	bf92      	itee	ls
 8000692:	00b5      	lslls	r5, r6, #2
 8000694:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000698:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800069a:	fa09 f805 	lsl.w	r8, r9, r5
 800069e:	ea2b 0808 	bic.w	r8, fp, r8
 80006a2:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80006a6:	bf88      	it	hi
 80006a8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80006ac:	ea48 0505 	orr.w	r5, r8, r5
 80006b0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006b4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80006b8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80006bc:	d04e      	beq.n	800075c <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006be:	4d45      	ldr	r5, [pc, #276]	; (80007d4 <HAL_GPIO_Init+0x1a8>)
 80006c0:	4f44      	ldr	r7, [pc, #272]	; (80007d4 <HAL_GPIO_Init+0x1a8>)
 80006c2:	69ad      	ldr	r5, [r5, #24]
 80006c4:	f026 0803 	bic.w	r8, r6, #3
 80006c8:	f045 0501 	orr.w	r5, r5, #1
 80006cc:	61bd      	str	r5, [r7, #24]
 80006ce:	69bd      	ldr	r5, [r7, #24]
 80006d0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80006d4:	f005 0501 	and.w	r5, r5, #1
 80006d8:	9501      	str	r5, [sp, #4]
 80006da:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006de:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006e2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80006e8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80006ec:	fa09 f90b 	lsl.w	r9, r9, fp
 80006f0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80006f4:	4d38      	ldr	r5, [pc, #224]	; (80007d8 <HAL_GPIO_Init+0x1ac>)
 80006f6:	42a8      	cmp	r0, r5
 80006f8:	d063      	beq.n	80007c2 <HAL_GPIO_Init+0x196>
 80006fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006fe:	42a8      	cmp	r0, r5
 8000700:	d061      	beq.n	80007c6 <HAL_GPIO_Init+0x19a>
 8000702:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000706:	42a8      	cmp	r0, r5
 8000708:	d05f      	beq.n	80007ca <HAL_GPIO_Init+0x19e>
 800070a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800070e:	42a8      	cmp	r0, r5
 8000710:	bf0c      	ite	eq
 8000712:	2503      	moveq	r5, #3
 8000714:	2504      	movne	r5, #4
 8000716:	fa05 f50b 	lsl.w	r5, r5, fp
 800071a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800071e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000722:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000724:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000728:	bf14      	ite	ne
 800072a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800072c:	4395      	biceq	r5, r2
 800072e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000730:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000732:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000736:	bf14      	ite	ne
 8000738:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800073a:	4395      	biceq	r5, r2
 800073c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800073e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000740:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000744:	bf14      	ite	ne
 8000746:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000748:	4395      	biceq	r5, r2
 800074a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800074c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800074e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000752:	bf14      	ite	ne
 8000754:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000756:	ea25 0202 	biceq.w	r2, r5, r2
 800075a:	60da      	str	r2, [r3, #12]
	position++;
 800075c:	3601      	adds	r6, #1
 800075e:	e76e      	b.n	800063e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000760:	2d03      	cmp	r5, #3
 8000762:	d022      	beq.n	80007aa <HAL_GPIO_Init+0x17e>
 8000764:	2d11      	cmp	r5, #17
 8000766:	d189      	bne.n	800067c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000768:	68cc      	ldr	r4, [r1, #12]
 800076a:	3404      	adds	r4, #4
          break;
 800076c:	e786      	b.n	800067c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800076e:	4f1b      	ldr	r7, [pc, #108]	; (80007dc <HAL_GPIO_Init+0x1b0>)
 8000770:	42bd      	cmp	r5, r7
 8000772:	d009      	beq.n	8000788 <HAL_GPIO_Init+0x15c>
 8000774:	d812      	bhi.n	800079c <HAL_GPIO_Init+0x170>
 8000776:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80007e8 <HAL_GPIO_Init+0x1bc>
 800077a:	454d      	cmp	r5, r9
 800077c:	d004      	beq.n	8000788 <HAL_GPIO_Init+0x15c>
 800077e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000782:	454d      	cmp	r5, r9
 8000784:	f47f af7a 	bne.w	800067c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000788:	688c      	ldr	r4, [r1, #8]
 800078a:	b1c4      	cbz	r4, 80007be <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800078c:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800078e:	bf0c      	ite	eq
 8000790:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000794:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000798:	2408      	movs	r4, #8
 800079a:	e76f      	b.n	800067c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800079c:	4575      	cmp	r5, lr
 800079e:	d0f3      	beq.n	8000788 <HAL_GPIO_Init+0x15c>
 80007a0:	4565      	cmp	r5, ip
 80007a2:	d0f1      	beq.n	8000788 <HAL_GPIO_Init+0x15c>
 80007a4:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80007ec <HAL_GPIO_Init+0x1c0>
 80007a8:	e7eb      	b.n	8000782 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007aa:	2400      	movs	r4, #0
 80007ac:	e766      	b.n	800067c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007ae:	68cc      	ldr	r4, [r1, #12]
          break;
 80007b0:	e764      	b.n	800067c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007b2:	68cc      	ldr	r4, [r1, #12]
 80007b4:	3408      	adds	r4, #8
          break;
 80007b6:	e761      	b.n	800067c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007b8:	68cc      	ldr	r4, [r1, #12]
 80007ba:	340c      	adds	r4, #12
          break;
 80007bc:	e75e      	b.n	800067c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007be:	2404      	movs	r4, #4
 80007c0:	e75c      	b.n	800067c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80007c2:	2500      	movs	r5, #0
 80007c4:	e7a7      	b.n	8000716 <HAL_GPIO_Init+0xea>
 80007c6:	2501      	movs	r5, #1
 80007c8:	e7a5      	b.n	8000716 <HAL_GPIO_Init+0xea>
 80007ca:	2502      	movs	r5, #2
 80007cc:	e7a3      	b.n	8000716 <HAL_GPIO_Init+0xea>
 80007ce:	bf00      	nop
 80007d0:	40010400 	.word	0x40010400
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010800 	.word	0x40010800
 80007dc:	10210000 	.word	0x10210000
 80007e0:	10310000 	.word	0x10310000
 80007e4:	10320000 	.word	0x10320000
 80007e8:	10110000 	.word	0x10110000
 80007ec:	10220000 	.word	0x10220000

080007f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007f0:	b10a      	cbz	r2, 80007f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007f2:	6101      	str	r1, [r0, #16]
 80007f4:	4770      	bx	lr
 80007f6:	0409      	lsls	r1, r1, #16
 80007f8:	e7fb      	b.n	80007f2 <HAL_GPIO_WritePin+0x2>

080007fa <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80007fa:	6801      	ldr	r1, [r0, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	694b      	ldr	r3, [r1, #20]
 8000800:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000804:	d010      	beq.n	8000828 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000806:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800080a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800080c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800080e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000810:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000814:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000818:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800081a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800081e:	f043 0304 	orr.w	r3, r3, #4
 8000822:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000824:	2001      	movs	r0, #1
 8000826:	4770      	bx	lr
  }
  return HAL_OK;
 8000828:	4618      	mov	r0, r3
}
 800082a:	4770      	bx	lr

0800082c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800082c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000830:	4604      	mov	r4, r0
 8000832:	4617      	mov	r7, r2
 8000834:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000836:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800083a:	b28e      	uxth	r6, r1
 800083c:	6825      	ldr	r5, [r4, #0]
 800083e:	f1b8 0f01 	cmp.w	r8, #1
 8000842:	bf0c      	ite	eq
 8000844:	696b      	ldreq	r3, [r5, #20]
 8000846:	69ab      	ldrne	r3, [r5, #24]
 8000848:	ea36 0303 	bics.w	r3, r6, r3
 800084c:	bf14      	ite	ne
 800084e:	2001      	movne	r0, #1
 8000850:	2000      	moveq	r0, #0
 8000852:	b908      	cbnz	r0, 8000858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000858:	696b      	ldr	r3, [r5, #20]
 800085a:	055a      	lsls	r2, r3, #21
 800085c:	d516      	bpl.n	800088c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800085e:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000860:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000866:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000868:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800086c:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800086e:	2300      	movs	r3, #0
 8000870:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000872:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000876:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800087a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800087c:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000880:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000882:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800088c:	1c7b      	adds	r3, r7, #1
 800088e:	d0d5      	beq.n	800083c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000890:	f7ff fe6a 	bl	8000568 <HAL_GetTick>
 8000894:	eba0 0009 	sub.w	r0, r0, r9
 8000898:	4287      	cmp	r7, r0
 800089a:	d301      	bcc.n	80008a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 800089c:	2f00      	cmp	r7, #0
 800089e:	d1cd      	bne.n	800083c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80008a0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80008a2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80008a4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80008a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80008ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008b0:	f042 0220 	orr.w	r2, r2, #32
 80008b4:	e7e4      	b.n	8000880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080008b6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80008b6:	b570      	push	{r4, r5, r6, lr}
 80008b8:	4604      	mov	r4, r0
 80008ba:	460d      	mov	r5, r1
 80008bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	075b      	lsls	r3, r3, #29
 80008c4:	d501      	bpl.n	80008ca <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80008c6:	2000      	movs	r0, #0
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80008ca:	4620      	mov	r0, r4
 80008cc:	f7ff ff95 	bl	80007fa <I2C_IsAcknowledgeFailed>
 80008d0:	b9a8      	cbnz	r0, 80008fe <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80008d2:	1c6a      	adds	r2, r5, #1
 80008d4:	d0f3      	beq.n	80008be <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008d6:	f7ff fe47 	bl	8000568 <HAL_GetTick>
 80008da:	1b80      	subs	r0, r0, r6
 80008dc:	4285      	cmp	r5, r0
 80008de:	d301      	bcc.n	80008e4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80008e0:	2d00      	cmp	r5, #0
 80008e2:	d1ec      	bne.n	80008be <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80008e4:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80008e6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80008e8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80008ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80008f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80008f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80008f8:	f042 0220 	orr.w	r2, r2, #32
 80008fc:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80008fe:	2001      	movs	r0, #1
}
 8000900:	bd70      	pop	{r4, r5, r6, pc}

08000902 <I2C_WaitOnFlagUntilTimeout>:
{
 8000902:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000906:	4604      	mov	r4, r0
 8000908:	4690      	mov	r8, r2
 800090a:	461f      	mov	r7, r3
 800090c:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800090e:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000912:	b28d      	uxth	r5, r1
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	f1b9 0f01 	cmp.w	r9, #1
 800091a:	bf0c      	ite	eq
 800091c:	695b      	ldreq	r3, [r3, #20]
 800091e:	699b      	ldrne	r3, [r3, #24]
 8000920:	ea35 0303 	bics.w	r3, r5, r3
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	4543      	cmp	r3, r8
 800092c:	d002      	beq.n	8000934 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800092e:	2000      	movs	r0, #0
}
 8000930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000934:	1c7b      	adds	r3, r7, #1
 8000936:	d0ed      	beq.n	8000914 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000938:	f7ff fe16 	bl	8000568 <HAL_GetTick>
 800093c:	1b80      	subs	r0, r0, r6
 800093e:	4287      	cmp	r7, r0
 8000940:	d301      	bcc.n	8000946 <I2C_WaitOnFlagUntilTimeout+0x44>
 8000942:	2f00      	cmp	r7, #0
 8000944:	d1e6      	bne.n	8000914 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000946:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000948:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800094a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800094c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000950:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000954:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000956:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800095a:	f042 0220 	orr.w	r2, r2, #32
 800095e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000960:	2001      	movs	r0, #1
 8000962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000966 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000966:	b570      	push	{r4, r5, r6, lr}
 8000968:	4604      	mov	r4, r0
 800096a:	460d      	mov	r5, r1
 800096c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	061b      	lsls	r3, r3, #24
 8000974:	d501      	bpl.n	800097a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8000976:	2000      	movs	r0, #0
 8000978:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800097a:	4620      	mov	r0, r4
 800097c:	f7ff ff3d 	bl	80007fa <I2C_IsAcknowledgeFailed>
 8000980:	b9a8      	cbnz	r0, 80009ae <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000982:	1c6a      	adds	r2, r5, #1
 8000984:	d0f3      	beq.n	800096e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000986:	f7ff fdef 	bl	8000568 <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	4285      	cmp	r5, r0
 800098e:	d301      	bcc.n	8000994 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000990:	2d00      	cmp	r5, #0
 8000992:	d1ec      	bne.n	800096e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000994:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8000996:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000998:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800099a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800099e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80009a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80009a8:	f042 0220 	orr.w	r2, r2, #32
 80009ac:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80009ae:	2001      	movs	r0, #1
}
 80009b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080009b4 <HAL_I2C_Init>:
{
 80009b4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80009b6:	4604      	mov	r4, r0
 80009b8:	b908      	cbnz	r0, 80009be <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80009be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80009c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009c6:	b91b      	cbnz	r3, 80009d0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80009c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80009cc:	f7ff fd00 	bl	80003d0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009d0:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80009d2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80009d8:	6813      	ldr	r3, [r2, #0]
 80009da:	f023 0301 	bic.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80009e0:	f000 fbd2 	bl	8001188 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80009e4:	6865      	ldr	r5, [r4, #4]
 80009e6:	4b41      	ldr	r3, [pc, #260]	; (8000aec <HAL_I2C_Init+0x138>)
 80009e8:	429d      	cmp	r5, r3
 80009ea:	d84d      	bhi.n	8000a88 <HAL_I2C_Init+0xd4>
 80009ec:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <HAL_I2C_Init+0x13c>)
 80009ee:	4298      	cmp	r0, r3
 80009f0:	d9e3      	bls.n	80009ba <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80009f2:	4940      	ldr	r1, [pc, #256]	; (8000af4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80009f4:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80009f6:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80009fa:	6853      	ldr	r3, [r2, #4]
 80009fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a00:	430b      	orrs	r3, r1
 8000a02:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000a04:	6a13      	ldr	r3, [r2, #32]
 8000a06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a0a:	3101      	adds	r1, #1
 8000a0c:	4319      	orrs	r1, r3
 8000a0e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000a10:	69d1      	ldr	r1, [r2, #28]
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <HAL_I2C_Init+0x138>)
 8000a14:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000a18:	429d      	cmp	r5, r3
 8000a1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000a1e:	f100 30ff 	add.w	r0, r0, #4294967295
 8000a22:	d848      	bhi.n	8000ab6 <HAL_I2C_Init+0x102>
 8000a24:	006d      	lsls	r5, r5, #1
 8000a26:	fbb0 f0f5 	udiv	r0, r0, r5
 8000a2a:	3001      	adds	r0, #1
 8000a2c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	bf38      	it	cc
 8000a34:	2304      	movcc	r3, #4
 8000a36:	430b      	orrs	r3, r1
 8000a38:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000a3a:	6811      	ldr	r1, [r2, #0]
 8000a3c:	6a20      	ldr	r0, [r4, #32]
 8000a3e:	69e3      	ldr	r3, [r4, #28]
 8000a40:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000a44:	4303      	orrs	r3, r0
 8000a46:	430b      	orrs	r3, r1
 8000a48:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000a4a:	6891      	ldr	r1, [r2, #8]
 8000a4c:	68e0      	ldr	r0, [r4, #12]
 8000a4e:	6923      	ldr	r3, [r4, #16]
 8000a50:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000a54:	4303      	orrs	r3, r0
 8000a56:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000a5e:	68d1      	ldr	r1, [r2, #12]
 8000a60:	69a0      	ldr	r0, [r4, #24]
 8000a62:	6963      	ldr	r3, [r4, #20]
 8000a64:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000a68:	4303      	orrs	r3, r0
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000a6e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a70:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000a78:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a7a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000a7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a80:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a82:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_I2C_Init+0x144>)
 8000a8a:	4298      	cmp	r0, r3
 8000a8c:	d995      	bls.n	80009ba <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000a8e:	4e19      	ldr	r6, [pc, #100]	; (8000af4 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000a90:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000a94:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a98:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000a9a:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000a9c:	6853      	ldr	r3, [r2, #4]
 8000a9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000aa2:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000aa4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000aa8:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000aaa:	6a13      	ldr	r3, [r2, #32]
 8000aac:	fbb1 f1f6 	udiv	r1, r1, r6
 8000ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ab4:	e7a9      	b.n	8000a0a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ab6:	68a3      	ldr	r3, [r4, #8]
 8000ab8:	b953      	cbnz	r3, 8000ad0 <HAL_I2C_Init+0x11c>
 8000aba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000abe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ac2:	1c43      	adds	r3, r0, #1
 8000ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ac8:	b16b      	cbz	r3, 8000ae6 <HAL_I2C_Init+0x132>
 8000aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ace:	e7b2      	b.n	8000a36 <HAL_I2C_Init+0x82>
 8000ad0:	2319      	movs	r3, #25
 8000ad2:	436b      	muls	r3, r5
 8000ad4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ad8:	1c43      	adds	r3, r0, #1
 8000ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ade:	b113      	cbz	r3, 8000ae6 <HAL_I2C_Init+0x132>
 8000ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae4:	e7a7      	b.n	8000a36 <HAL_I2C_Init+0x82>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e7a5      	b.n	8000a36 <HAL_I2C_Init+0x82>
 8000aea:	bf00      	nop
 8000aec:	000186a0 	.word	0x000186a0
 8000af0:	001e847f 	.word	0x001e847f
 8000af4:	000f4240 	.word	0x000f4240
 8000af8:	003d08ff 	.word	0x003d08ff

08000afc <HAL_I2C_Master_Transmit>:
{
 8000afc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000b00:	4604      	mov	r4, r0
 8000b02:	461f      	mov	r7, r3
 8000b04:	460d      	mov	r5, r1
 8000b06:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff fd2e 	bl	8000568 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8000b10:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b12:	2b20      	cmp	r3, #32
 8000b14:	d004      	beq.n	8000b20 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000b16:	2502      	movs	r5, #2
}
 8000b18:	4628      	mov	r0, r5
 8000b1a:	b004      	add	sp, #16
 8000b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b20:	9000      	str	r0, [sp, #0]
 8000b22:	2319      	movs	r3, #25
 8000b24:	2201      	movs	r2, #1
 8000b26:	4958      	ldr	r1, [pc, #352]	; (8000c88 <HAL_I2C_Master_Transmit+0x18c>)
 8000b28:	4620      	mov	r0, r4
 8000b2a:	f7ff feea 	bl	8000902 <I2C_WaitOnFlagUntilTimeout>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d1f1      	bne.n	8000b16 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000b32:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d0ed      	beq.n	8000b16 <HAL_I2C_Master_Transmit+0x1a>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000b46:	bf5e      	ittt	pl
 8000b48:	681a      	ldrpl	r2, [r3, #0]
 8000b4a:	f042 0201 	orrpl.w	r2, r2, #1
 8000b4e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b56:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000b58:	2221      	movs	r2, #33	; 0x21
 8000b5a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000b5e:	2210      	movs	r2, #16
 8000b60:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000b64:	2200      	movs	r2, #0
 8000b66:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000b68:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000b6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000b6c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000b70:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000b72:	4a46      	ldr	r2, [pc, #280]	; (8000c8c <HAL_I2C_Master_Transmit+0x190>)
 8000b74:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000b76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000b78:	2a08      	cmp	r2, #8
 8000b7a:	d004      	beq.n	8000b86 <HAL_I2C_Master_Transmit+0x8a>
 8000b7c:	2a01      	cmp	r2, #1
 8000b7e:	d002      	beq.n	8000b86 <HAL_I2C_Master_Transmit+0x8a>
 8000b80:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000b84:	d104      	bne.n	8000b90 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	e002      	b.n	8000b96 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000b90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000b92:	2a12      	cmp	r2, #18
 8000b94:	d0f7      	beq.n	8000b86 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b96:	9600      	str	r6, [sp, #0]
 8000b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f7ff feae 	bl	8000902 <I2C_WaitOnFlagUntilTimeout>
 8000ba6:	b108      	cbz	r0, 8000bac <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8000ba8:	2501      	movs	r5, #1
 8000baa:	e7b5      	b.n	8000b18 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bac:	6923      	ldr	r3, [r4, #16]
 8000bae:	6822      	ldr	r2, [r4, #0]
 8000bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bb4:	d113      	bne.n	8000bde <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000bb6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000bba:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bbc:	4633      	mov	r3, r6
 8000bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000bc0:	4933      	ldr	r1, [pc, #204]	; (8000c90 <HAL_I2C_Master_Transmit+0x194>)
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f7ff fe32 	bl	800082c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bc8:	4605      	mov	r5, r0
 8000bca:	2800      	cmp	r0, #0
 8000bcc:	d1ec      	bne.n	8000ba8 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	9003      	str	r0, [sp, #12]
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	9203      	str	r2, [sp, #12]
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	9303      	str	r3, [sp, #12]
 8000bda:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000bdc:	e044      	b.n	8000c68 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000bde:	11eb      	asrs	r3, r5, #7
 8000be0:	f003 0306 	and.w	r3, r3, #6
 8000be4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000be8:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000bea:	492a      	ldr	r1, [pc, #168]	; (8000c94 <HAL_I2C_Master_Transmit+0x198>)
 8000bec:	4633      	mov	r3, r6
 8000bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f7ff fe1b 	bl	800082c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d1d6      	bne.n	8000ba8 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	b2ed      	uxtb	r5, r5
 8000bfe:	611d      	str	r5, [r3, #16]
 8000c00:	e7dc      	b.n	8000bbc <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c02:	4632      	mov	r2, r6
 8000c04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fead 	bl	8000966 <I2C_WaitOnTXEFlagUntilTimeout>
 8000c0c:	b140      	cbz	r0, 8000c20 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000c0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c10:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c12:	bf01      	itttt	eq
 8000c14:	6822      	ldreq	r2, [r4, #0]
 8000c16:	6813      	ldreq	r3, [r2, #0]
 8000c18:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000c1c:	6013      	streq	r3, [r2, #0]
 8000c1e:	e7c3      	b.n	8000ba8 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c22:	6820      	ldr	r0, [r4, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000c2a:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000c2c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000c2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000c30:	3a01      	subs	r2, #1
 8000c32:	b292      	uxth	r2, r2
 8000c34:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000c36:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000c38:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000c3a:	1e51      	subs	r1, r2, #1
 8000c3c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000c3e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000c40:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000c42:	d50a      	bpl.n	8000c5a <HAL_I2C_Master_Transmit+0x15e>
 8000c44:	b149      	cbz	r1, 8000c5a <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000c46:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8000c48:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000c4a:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000c4c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000c4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000c50:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000c52:	3b01      	subs	r3, #1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000c58:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000c5a:	4632      	mov	r2, r6
 8000c5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff fe29 	bl	80008b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d1d2      	bne.n	8000c0e <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8000c68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1c9      	bne.n	8000c02 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c6e:	6821      	ldr	r1, [r4, #0]
 8000c70:	680a      	ldr	r2, [r1, #0]
 8000c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c76:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000c78:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000c7a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000c7e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000c86:	e747      	b.n	8000b18 <HAL_I2C_Master_Transmit+0x1c>
 8000c88:	00100002 	.word	0x00100002
 8000c8c:	ffff0000 	.word	0xffff0000
 8000c90:	00010002 	.word	0x00010002
 8000c94:	00010008 	.word	0x00010008

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c9c:	4605      	mov	r5, r0
 8000c9e:	b908      	cbnz	r0, 8000ca4 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	e03c      	b.n	8000d1e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca4:	6803      	ldr	r3, [r0, #0]
 8000ca6:	07db      	lsls	r3, r3, #31
 8000ca8:	d410      	bmi.n	8000ccc <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	079f      	lsls	r7, r3, #30
 8000cae:	d45d      	bmi.n	8000d6c <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cb0:	682b      	ldr	r3, [r5, #0]
 8000cb2:	0719      	lsls	r1, r3, #28
 8000cb4:	f100 8094 	bmi.w	8000de0 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cb8:	682b      	ldr	r3, [r5, #0]
 8000cba:	075a      	lsls	r2, r3, #29
 8000cbc:	f100 80be 	bmi.w	8000e3c <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cc0:	69e8      	ldr	r0, [r5, #28]
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	f040 812c 	bne.w	8000f20 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000cc8:	2000      	movs	r0, #0
 8000cca:	e028      	b.n	8000d1e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ccc:	4c8f      	ldr	r4, [pc, #572]	; (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000cce:	6863      	ldr	r3, [r4, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d007      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d109      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x5e>
 8000ce2:	6863      	ldr	r3, [r4, #4]
 8000ce4:	03de      	lsls	r6, r3, #15
 8000ce6:	d506      	bpl.n	8000cf6 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	039c      	lsls	r4, r3, #14
 8000cec:	d5dd      	bpl.n	8000caa <HAL_RCC_OscConfig+0x12>
 8000cee:	686b      	ldr	r3, [r5, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1da      	bne.n	8000caa <HAL_RCC_OscConfig+0x12>
 8000cf4:	e7d4      	b.n	8000ca0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf6:	686b      	ldr	r3, [r5, #4]
 8000cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfc:	d112      	bne.n	8000d24 <HAL_RCC_OscConfig+0x8c>
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d06:	f7ff fc2f 	bl	8000568 <HAL_GetTick>
 8000d0a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	0398      	lsls	r0, r3, #14
 8000d10:	d4cb      	bmi.n	8000caa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d12:	f7ff fc29 	bl	8000568 <HAL_GetTick>
 8000d16:	1b80      	subs	r0, r0, r6
 8000d18:	2864      	cmp	r0, #100	; 0x64
 8000d1a:	d9f7      	bls.n	8000d0c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000d1c:	2003      	movs	r0, #3
}
 8000d1e:	b002      	add	sp, #8
 8000d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d24:	b99b      	cbnz	r3, 8000d4e <HAL_RCC_OscConfig+0xb6>
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2c:	6023      	str	r3, [r4, #0]
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d36:	f7ff fc17 	bl	8000568 <HAL_GetTick>
 8000d3a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	0399      	lsls	r1, r3, #14
 8000d40:	d5b3      	bpl.n	8000caa <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d42:	f7ff fc11 	bl	8000568 <HAL_GetTick>
 8000d46:	1b80      	subs	r0, r0, r6
 8000d48:	2864      	cmp	r0, #100	; 0x64
 8000d4a:	d9f7      	bls.n	8000d3c <HAL_RCC_OscConfig+0xa4>
 8000d4c:	e7e6      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	d103      	bne.n	8000d5e <HAL_RCC_OscConfig+0xc6>
 8000d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5a:	6023      	str	r3, [r4, #0]
 8000d5c:	e7cf      	b.n	8000cfe <HAL_RCC_OscConfig+0x66>
 8000d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d62:	6023      	str	r3, [r4, #0]
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6a:	e7cb      	b.n	8000d04 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d6c:	4c67      	ldr	r4, [pc, #412]	; (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000d6e:	6863      	ldr	r3, [r4, #4]
 8000d70:	f013 0f0c 	tst.w	r3, #12
 8000d74:	d007      	beq.n	8000d86 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d76:	6863      	ldr	r3, [r4, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d110      	bne.n	8000da2 <HAL_RCC_OscConfig+0x10a>
 8000d80:	6863      	ldr	r3, [r4, #4]
 8000d82:	03da      	lsls	r2, r3, #15
 8000d84:	d40d      	bmi.n	8000da2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	079b      	lsls	r3, r3, #30
 8000d8a:	d502      	bpl.n	8000d92 <HAL_RCC_OscConfig+0xfa>
 8000d8c:	692b      	ldr	r3, [r5, #16]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d186      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	696a      	ldr	r2, [r5, #20]
 8000d96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d9e:	6023      	str	r3, [r4, #0]
 8000da0:	e786      	b.n	8000cb0 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000da2:	692a      	ldr	r2, [r5, #16]
 8000da4:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <HAL_RCC_OscConfig+0x278>)
 8000da6:	b16a      	cbz	r2, 8000dc4 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dac:	f7ff fbdc 	bl	8000568 <HAL_GetTick>
 8000db0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	079f      	lsls	r7, r3, #30
 8000db6:	d4ec      	bmi.n	8000d92 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db8:	f7ff fbd6 	bl	8000568 <HAL_GetTick>
 8000dbc:	1b80      	subs	r0, r0, r6
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9f7      	bls.n	8000db2 <HAL_RCC_OscConfig+0x11a>
 8000dc2:	e7ab      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000dc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fbcf 	bl	8000568 <HAL_GetTick>
 8000dca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	0798      	lsls	r0, r3, #30
 8000dd0:	f57f af6e 	bpl.w	8000cb0 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fbc8 	bl	8000568 <HAL_GetTick>
 8000dd8:	1b80      	subs	r0, r0, r6
 8000dda:	2802      	cmp	r0, #2
 8000ddc:	d9f6      	bls.n	8000dcc <HAL_RCC_OscConfig+0x134>
 8000dde:	e79d      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de0:	69aa      	ldr	r2, [r5, #24]
 8000de2:	4c4a      	ldr	r4, [pc, #296]	; (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000de4:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <HAL_RCC_OscConfig+0x27c>)
 8000de6:	b1da      	cbz	r2, 8000e20 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dec:	f7ff fbbc 	bl	8000568 <HAL_GetTick>
 8000df0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000df4:	079b      	lsls	r3, r3, #30
 8000df6:	d50d      	bpl.n	8000e14 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000df8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <HAL_RCC_OscConfig+0x280>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e04:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000e06:	bf00      	nop
  }
  while (Delay --);
 8000e08:	9b01      	ldr	r3, [sp, #4]
 8000e0a:	1e5a      	subs	r2, r3, #1
 8000e0c:	9201      	str	r2, [sp, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f9      	bne.n	8000e06 <HAL_RCC_OscConfig+0x16e>
 8000e12:	e751      	b.n	8000cb8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fba8 	bl	8000568 <HAL_GetTick>
 8000e18:	1b80      	subs	r0, r0, r6
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9e9      	bls.n	8000df2 <HAL_RCC_OscConfig+0x15a>
 8000e1e:	e77d      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000e20:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e22:	f7ff fba1 	bl	8000568 <HAL_GetTick>
 8000e26:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e2a:	079f      	lsls	r7, r3, #30
 8000e2c:	f57f af44 	bpl.w	8000cb8 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fb9a 	bl	8000568 <HAL_GetTick>
 8000e34:	1b80      	subs	r0, r0, r6
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f6      	bls.n	8000e28 <HAL_RCC_OscConfig+0x190>
 8000e3a:	e76f      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3c:	4c33      	ldr	r4, [pc, #204]	; (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000e3e:	69e3      	ldr	r3, [r4, #28]
 8000e40:	00d8      	lsls	r0, r3, #3
 8000e42:	d424      	bmi.n	8000e8e <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000e44:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	69e3      	ldr	r3, [r4, #28]
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	61e3      	str	r3, [r4, #28]
 8000e4e:	69e3      	ldr	r3, [r4, #28]
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e58:	4e30      	ldr	r6, [pc, #192]	; (8000f1c <HAL_RCC_OscConfig+0x284>)
 8000e5a:	6833      	ldr	r3, [r6, #0]
 8000e5c:	05d9      	lsls	r1, r3, #23
 8000e5e:	d518      	bpl.n	8000e92 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e60:	68eb      	ldr	r3, [r5, #12]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d126      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x21c>
 8000e66:	6a23      	ldr	r3, [r4, #32]
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fb7b 	bl	8000568 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e72:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e76:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e78:	6a23      	ldr	r3, [r4, #32]
 8000e7a:	079b      	lsls	r3, r3, #30
 8000e7c:	d53f      	bpl.n	8000efe <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000e7e:	2f00      	cmp	r7, #0
 8000e80:	f43f af1e 	beq.w	8000cc0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e84:	69e3      	ldr	r3, [r4, #28]
 8000e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	61e3      	str	r3, [r4, #28]
 8000e8c:	e718      	b.n	8000cc0 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000e8e:	2700      	movs	r7, #0
 8000e90:	e7e2      	b.n	8000e58 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e92:	6833      	ldr	r3, [r6, #0]
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fb65 	bl	8000568 <HAL_GetTick>
 8000e9e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea0:	6833      	ldr	r3, [r6, #0]
 8000ea2:	05da      	lsls	r2, r3, #23
 8000ea4:	d4dc      	bmi.n	8000e60 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea6:	f7ff fb5f 	bl	8000568 <HAL_GetTick>
 8000eaa:	eba0 0008 	sub.w	r0, r0, r8
 8000eae:	2864      	cmp	r0, #100	; 0x64
 8000eb0:	d9f6      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x208>
 8000eb2:	e733      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb4:	b9ab      	cbnz	r3, 8000ee2 <HAL_RCC_OscConfig+0x24a>
 8000eb6:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	f023 0301 	bic.w	r3, r3, #1
 8000ec0:	6223      	str	r3, [r4, #32]
 8000ec2:	6a23      	ldr	r3, [r4, #32]
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000eca:	f7ff fb4d 	bl	8000568 <HAL_GetTick>
 8000ece:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed0:	6a23      	ldr	r3, [r4, #32]
 8000ed2:	0798      	lsls	r0, r3, #30
 8000ed4:	d5d3      	bpl.n	8000e7e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb47 	bl	8000568 <HAL_GetTick>
 8000eda:	1b80      	subs	r0, r0, r6
 8000edc:	4540      	cmp	r0, r8
 8000ede:	d9f7      	bls.n	8000ed0 <HAL_RCC_OscConfig+0x238>
 8000ee0:	e71c      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	6a23      	ldr	r3, [r4, #32]
 8000ee6:	d103      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x258>
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6223      	str	r3, [r4, #32]
 8000eee:	e7ba      	b.n	8000e66 <HAL_RCC_OscConfig+0x1ce>
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	6223      	str	r3, [r4, #32]
 8000ef6:	6a23      	ldr	r3, [r4, #32]
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	e7b6      	b.n	8000e6c <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb33 	bl	8000568 <HAL_GetTick>
 8000f02:	eba0 0008 	sub.w	r0, r0, r8
 8000f06:	42b0      	cmp	r0, r6
 8000f08:	d9b6      	bls.n	8000e78 <HAL_RCC_OscConfig+0x1e0>
 8000f0a:	e707      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	42420000 	.word	0x42420000
 8000f14:	42420480 	.word	0x42420480
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f20:	4b2a      	ldr	r3, [pc, #168]	; (8000fcc <HAL_RCC_OscConfig+0x334>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	461c      	mov	r4, r3
 8000f26:	f002 020c 	and.w	r2, r2, #12
 8000f2a:	2a08      	cmp	r2, #8
 8000f2c:	d03d      	beq.n	8000faa <HAL_RCC_OscConfig+0x312>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	4e27      	ldr	r6, [pc, #156]	; (8000fd0 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f32:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f34:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f36:	d12b      	bne.n	8000f90 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb16 	bl	8000568 <HAL_GetTick>
 8000f3c:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	0199      	lsls	r1, r3, #6
 8000f42:	d41f      	bmi.n	8000f84 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f44:	6a2b      	ldr	r3, [r5, #32]
 8000f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4a:	d105      	bne.n	8000f58 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f4c:	6862      	ldr	r2, [r4, #4]
 8000f4e:	68a9      	ldr	r1, [r5, #8]
 8000f50:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f54:	430a      	orrs	r2, r1
 8000f56:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f58:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f5a:	6862      	ldr	r2, [r4, #4]
 8000f5c:	430b      	orrs	r3, r1
 8000f5e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f62:	4313      	orrs	r3, r2
 8000f64:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f66:	2301      	movs	r3, #1
 8000f68:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f6a:	f7ff fafd 	bl	8000568 <HAL_GetTick>
 8000f6e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f70:	6823      	ldr	r3, [r4, #0]
 8000f72:	019a      	lsls	r2, r3, #6
 8000f74:	f53f aea8 	bmi.w	8000cc8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f78:	f7ff faf6 	bl	8000568 <HAL_GetTick>
 8000f7c:	1b40      	subs	r0, r0, r5
 8000f7e:	2802      	cmp	r0, #2
 8000f80:	d9f6      	bls.n	8000f70 <HAL_RCC_OscConfig+0x2d8>
 8000f82:	e6cb      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f84:	f7ff faf0 	bl	8000568 <HAL_GetTick>
 8000f88:	1bc0      	subs	r0, r0, r7
 8000f8a:	2802      	cmp	r0, #2
 8000f8c:	d9d7      	bls.n	8000f3e <HAL_RCC_OscConfig+0x2a6>
 8000f8e:	e6c5      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f90:	f7ff faea 	bl	8000568 <HAL_GetTick>
 8000f94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	019b      	lsls	r3, r3, #6
 8000f9a:	f57f ae95 	bpl.w	8000cc8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fae3 	bl	8000568 <HAL_GetTick>
 8000fa2:	1b40      	subs	r0, r0, r5
 8000fa4:	2802      	cmp	r0, #2
 8000fa6:	d9f6      	bls.n	8000f96 <HAL_RCC_OscConfig+0x2fe>
 8000fa8:	e6b8      	b.n	8000d1c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000faa:	2801      	cmp	r0, #1
 8000fac:	f43f aeb7 	beq.w	8000d1e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000fb0:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb2:	6a2b      	ldr	r3, [r5, #32]
 8000fb4:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f47f ae71 	bne.w	8000ca0 <HAL_RCC_OscConfig+0x8>
 8000fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fc0:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000fc4:	1ac0      	subs	r0, r0, r3
 8000fc6:	bf18      	it	ne
 8000fc8:	2001      	movne	r0, #1
 8000fca:	e6a8      	b.n	8000d1e <HAL_RCC_OscConfig+0x86>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	42420060 	.word	0x42420060

08000fd4 <HAL_RCC_GetSysClockFreq>:
{
 8000fd4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000fd8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000fda:	ac02      	add	r4, sp, #8
 8000fdc:	f103 0510 	add.w	r5, r3, #16
 8000fe0:	4622      	mov	r2, r4
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	6859      	ldr	r1, [r3, #4]
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	c203      	stmia	r2!, {r0, r1}
 8000fea:	42ab      	cmp	r3, r5
 8000fec:	4614      	mov	r4, r2
 8000fee:	d1f7      	bne.n	8000fe0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000ff6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000ff8:	4911      	ldr	r1, [pc, #68]	; (8001040 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ffa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000ffe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001000:	f003 020c 	and.w	r2, r3, #12
 8001004:	2a08      	cmp	r2, #8
 8001006:	d117      	bne.n	8001038 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001008:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800100c:	a806      	add	r0, sp, #24
 800100e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001010:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001012:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001016:	d50c      	bpl.n	8001032 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001018:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800101a:	480a      	ldr	r0, [pc, #40]	; (8001044 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800101c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001020:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001022:	aa06      	add	r2, sp, #24
 8001024:	4413      	add	r3, r2
 8001026:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800102a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800102e:	b007      	add	sp, #28
 8001030:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <HAL_RCC_GetSysClockFreq+0x74>)
 8001034:	4350      	muls	r0, r2
 8001036:	e7fa      	b.n	800102e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800103a:	e7f8      	b.n	800102e <HAL_RCC_GetSysClockFreq+0x5a>
 800103c:	0800214c 	.word	0x0800214c
 8001040:	40021000 	.word	0x40021000
 8001044:	007a1200 	.word	0x007a1200
 8001048:	003d0900 	.word	0x003d0900

0800104c <HAL_RCC_ClockConfig>:
{
 800104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001050:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001052:	4604      	mov	r4, r0
 8001054:	b910      	cbnz	r0, 800105c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001056:	2001      	movs	r0, #1
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800105c:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_RCC_ClockConfig+0x128>)
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	428b      	cmp	r3, r1
 8001066:	d329      	bcc.n	80010bc <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001068:	6821      	ldr	r1, [r4, #0]
 800106a:	078e      	lsls	r6, r1, #30
 800106c:	d431      	bmi.n	80010d2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800106e:	07ca      	lsls	r2, r1, #31
 8001070:	d444      	bmi.n	80010fc <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001072:	4a40      	ldr	r2, [pc, #256]	; (8001174 <HAL_RCC_ClockConfig+0x128>)
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	429d      	cmp	r5, r3
 800107c:	d367      	bcc.n	800114e <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	4d3d      	ldr	r5, [pc, #244]	; (8001178 <HAL_RCC_ClockConfig+0x12c>)
 8001082:	f012 0f04 	tst.w	r2, #4
 8001086:	d16e      	bne.n	8001166 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001088:	0713      	lsls	r3, r2, #28
 800108a:	d506      	bpl.n	800109a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800108c:	686b      	ldr	r3, [r5, #4]
 800108e:	6922      	ldr	r2, [r4, #16]
 8001090:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001094:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001098:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800109a:	f7ff ff9b 	bl	8000fd4 <HAL_RCC_GetSysClockFreq>
 800109e:	686b      	ldr	r3, [r5, #4]
 80010a0:	4a36      	ldr	r2, [pc, #216]	; (800117c <HAL_RCC_ClockConfig+0x130>)
 80010a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	40d8      	lsrs	r0, r3
 80010aa:	4b35      	ldr	r3, [pc, #212]	; (8001180 <HAL_RCC_ClockConfig+0x134>)
 80010ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_RCC_ClockConfig+0x138>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f7ff fa29 	bl	8000508 <HAL_InitTick>
  return HAL_OK;
 80010b6:	2000      	movs	r0, #0
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	f023 0307 	bic.w	r3, r3, #7
 80010c2:	430b      	orrs	r3, r1
 80010c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d1c2      	bne.n	8001056 <HAL_RCC_ClockConfig+0xa>
 80010d0:	e7ca      	b.n	8001068 <HAL_RCC_ClockConfig+0x1c>
 80010d2:	4b29      	ldr	r3, [pc, #164]	; (8001178 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010d8:	bf1e      	ittt	ne
 80010da:	685a      	ldrne	r2, [r3, #4]
 80010dc:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80010e0:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e2:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010e4:	bf42      	ittt	mi
 80010e6:	685a      	ldrmi	r2, [r3, #4]
 80010e8:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80010ec:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	68a0      	ldr	r0, [r4, #8]
 80010f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010f6:	4302      	orrs	r2, r0
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	e7b8      	b.n	800106e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fc:	6862      	ldr	r2, [r4, #4]
 80010fe:	4e1e      	ldr	r6, [pc, #120]	; (8001178 <HAL_RCC_ClockConfig+0x12c>)
 8001100:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001104:	d11b      	bne.n	800113e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110a:	d0a4      	beq.n	8001056 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110c:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	4313      	orrs	r3, r2
 8001118:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800111a:	f7ff fa25 	bl	8000568 <HAL_GetTick>
 800111e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001120:	6873      	ldr	r3, [r6, #4]
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	f003 030c 	and.w	r3, r3, #12
 8001128:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800112c:	d0a1      	beq.n	8001072 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112e:	f7ff fa1b 	bl	8000568 <HAL_GetTick>
 8001132:	1bc0      	subs	r0, r0, r7
 8001134:	4540      	cmp	r0, r8
 8001136:	d9f3      	bls.n	8001120 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001138:	2003      	movs	r0, #3
}
 800113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113e:	2a02      	cmp	r2, #2
 8001140:	d102      	bne.n	8001148 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001142:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001146:	e7e0      	b.n	800110a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	f013 0f02 	tst.w	r3, #2
 800114c:	e7dd      	b.n	800110a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	f023 0307 	bic.w	r3, r3, #7
 8001154:	432b      	orrs	r3, r5
 8001156:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	429d      	cmp	r5, r3
 8001160:	f47f af79 	bne.w	8001056 <HAL_RCC_ClockConfig+0xa>
 8001164:	e78b      	b.n	800107e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001166:	686b      	ldr	r3, [r5, #4]
 8001168:	68e1      	ldr	r1, [r4, #12]
 800116a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800116e:	430b      	orrs	r3, r1
 8001170:	606b      	str	r3, [r5, #4]
 8001172:	e789      	b.n	8001088 <HAL_RCC_ClockConfig+0x3c>
 8001174:	40022000 	.word	0x40022000
 8001178:	40021000 	.word	0x40021000
 800117c:	08002162 	.word	0x08002162
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008

08001188 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <HAL_RCC_GetPCLK1Freq+0x14>)
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001196:	6810      	ldr	r0, [r2, #0]
}
 8001198:	40d8      	lsrs	r0, r3
 800119a:	4770      	bx	lr
 800119c:	40021000 	.word	0x40021000
 80011a0:	08002172 	.word	0x08002172
 80011a4:	20000000 	.word	0x20000000

080011a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011a8:	6803      	ldr	r3, [r0, #0]
{
 80011aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011ae:	07d9      	lsls	r1, r3, #31
{
 80011b0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011b2:	d520      	bpl.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b4:	4c35      	ldr	r4, [pc, #212]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011b6:	69e3      	ldr	r3, [r4, #28]
 80011b8:	00da      	lsls	r2, r3, #3
 80011ba:	d432      	bmi.n	8001222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80011bc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	69e3      	ldr	r3, [r4, #28]
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	61e3      	str	r3, [r4, #28]
 80011c6:	69e3      	ldr	r3, [r4, #28]
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4e2f      	ldr	r6, [pc, #188]	; (8001290 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80011d2:	6833      	ldr	r3, [r6, #0]
 80011d4:	05db      	lsls	r3, r3, #23
 80011d6:	d526      	bpl.n	8001226 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011d8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011de:	d136      	bne.n	800124e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011e0:	6a23      	ldr	r3, [r4, #32]
 80011e2:	686a      	ldr	r2, [r5, #4]
 80011e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011e8:	4313      	orrs	r3, r2
 80011ea:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011ec:	b11f      	cbz	r7, 80011f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ee:	69e3      	ldr	r3, [r4, #28]
 80011f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011f6:	6828      	ldr	r0, [r5, #0]
 80011f8:	0783      	lsls	r3, r0, #30
 80011fa:	d506      	bpl.n	800120a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011fc:	4a23      	ldr	r2, [pc, #140]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011fe:	68a9      	ldr	r1, [r5, #8]
 8001200:	6853      	ldr	r3, [r2, #4]
 8001202:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001206:	430b      	orrs	r3, r1
 8001208:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800120a:	f010 0010 	ands.w	r0, r0, #16
 800120e:	d01b      	beq.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001210:	4a1e      	ldr	r2, [pc, #120]	; (800128c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001212:	68e9      	ldr	r1, [r5, #12]
 8001214:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001216:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001218:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800121c:	430b      	orrs	r3, r1
 800121e:	6053      	str	r3, [r2, #4]
 8001220:	e012      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2700      	movs	r7, #0
 8001224:	e7d4      	b.n	80011d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	6833      	ldr	r3, [r6, #0]
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800122e:	f7ff f99b 	bl	8000568 <HAL_GetTick>
 8001232:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	05d8      	lsls	r0, r3, #23
 8001238:	d4ce      	bmi.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123a:	f7ff f995 	bl	8000568 <HAL_GetTick>
 800123e:	eba0 0008 	sub.w	r0, r0, r8
 8001242:	2864      	cmp	r0, #100	; 0x64
 8001244:	d9f6      	bls.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001246:	2003      	movs	r0, #3
}
 8001248:	b002      	add	sp, #8
 800124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800124e:	686a      	ldr	r2, [r5, #4]
 8001250:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001254:	4293      	cmp	r3, r2
 8001256:	d0c3      	beq.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001258:	2001      	movs	r0, #1
 800125a:	4a0e      	ldr	r2, [pc, #56]	; (8001294 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800125c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800125e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001260:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001262:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001266:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001268:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800126a:	07d9      	lsls	r1, r3, #31
 800126c:	d5b8      	bpl.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800126e:	f7ff f97b 	bl	8000568 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001276:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001278:	6a23      	ldr	r3, [r4, #32]
 800127a:	079a      	lsls	r2, r3, #30
 800127c:	d4b0      	bmi.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff f973 	bl	8000568 <HAL_GetTick>
 8001282:	1b80      	subs	r0, r0, r6
 8001284:	4540      	cmp	r0, r8
 8001286:	d9f7      	bls.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001288:	e7dd      	b.n	8001246 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	42420440 	.word	0x42420440

08001298 <SPI_WaitFlagStateUntilTimeout.constprop.8>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129a:	4604      	mov	r4, r0
 800129c:	460e      	mov	r6, r1
 800129e:	4615      	mov	r5, r2
 80012a0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80012a2:	6821      	ldr	r1, [r4, #0]
 80012a4:	688a      	ldr	r2, [r1, #8]
 80012a6:	ea36 0302 	bics.w	r3, r6, r2
 80012aa:	d001      	beq.n	80012b0 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80012ac:	2000      	movs	r0, #0
}
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012b0:	1c6b      	adds	r3, r5, #1
 80012b2:	d0f7      	beq.n	80012a4 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80012b4:	f7ff f958 	bl	8000568 <HAL_GetTick>
 80012b8:	1bc0      	subs	r0, r0, r7
 80012ba:	4285      	cmp	r5, r0
 80012bc:	d8f1      	bhi.n	80012a2 <SPI_WaitFlagStateUntilTimeout.constprop.8+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80012c6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012c8:	6862      	ldr	r2, [r4, #4]
 80012ca:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80012ce:	d10a      	bne.n	80012e6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
 80012d0:	68a2      	ldr	r2, [r4, #8]
 80012d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012d6:	d002      	beq.n	80012de <SPI_WaitFlagStateUntilTimeout.constprop.8+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80012d8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80012dc:	d103      	bne.n	80012e6 <SPI_WaitFlagStateUntilTimeout.constprop.8+0x4e>
          __HAL_SPI_DISABLE(hspi);
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80012e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80012e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80012ec:	d107      	bne.n	80012fe <SPI_WaitFlagStateUntilTimeout.constprop.8+0x66>
          SPI_RESET_CRC(hspi);
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012fc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80012fe:	2301      	movs	r3, #1
 8001300:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001304:	2300      	movs	r3, #0
 8001306:	2003      	movs	r0, #3
 8001308:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800130e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800130e:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001310:	4613      	mov	r3, r2
 8001312:	460a      	mov	r2, r1
 8001314:	2180      	movs	r1, #128	; 0x80
{
 8001316:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001318:	f7ff ffbe 	bl	8001298 <SPI_WaitFlagStateUntilTimeout.constprop.8>
 800131c:	b120      	cbz	r0, 8001328 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800131e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001320:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001328:	bd10      	pop	{r4, pc}

0800132a <HAL_SPI_Init>:
{
 800132a:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800132c:	4604      	mov	r4, r0
 800132e:	2800      	cmp	r0, #0
 8001330:	d034      	beq.n	800139c <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001336:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800133a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800133e:	b91b      	cbnz	r3, 8001348 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001340:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001344:	f7ff f876 	bl	8000434 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001348:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800134a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800134c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001350:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001352:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001358:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800135a:	6863      	ldr	r3, [r4, #4]
 800135c:	69a1      	ldr	r1, [r4, #24]
 800135e:	4303      	orrs	r3, r0
 8001360:	68e0      	ldr	r0, [r4, #12]
 8001362:	4303      	orrs	r3, r0
 8001364:	6920      	ldr	r0, [r4, #16]
 8001366:	4303      	orrs	r3, r0
 8001368:	6960      	ldr	r0, [r4, #20]
 800136a:	4303      	orrs	r3, r0
 800136c:	69e0      	ldr	r0, [r4, #28]
 800136e:	4303      	orrs	r3, r0
 8001370:	6a20      	ldr	r0, [r4, #32]
 8001372:	4303      	orrs	r3, r0
 8001374:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001376:	4303      	orrs	r3, r0
 8001378:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800137c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800137e:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001380:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001384:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001386:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001388:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800138a:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800138c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001390:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001392:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001394:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001396:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 800139a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
}
 800139e:	bd10      	pop	{r4, pc}

080013a0 <HAL_SPI_TransmitReceive>:
{
 80013a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013a4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80013a6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80013aa:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80013ac:	2b01      	cmp	r3, #1
{
 80013ae:	460d      	mov	r5, r1
 80013b0:	4691      	mov	r9, r2
 80013b2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80013b4:	f000 80e2 	beq.w	800157c <HAL_SPI_TransmitReceive+0x1dc>
 80013b8:	2301      	movs	r3, #1
 80013ba:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80013be:	f7ff f8d3 	bl	8000568 <HAL_GetTick>
  tmp_state           = hspi->State;
 80013c2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80013c6:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 80013c8:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80013ca:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80013cc:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80013ce:	d00a      	beq.n	80013e6 <HAL_SPI_TransmitReceive+0x46>
 80013d0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80013d4:	f040 80d0 	bne.w	8001578 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80013d8:	68a0      	ldr	r0, [r4, #8]
 80013da:	2800      	cmp	r0, #0
 80013dc:	f040 80cc 	bne.w	8001578 <HAL_SPI_TransmitReceive+0x1d8>
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	f040 80c9 	bne.w	8001578 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80013e6:	2d00      	cmp	r5, #0
 80013e8:	f000 80c4 	beq.w	8001574 <HAL_SPI_TransmitReceive+0x1d4>
 80013ec:	f1b9 0f00 	cmp.w	r9, #0
 80013f0:	f000 80c0 	beq.w	8001574 <HAL_SPI_TransmitReceive+0x1d4>
 80013f4:	2e00      	cmp	r6, #0
 80013f6:	f000 80bd 	beq.w	8001574 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80013fa:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80013fe:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001402:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001404:	bf1c      	itt	ne
 8001406:	2305      	movne	r3, #5
 8001408:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800140c:	2300      	movs	r3, #0
 800140e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001410:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001412:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001414:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001416:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001418:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800141a:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800141c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800141e:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001420:	bf58      	it	pl
 8001422:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001424:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001426:	bf58      	it	pl
 8001428:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800142c:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800142e:	bf58      	it	pl
 8001430:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001432:	68e2      	ldr	r2, [r4, #12]
 8001434:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001438:	d158      	bne.n	80014ec <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800143a:	b109      	cbz	r1, 8001440 <HAL_SPI_TransmitReceive+0xa0>
 800143c:	2e01      	cmp	r6, #1
 800143e:	d107      	bne.n	8001450 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001440:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001444:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001446:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001448:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800144a:	3b01      	subs	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001450:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001452:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001454:	b29b      	uxth	r3, r3
 8001456:	b9ab      	cbnz	r3, 8001484 <HAL_SPI_TransmitReceive+0xe4>
 8001458:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800145a:	b29b      	uxth	r3, r3
 800145c:	b993      	cbnz	r3, 8001484 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800145e:	4642      	mov	r2, r8
 8001460:	4639      	mov	r1, r7
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff ff53 	bl	800130e <SPI_EndRxTxTransaction>
 8001468:	2800      	cmp	r0, #0
 800146a:	f040 8081 	bne.w	8001570 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800146e:	68a3      	ldr	r3, [r4, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d132      	bne.n	80014da <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001474:	6823      	ldr	r3, [r4, #0]
 8001476:	9001      	str	r0, [sp, #4]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	9201      	str	r2, [sp, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	9b01      	ldr	r3, [sp, #4]
 8001482:	e02a      	b.n	80014da <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001484:	6822      	ldr	r2, [r4, #0]
 8001486:	6893      	ldr	r3, [r2, #8]
 8001488:	0799      	lsls	r1, r3, #30
 800148a:	d50d      	bpl.n	80014a8 <HAL_SPI_TransmitReceive+0x108>
 800148c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800148e:	b29b      	uxth	r3, r3
 8001490:	b153      	cbz	r3, 80014a8 <HAL_SPI_TransmitReceive+0x108>
 8001492:	b14d      	cbz	r5, 80014a8 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8001494:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001496:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001498:	f833 1b02 	ldrh.w	r1, [r3], #2
 800149c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800149e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80014a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80014a8:	6893      	ldr	r3, [r2, #8]
 80014aa:	07db      	lsls	r3, r3, #31
 80014ac:	d50c      	bpl.n	80014c8 <HAL_SPI_TransmitReceive+0x128>
 80014ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b14b      	cbz	r3, 80014c8 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 80014b4:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80014b6:	68d2      	ldr	r2, [r2, #12]
 80014b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80014ba:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80014be:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80014c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014c2:	3b01      	subs	r3, #1
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80014c8:	f7ff f84e 	bl	8000568 <HAL_GetTick>
 80014cc:	eba0 0008 	sub.w	r0, r0, r8
 80014d0:	4287      	cmp	r7, r0
 80014d2:	d8be      	bhi.n	8001452 <HAL_SPI_TransmitReceive+0xb2>
 80014d4:	1c7e      	adds	r6, r7, #1
 80014d6:	d0bc      	beq.n	8001452 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 80014d8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80014da:	2301      	movs	r3, #1
 80014dc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80014e0:	2300      	movs	r3, #0
 80014e2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80014e6:	b003      	add	sp, #12
 80014e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80014ec:	b109      	cbz	r1, 80014f2 <HAL_SPI_TransmitReceive+0x152>
 80014ee:	2e01      	cmp	r6, #1
 80014f0:	d108      	bne.n	8001504 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014f2:	782a      	ldrb	r2, [r5, #0]
 80014f4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80014f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014f8:	3301      	adds	r3, #1
 80014fa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80014fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80014fe:	3b01      	subs	r3, #1
 8001500:	b29b      	uxth	r3, r3
 8001502:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001504:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001506:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001508:	b29b      	uxth	r3, r3
 800150a:	b91b      	cbnz	r3, 8001514 <HAL_SPI_TransmitReceive+0x174>
 800150c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800150e:	b29b      	uxth	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0a4      	beq.n	800145e <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	6893      	ldr	r3, [r2, #8]
 8001518:	0798      	lsls	r0, r3, #30
 800151a:	d50e      	bpl.n	800153a <HAL_SPI_TransmitReceive+0x19a>
 800151c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800151e:	b29b      	uxth	r3, r3
 8001520:	b15b      	cbz	r3, 800153a <HAL_SPI_TransmitReceive+0x19a>
 8001522:	b155      	cbz	r5, 800153a <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8001524:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001526:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800152c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800152e:	3301      	adds	r3, #1
 8001530:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001532:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001534:	3b01      	subs	r3, #1
 8001536:	b29b      	uxth	r3, r3
 8001538:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800153a:	6822      	ldr	r2, [r4, #0]
 800153c:	6893      	ldr	r3, [r2, #8]
 800153e:	07d9      	lsls	r1, r3, #31
 8001540:	d50d      	bpl.n	800155e <HAL_SPI_TransmitReceive+0x1be>
 8001542:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001544:	b29b      	uxth	r3, r3
 8001546:	b153      	cbz	r3, 800155e <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8001548:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800154a:	68d2      	ldr	r2, [r2, #12]
 800154c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800154e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001552:	3301      	adds	r3, #1
 8001554:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001556:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001558:	3b01      	subs	r3, #1
 800155a:	b29b      	uxth	r3, r3
 800155c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800155e:	f7ff f803 	bl	8000568 <HAL_GetTick>
 8001562:	eba0 0008 	sub.w	r0, r0, r8
 8001566:	4287      	cmp	r7, r0
 8001568:	d8cd      	bhi.n	8001506 <HAL_SPI_TransmitReceive+0x166>
 800156a:	1c7b      	adds	r3, r7, #1
 800156c:	d0cb      	beq.n	8001506 <HAL_SPI_TransmitReceive+0x166>
 800156e:	e7b3      	b.n	80014d8 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001570:	2320      	movs	r3, #32
 8001572:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001574:	2001      	movs	r0, #1
 8001576:	e7b0      	b.n	80014da <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8001578:	2002      	movs	r0, #2
 800157a:	e7ae      	b.n	80014da <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 800157c:	2002      	movs	r0, #2
 800157e:	e7b2      	b.n	80014e6 <HAL_SPI_TransmitReceive+0x146>

08001580 <NODE_init_node>:

	node_base = node_1;
}

NODE_PARKING *NODE_init_node(uint8_t node_id, uint64_t step_acl, uint64_t step_cl)
{
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	4606      	mov	r6, r0
	NODE_PARKING *node;
	node 				= (NODE_PARKING *)malloc(sizeof(NODE_PARKING));
 8001584:	2020      	movs	r0, #32
{
 8001586:	4614      	mov	r4, r2
 8001588:	461d      	mov	r5, r3
	node 				= (NODE_PARKING *)malloc(sizeof(NODE_PARKING));
 800158a:	f000 fcef 	bl	8001f6c <malloc>
	node->node_id 		= node_id;
	node->has_car 		= false;
 800158e:	2100      	movs	r1, #0
	node->node_id 		= node_id;
 8001590:	7146      	strb	r6, [r0, #5]
	node->step_acl 		= step_acl;
 8001592:	e9c0 4504 	strd	r4, r5, [r0, #16]
	node->step_cl 		= step_cl;
 8001596:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
	node->has_car 		= false;
 800159a:	7101      	strb	r1, [r0, #4]
	node->step_cl 		= step_cl;
 800159c:	e9c0 4502 	strd	r4, r5, [r0, #8]
	node->next 			= NULL;
 80015a0:	6181      	str	r1, [r0, #24]
	node->prev 			= NULL;
 80015a2:	61c1      	str	r1, [r0, #28]
	return node;
}
 80015a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080015a8 <NODE_init>:
{
 80015a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	node_1 = NODE_init_node(1, 200, 200);
 80015ac:	24c8      	movs	r4, #200	; 0xc8
 80015ae:	2500      	movs	r5, #0
 80015b0:	4622      	mov	r2, r4
 80015b2:	e9cd 4500 	strd	r4, r5, [sp]
 80015b6:	462b      	mov	r3, r5
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff ffe1 	bl	8001580 <NODE_init_node>
 80015be:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800164c <NODE_init+0xa4>
	node_2 = NODE_init_node(2, 200, 200);
 80015c2:	e9cd 4500 	strd	r4, r5, [sp]
	node_1 = NODE_init_node(1, 200, 200);
 80015c6:	f8c9 0000 	str.w	r0, [r9]
	node_2 = NODE_init_node(2, 200, 200);
 80015ca:	4622      	mov	r2, r4
 80015cc:	462b      	mov	r3, r5
 80015ce:	2002      	movs	r0, #2
 80015d0:	f7ff ffd6 	bl	8001580 <NODE_init_node>
 80015d4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001650 <NODE_init+0xa8>
	node_3 = NODE_init_node(3, 200, 200);
 80015d8:	e9cd 4500 	strd	r4, r5, [sp]
	node_2 = NODE_init_node(2, 200, 200);
 80015dc:	f8c8 0000 	str.w	r0, [r8]
	node_3 = NODE_init_node(3, 200, 200);
 80015e0:	4622      	mov	r2, r4
 80015e2:	462b      	mov	r3, r5
 80015e4:	2003      	movs	r0, #3
 80015e6:	f7ff ffcb 	bl	8001580 <NODE_init_node>
 80015ea:	4f14      	ldr	r7, [pc, #80]	; (800163c <NODE_init+0x94>)
	node_4 = NODE_init_node(4, 200, 200);
 80015ec:	4622      	mov	r2, r4
	node_3 = NODE_init_node(3, 200, 200);
 80015ee:	6038      	str	r0, [r7, #0]
	node_4 = NODE_init_node(4, 200, 200);
 80015f0:	462b      	mov	r3, r5
 80015f2:	e9cd 4500 	strd	r4, r5, [sp]
 80015f6:	2004      	movs	r0, #4
 80015f8:	f7ff ffc2 	bl	8001580 <NODE_init_node>
 80015fc:	4e10      	ldr	r6, [pc, #64]	; (8001640 <NODE_init+0x98>)
	node_5 = NODE_init_node(5, 200, 200);
 80015fe:	e9cd 4500 	strd	r4, r5, [sp]
	node_4 = NODE_init_node(4, 200, 200);
 8001602:	6030      	str	r0, [r6, #0]
	node_5 = NODE_init_node(5, 200, 200);
 8001604:	4622      	mov	r2, r4
 8001606:	462b      	mov	r3, r5
 8001608:	2005      	movs	r0, #5
 800160a:	f7ff ffb9 	bl	8001580 <NODE_init_node>
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <NODE_init+0x9c>)
	NODE_link(node_3, node_4, node_2);
 8001610:	6832      	ldr	r2, [r6, #0]
	NODE_link(node_1, node_2, node_5);
 8001612:	f8d8 4000 	ldr.w	r4, [r8]
	NODE_link(node_2, node_3, node_1);
 8001616:	6839      	ldr	r1, [r7, #0]
	node_5 = NODE_init_node(5, 200, 200);
 8001618:	6018      	str	r0, [r3, #0]
	NODE_link(node_1, node_2, node_5);
 800161a:	f8d9 3000 	ldr.w	r3, [r9]

void NODE_link(NODE_PARKING *node, NODE_PARKING *next, NODE_PARKING *prev)
{
	node->next 	= next;
 800161e:	619c      	str	r4, [r3, #24]
	node->prev	= prev;
 8001620:	61d8      	str	r0, [r3, #28]
	node->next 	= next;
 8001622:	61a1      	str	r1, [r4, #24]
	node->prev	= prev;
 8001624:	61e3      	str	r3, [r4, #28]
	node->next 	= next;
 8001626:	618a      	str	r2, [r1, #24]
	node->prev	= prev;
 8001628:	61cc      	str	r4, [r1, #28]
	node->next 	= next;
 800162a:	6190      	str	r0, [r2, #24]
	node->prev	= prev;
 800162c:	61d1      	str	r1, [r2, #28]
 800162e:	61c2      	str	r2, [r0, #28]
	node_base = node_1;
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <NODE_init+0xa0>)
	node->next 	= next;
 8001632:	6183      	str	r3, [r0, #24]
	node_base = node_1;
 8001634:	6013      	str	r3, [r2, #0]
}
 8001636:	b003      	add	sp, #12
 8001638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800163c:	20000158 	.word	0x20000158
 8001640:	2000015c 	.word	0x2000015c
 8001644:	20000154 	.word	0x20000154
 8001648:	20000144 	.word	0x20000144
 800164c:	20000160 	.word	0x20000160
 8001650:	20000150 	.word	0x20000150

08001654 <NODE_scan_empty>:
}

NODE_PARKING *NODE_scan_empty(NODE_PARKING *node_base, uint64_t *step, GPIO_PinState *dir)
{
 8001654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t count_node_clk;
	uint8_t count_node_aclk;
	NODE_PARKING *tmp_node_clk;
	NODE_PARKING *tmp_node_aclk;

	tmp_node_clk 	= node_base;
 8001658:	4603      	mov	r3, r0
	count_step_clk 	= 0;
	count_node_clk 	= 0;
	while(true == tmp_node_clk->has_car)
 800165a:	f04f 0c00 	mov.w	ip, #0
	count_step_clk 	= 0;
 800165e:	2600      	movs	r6, #0
 8001660:	2700      	movs	r7, #0
	while(true == tmp_node_clk->has_car)
 8001662:	f893 e004 	ldrb.w	lr, [r3, #4]
 8001666:	fa5f fa8c 	uxtb.w	sl, ip
 800166a:	f10c 0c01 	add.w	ip, ip, #1
 800166e:	f1be 0f00 	cmp.w	lr, #0
 8001672:	d110      	bne.n	8001696 <NODE_scan_empty+0x42>
 8001674:	2500      	movs	r5, #0
		tmp_node_clk 	= tmp_node_clk->next;
		count_step_clk 	+= tmp_node_clk->step_cl;
		count_node_clk++;
	}

	if(0 == count_node_clk)
 8001676:	f1ba 0f00 	cmp.w	sl, #0
 800167a:	d012      	beq.n	80016a2 <NODE_scan_empty+0x4e>
 800167c:	46a8      	mov	r8, r5
 800167e:	46a9      	mov	r9, r5
	}

	tmp_node_aclk 		= node_base;
	count_node_aclk		= 0;
	count_step_aclk		= 0;
	while(true == tmp_node_aclk->has_car)
 8001680:	7904      	ldrb	r4, [r0, #4]
 8001682:	fa5f f58e 	uxtb.w	r5, lr
 8001686:	f10e 0e01 	add.w	lr, lr, #1
 800168a:	b98c      	cbnz	r4, 80016b0 <NODE_scan_empty+0x5c>
		tmp_node_aclk 		= tmp_node_aclk->prev;
		count_step_aclk 	+= tmp_node_aclk->step_acl;
		count_node_aclk++;
	}

	if(count_node_aclk > count_node_clk)
 800168c:	45aa      	cmp	sl, r5
 800168e:	d217      	bcs.n	80016c0 <NODE_scan_empty+0x6c>
	{
		*step 	= count_step_clk;
 8001690:	e9c1 6700 	strd	r6, r7, [r1]
 8001694:	e007      	b.n	80016a6 <NODE_scan_empty+0x52>
		tmp_node_clk 	= tmp_node_clk->next;
 8001696:	699b      	ldr	r3, [r3, #24]
		count_step_clk 	+= tmp_node_clk->step_cl;
 8001698:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800169c:	1936      	adds	r6, r6, r4
 800169e:	416f      	adcs	r7, r5
 80016a0:	e7df      	b.n	8001662 <NODE_scan_empty+0xe>
		*step 	= 0;
 80016a2:	600d      	str	r5, [r1, #0]
 80016a4:	604d      	str	r5, [r1, #4]
		*dir	= ROTATE_CLOCKWISE;
 80016a6:	2101      	movs	r1, #1
 80016a8:	7011      	strb	r1, [r2, #0]
	{
		*step 	= count_step_aclk;
		*dir	= ROTATE_ANTI_CLOCKWISE;
		return tmp_node_aclk;
	}
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		tmp_node_aclk 		= tmp_node_aclk->prev;
 80016b0:	69c0      	ldr	r0, [r0, #28]
		count_step_aclk 	+= tmp_node_aclk->step_acl;
 80016b2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 80016b6:	eb18 0804 	adds.w	r8, r8, r4
 80016ba:	eb49 0905 	adc.w	r9, r9, r5
 80016be:	e7df      	b.n	8001680 <NODE_scan_empty+0x2c>
		*step 	= count_step_aclk;
 80016c0:	e9c1 8900 	strd	r8, r9, [r1]
		return tmp_node_aclk;
 80016c4:	4603      	mov	r3, r0
		*dir	= ROTATE_ANTI_CLOCKWISE;
 80016c6:	7014      	strb	r4, [r2, #0]
		return tmp_node_aclk;
 80016c8:	e7ef      	b.n	80016aa <NODE_scan_empty+0x56>

080016ca <NODE_scan_car>:

NODE_PARKING *NODE_scan_car(NODE_PARKING *node_base, const uint8_t *card_id, uint64_t *step, GPIO_PinState *dir)
{
 80016ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ce:	4690      	mov	r8, r2
 80016d0:	461f      	mov	r7, r3
	uint8_t count_node_aclk;
	NODE_PARKING *tmp_node_clk;
	NODE_PARKING *tmp_node_aclk;

	tmp_node_clk 	= node_base;
	count_step_clk 	= 0;
 80016d2:	2200      	movs	r2, #0
 80016d4:	2300      	movs	r3, #0
{
 80016d6:	4604      	mov	r4, r0
 80016d8:	4689      	mov	r9, r1
	tmp_node_clk 	= node_base;
 80016da:	4605      	mov	r5, r0
 80016dc:	f04f 0b00 	mov.w	fp, #0
{
 80016e0:	b085      	sub	sp, #20
	count_step_clk 	= 0;
 80016e2:	e9cd 2300 	strd	r2, r3, [sp]
	count_node_clk 	= 0;
	while(1)
	{
		if(true ==  tmp_node_clk->has_car)
 80016e6:	792b      	ldrb	r3, [r5, #4]
 80016e8:	fa5f fa8b 	uxtb.w	sl, fp
 80016ec:	b1fb      	cbz	r3, 800172e <NODE_scan_car+0x64>
		{
			if(memcmp(tmp_node_clk->card_id, card_id, CARD_ID_DATA_LEN) == 0)
 80016ee:	2205      	movs	r2, #5
 80016f0:	4649      	mov	r1, r9
 80016f2:	6828      	ldr	r0, [r5, #0]
 80016f4:	f000 fc4a 	bl	8001f8c <memcmp>
 80016f8:	b9c8      	cbnz	r0, 800172e <NODE_scan_car+0x64>
 80016fa:	2200      	movs	r2, #0
 80016fc:	2300      	movs	r3, #0
 80016fe:	4606      	mov	r6, r0
 8001700:	e9cd 2302 	strd	r2, r3, [sp, #8]
	tmp_node_aclk 		= node_base;
	count_node_aclk		= 0;
	count_step_aclk		= 0;
	while(1)
	{
		if(true ==  tmp_node_aclk->has_car)
 8001704:	7923      	ldrb	r3, [r4, #4]
 8001706:	fa5f fb86 	uxtb.w	fp, r6
 800170a:	b12b      	cbz	r3, 8001718 <NODE_scan_car+0x4e>
		{
			if(memcmp(tmp_node_aclk->card_id, card_id, CARD_ID_DATA_LEN) == 0)
 800170c:	2205      	movs	r2, #5
 800170e:	4649      	mov	r1, r9
 8001710:	6820      	ldr	r0, [r4, #0]
 8001712:	f000 fc3b 	bl	8001f8c <memcmp>
 8001716:	b1b0      	cbz	r0, 8001746 <NODE_scan_car+0x7c>
			{
				break;
			}
		}
		tmp_node_aclk 		= tmp_node_aclk->prev;
		count_step_aclk 	+= tmp_node_aclk->step_acl;
 8001718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		tmp_node_aclk 		= tmp_node_aclk->prev;
 800171c:	69e4      	ldr	r4, [r4, #28]
 800171e:	3601      	adds	r6, #1
		count_step_aclk 	+= tmp_node_aclk->step_acl;
 8001720:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8001724:	1880      	adds	r0, r0, r2
 8001726:	4159      	adcs	r1, r3
 8001728:	e9cd 0102 	strd	r0, r1, [sp, #8]
		if(true ==  tmp_node_aclk->has_car)
 800172c:	e7ea      	b.n	8001704 <NODE_scan_car+0x3a>
		tmp_node_clk 	= tmp_node_clk->next;
 800172e:	69ad      	ldr	r5, [r5, #24]
		count_step_clk 	+= tmp_node_clk->step_cl;
 8001730:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001734:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8001738:	1880      	adds	r0, r0, r2
 800173a:	4159      	adcs	r1, r3
 800173c:	e9cd 0100 	strd	r0, r1, [sp]
 8001740:	f10b 0b01 	add.w	fp, fp, #1
		if(true ==  tmp_node_clk->has_car)
 8001744:	e7cf      	b.n	80016e6 <NODE_scan_car+0x1c>
		count_node_aclk++;
	}


	if(count_node_aclk > count_node_clk)
 8001746:	45da      	cmp	sl, fp
 8001748:	d20a      	bcs.n	8001760 <NODE_scan_car+0x96>
	{
		*step 	= count_step_clk;
 800174a:	e89d 0018 	ldmia.w	sp, {r3, r4}
 800174e:	e888 0018 	stmia.w	r8, {r3, r4}
		*dir	= ROTATE_CLOCKWISE;
 8001752:	2301      	movs	r3, #1
		return tmp_node_clk;
 8001754:	462c      	mov	r4, r5
		*dir	= ROTATE_CLOCKWISE;
 8001756:	703b      	strb	r3, [r7, #0]
	{
		*step 	= count_step_aclk;
		*dir	= ROTATE_ANTI_CLOCKWISE;
		return tmp_node_aclk;
	}
}
 8001758:	4620      	mov	r0, r4
 800175a:	b005      	add	sp, #20
 800175c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*step 	= count_step_aclk;
 8001760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001764:	e9c8 2300 	strd	r2, r3, [r8]
		*dir	= ROTATE_ANTI_CLOCKWISE;
 8001768:	7038      	strb	r0, [r7, #0]
		return tmp_node_aclk;
 800176a:	e7f5      	b.n	8001758 <NODE_scan_car+0x8e>

0800176c <NODE_park_car>:

void NODE_park_car(NODE_PARKING *node, const uint8_t *card_id)
{
 800176c:	b538      	push	{r3, r4, r5, lr}
	node->has_car = true;
 800176e:	2301      	movs	r3, #1
{
 8001770:	4605      	mov	r5, r0
	node->has_car = true;
 8001772:	7103      	strb	r3, [r0, #4]
	node->card_id = (uint8_t *)malloc(CARD_ID_DATA_LEN);
 8001774:	2005      	movs	r0, #5
{
 8001776:	460c      	mov	r4, r1
	node->card_id = (uint8_t *)malloc(CARD_ID_DATA_LEN);
 8001778:	f000 fbf8 	bl	8001f6c <malloc>
 800177c:	4603      	mov	r3, r0
 800177e:	6028      	str	r0, [r5, #0]

	memcpy(node->card_id, card_id, CARD_ID_DATA_LEN);
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	7922      	ldrb	r2, [r4, #4]
 8001784:	6018      	str	r0, [r3, #0]
 8001786:	711a      	strb	r2, [r3, #4]
 8001788:	bd38      	pop	{r3, r4, r5, pc}
	...

0800178c <NODE_parking_car_proc>:
	GPIO_PinState dir;

//	uint8_t idx;

	tmp_node = node_base;
	count_step = 0;
 800178c:	2200      	movs	r2, #0
 800178e:	2300      	movs	r3, #0
{
 8001790:	b530      	push	{r4, r5, lr}
 8001792:	b085      	sub	sp, #20
	count_step = 0;
 8001794:	e9cd 2302 	strd	r2, r3, [sp, #8]
	dir = GPIO_PIN_RESET;
 8001798:	2300      	movs	r3, #0
	tmp_node = node_base;
 800179a:	4c0b      	ldr	r4, [pc, #44]	; (80017c8 <NODE_parking_car_proc+0x3c>)
	dir = GPIO_PIN_RESET;
 800179c:	aa04      	add	r2, sp, #16

	node_base = NODE_scan_empty(tmp_node, &count_step, &dir);
 800179e:	a902      	add	r1, sp, #8
{
 80017a0:	4605      	mov	r5, r0
	dir = GPIO_PIN_RESET;
 80017a2:	f802 3d09 	strb.w	r3, [r2, #-9]!
	node_base = NODE_scan_empty(tmp_node, &count_step, &dir);
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	f7ff ff54 	bl	8001654 <NODE_scan_empty>
	rotate_motor(dir, count_step);
 80017ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	node_base = NODE_scan_empty(tmp_node, &count_step, &dir);
 80017b0:	6020      	str	r0, [r4, #0]
	rotate_motor(dir, count_step);
 80017b2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80017b6:	f000 fb8b 	bl	8001ed0 <rotate_motor>
	NODE_park_car(node_base, card_id);
 80017ba:	4629      	mov	r1, r5
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	f7ff ffd5 	bl	800176c <NODE_park_car>
//		{
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//			HAL_Delay(200);
//		}
//	}
}
 80017c2:	b005      	add	sp, #20
 80017c4:	bd30      	pop	{r4, r5, pc}
 80017c6:	bf00      	nop
 80017c8:	20000144 	.word	0x20000144

080017cc <NODE_taking_car_proc>:
	NODE_PARKING *tmp_node;
	uint64_t count_step;
	GPIO_PinState dir;

	tmp_node = node_base;
	count_step = 0;
 80017cc:	2200      	movs	r2, #0
 80017ce:	2300      	movs	r3, #0
{
 80017d0:	b530      	push	{r4, r5, lr}
	dir = GPIO_PIN_RESET;
 80017d2:	2500      	movs	r5, #0
{
 80017d4:	b085      	sub	sp, #20
	tmp_node = node_base;
 80017d6:	4c0c      	ldr	r4, [pc, #48]	; (8001808 <NODE_taking_car_proc+0x3c>)
	count_step = 0;
 80017d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	dir = GPIO_PIN_RESET;
 80017dc:	ab04      	add	r3, sp, #16
	node_base = NODE_scan_car(tmp_node, card_id, &count_step, &dir);
 80017de:	4601      	mov	r1, r0
	dir = GPIO_PIN_RESET;
 80017e0:	f803 5d09 	strb.w	r5, [r3, #-9]!
	node_base = NODE_scan_car(tmp_node, card_id, &count_step, &dir);
 80017e4:	aa02      	add	r2, sp, #8
 80017e6:	6820      	ldr	r0, [r4, #0]
 80017e8:	f7ff ff6f 	bl	80016ca <NODE_scan_car>
	rotate_motor(dir, count_step);
 80017ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
	node_base = NODE_scan_car(tmp_node, card_id, &count_step, &dir);
 80017f0:	6020      	str	r0, [r4, #0]
	rotate_motor(dir, count_step);
 80017f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80017f6:	f000 fb6b 	bl	8001ed0 <rotate_motor>
	NODE_take_car(node_base, card_id);
 80017fa:	6823      	ldr	r3, [r4, #0]
	node->has_car = false;
 80017fc:	711d      	strb	r5, [r3, #4]
	free(node->card_id);
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f000 fbbc 	bl	8001f7c <free>
}
 8001804:	b005      	add	sp, #20
 8001806:	bd30      	pop	{r4, r5, pc}
 8001808:	20000144 	.word	0x20000144

0800180c <action_motor>:
	return false;
}


void action_motor(uint8_t action)
{
 800180c:	b510      	push	{r4, lr}
 800180e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(RELAY_ODOOR_GPIO_Port, RELAY_ODOOR_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001816:	4816      	ldr	r0, [pc, #88]	; (8001870 <action_motor+0x64>)
 8001818:	f7fe ffea 	bl	80007f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_CDOOR_GPIO_Port, RELAY_CDOOR_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	4813      	ldr	r0, [pc, #76]	; (8001870 <action_motor+0x64>)
 8001824:	f7fe ffe4 	bl	80007f0 <HAL_GPIO_WritePin>
	if(ACTION_OPEN_DOOR == action)
 8001828:	b9dc      	cbnz	r4, 8001862 <action_motor+0x56>
	{
		HAL_GPIO_WritePin(RELAY_CDOOR_GPIO_Port, RELAY_CDOOR_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
		HAL_Delay(2500);
	}
	else if(ACTION_CLOSE_DOOR == action)
	{
		HAL_GPIO_WritePin(RELAY_ODOOR_GPIO_Port, RELAY_ODOOR_Pin, GPIO_PIN_SET);
 8001830:	480f      	ldr	r0, [pc, #60]	; (8001870 <action_motor+0x64>)
 8001832:	f7fe ffdd 	bl	80007f0 <HAL_GPIO_WritePin>
		HAL_Delay(2500);
 8001836:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800183a:	f7fe fe9b 	bl	8000574 <HAL_Delay>
	}
	HAL_GPIO_WritePin(RELAY_ODOOR_GPIO_Port, RELAY_ODOOR_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001844:	480a      	ldr	r0, [pc, #40]	; (8001870 <action_motor+0x64>)
 8001846:	f7fe ffd3 	bl	80007f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RELAY_CDOOR_GPIO_Port, RELAY_CDOOR_Pin, GPIO_PIN_RESET);
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <action_motor+0x64>)
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001852:	f7fe ffcd 	bl	80007f0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
}
 8001856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(1000);
 800185a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800185e:	f7fe be89 	b.w	8000574 <HAL_Delay>
	else if(ACTION_CLOSE_DOOR == action)
 8001862:	2c01      	cmp	r4, #1
 8001864:	d1eb      	bne.n	800183e <action_motor+0x32>
		HAL_GPIO_WritePin(RELAY_ODOOR_GPIO_Port, RELAY_ODOOR_Pin, GPIO_PIN_SET);
 8001866:	4622      	mov	r2, r4
 8001868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186c:	e7e0      	b.n	8001830 <action_motor+0x24>
 800186e:	bf00      	nop
 8001870:	40010c00 	.word	0x40010c00

08001874 <GPIO_Init>:
#include "gpio_dev.h"

void GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	2210      	movs	r2, #16
{
 8001876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800187a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	eb0d 0002 	add.w	r0, sp, r2
 8001880:	2100      	movs	r1, #0
 8001882:	f000 fb92 	bl	8001faa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b44      	ldr	r3, [pc, #272]	; (8001998 <GPIO_Init+0x124>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 8001888:	4e44      	ldr	r6, [pc, #272]	; (800199c <GPIO_Init+0x128>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 800188c:	4f44      	ldr	r7, [pc, #272]	; (80019a0 <GPIO_Init+0x12c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	f042 0204 	orr.w	r2, r2, #4
 8001892:	619a      	str	r2, [r3, #24]
 8001894:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 8001896:	4630      	mov	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	f002 0204 	and.w	r2, r2, #4
 800189c:	9201      	str	r2, [sp, #4]
 800189e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	699a      	ldr	r2, [r3, #24]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018a2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80019a4 <GPIO_Init+0x130>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	f042 0208 	orr.w	r2, r2, #8
 80018aa:	619a      	str	r2, [r3, #24]
 80018ac:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 80018ae:	2116      	movs	r1, #22
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	f002 0208 	and.w	r2, r2, #8
 80018b4:	9202      	str	r2, [sp, #8]
 80018b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, COLOR_SS_S2_Pin|COLOR_SS_S1_Pin|COLOR_SS_S0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STEP_DRIVER_PIN_Pin DIR_DRIVER_PIN_Pin NSS_PIN_RC522_Pin COLOR_SS_S1_Pin */
  GPIO_InitStruct.Pin = STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin|COLOR_SS_S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	f042 0210 	orr.w	r2, r2, #16
 80018c0:	619a      	str	r2, [r3, #24]
 80018c2:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	9303      	str	r3, [sp, #12]
 80018cc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 80018ce:	f7fe ff8f 	bl	80007f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80018d2:	4638      	mov	r0, r7
 80018d4:	2200      	movs	r2, #0
 80018d6:	f24b 0120 	movw	r1, #45088	; 0xb020
 80018da:	f7fe ff89 	bl	80007f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018de:	4648      	mov	r0, r9
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e6:	f7fe ff83 	bl	80007f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, COLOR_SS_S2_Pin|COLOR_SS_S1_Pin|COLOR_SS_S0_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	4630      	mov	r0, r6
 80018ee:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80018f2:	f7fe ff7d 	bl	80007f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin|COLOR_SS_S1_Pin;
 80018f8:	f240 2316 	movw	r3, #534	; 0x216
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fc:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001900:	a904      	add	r1, sp, #16
 8001902:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin|COLOR_SS_S1_Pin;
 8001904:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	f7fe fe8d 	bl	800062c <HAL_GPIO_Init>

  /*Configure GPIO pins : JSW_H1_Pin JSW_L1_Pin JSW_H2_Pin JSW_L2_Pin
                           COLOR_SS_OUT_Pin */
  GPIO_InitStruct.Pin = JSW_H1_Pin|JSW_L1_Pin|JSW_H2_Pin|JSW_L2_Pin
 8001912:	f644 4303 	movw	r3, #19459	; 0x4c03
                          |COLOR_SS_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001916:	a904      	add	r1, sp, #16
 8001918:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = JSW_H1_Pin|JSW_L1_Pin|JSW_H2_Pin|JSW_L2_Pin
 800191a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f7fe fe84 	bl	800062c <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_ODOOR_Pin RELAY_CDOOR_Pin COLOR_SS_S3_Pin */
  GPIO_InitStruct.Pin = RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin;
 8001924:	f44f 4330 	mov.w	r3, #45056	; 0xb000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	a904      	add	r1, sp, #16
 800192a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin;
 800192c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192e:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	9505      	str	r5, [sp, #20]

  /*Configure GPIO pins : COLOR_SS_S2_Pin COLOR_SS_S0_Pin */
  GPIO_InitStruct.Pin = COLOR_SS_S2_Pin|COLOR_SS_S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f7fe fe77 	bl	800062c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = COLOR_SS_S2_Pin|COLOR_SS_S0_Pin;
 800193e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	a904      	add	r1, sp, #16
 8001944:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = COLOR_SS_S2_Pin|COLOR_SS_S0_Pin;
 8001946:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001948:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f7fe fe6c 	bl	800062c <HAL_GPIO_Init>

  /*Configure GPIO pins : PARKING_BT_Pin TAKE_BT_Pin */
  GPIO_InitStruct.Pin = PARKING_BT_Pin|TAKE_BT_Pin;
 8001954:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	a904      	add	r1, sp, #16
 800195a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = PARKING_BT_Pin|TAKE_BT_Pin;
 800195c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f7fe fe63 	bl	800062c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8001966:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001968:	a904      	add	r1, sp, #16
 800196a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 800196c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001976:	f7fe fe59 	bl	800062c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800197a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197e:	a904      	add	r1, sp, #16
 8001980:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001982:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001984:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198c:	f7fe fe4e 	bl	800062c <HAL_GPIO_Init>

}
 8001990:	b009      	add	sp, #36	; 0x24
 8001992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	40010800 	.word	0x40010800
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40011000 	.word	0x40011000

080019a8 <I2C_init>:
#include "i2c_dev.h"

static I2C_HandleTypeDef hi2c_ctrl;

void I2C_init(void)
{
 80019a8:	b508      	push	{r3, lr}
	hi2c_ctrl.Instance = I2C1;
 80019aa:	480c      	ldr	r0, [pc, #48]	; (80019dc <I2C_init+0x34>)
	hi2c_ctrl.Init.ClockSpeed = 100000;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <I2C_init+0x38>)
 80019ae:	f8df e034 	ldr.w	lr, [pc, #52]	; 80019e4 <I2C_init+0x3c>
	hi2c_ctrl.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c_ctrl.Init.OwnAddress1 = 0;
	hi2c_ctrl.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c_ctrl.Init.ClockSpeed = 100000;
 80019b6:	e880 4008 	stmia.w	r0, {r3, lr}
	hi2c_ctrl.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019ba:	2300      	movs	r3, #0
	hi2c_ctrl.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	6102      	str	r2, [r0, #16]
	hi2c_ctrl.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019be:	6083      	str	r3, [r0, #8]
	hi2c_ctrl.Init.OwnAddress1 = 0;
 80019c0:	60c3      	str	r3, [r0, #12]
	hi2c_ctrl.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c2:	6143      	str	r3, [r0, #20]
	hi2c_ctrl.Init.OwnAddress2 = 0;
 80019c4:	6183      	str	r3, [r0, #24]
	hi2c_ctrl.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c6:	61c3      	str	r3, [r0, #28]
	hi2c_ctrl.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c8:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c_ctrl) != HAL_OK)
 80019ca:	f7fe fff3 	bl	80009b4 <HAL_I2C_Init>
 80019ce:	b118      	cbz	r0, 80019d8 <I2C_init+0x30>
	{
		Error_Handler();
	}
}
 80019d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 80019d4:	f7fe bcfa 	b.w	80003cc <Error_Handler>
 80019d8:	bd08      	pop	{r3, pc}
 80019da:	bf00      	nop
 80019dc:	20000090 	.word	0x20000090
 80019e0:	40005400 	.word	0x40005400
 80019e4:	000186a0 	.word	0x000186a0

080019e8 <I2C_send_data>:

void I2C_send_data(uint8_t add_dev, uint8_t *data_t, uint8_t data_len)
{
	HAL_I2C_Master_Transmit(&hi2c_ctrl, add_dev, data_t, data_len, 100);
 80019e8:	2364      	movs	r3, #100	; 0x64
{
 80019ea:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Master_Transmit(&hi2c_ctrl, add_dev, data_t, data_len, 100);
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	460a      	mov	r2, r1
 80019f2:	4601      	mov	r1, r0
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <I2C_send_data+0x18>)
 80019f6:	f7ff f881 	bl	8000afc <HAL_I2C_Master_Transmit>
}
 80019fa:	b003      	add	sp, #12
 80019fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a00:	20000090 	.word	0x20000090

08001a04 <lcd_send_cmd>:
#include "lcd_i2c.h"

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001a04:	b507      	push	{r0, r1, r2, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001a06:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a0a:	f043 020c 	orr.w	r2, r3, #12
 8001a0e:	f88d 2004 	strb.w	r2, [sp, #4]
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001a12:	2204      	movs	r2, #4
	data_l = ((cmd<<4)&0xf0);
 8001a14:	0100      	lsls	r0, r0, #4
 8001a16:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	f88d 3005 	strb.w	r3, [sp, #5]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001a20:	f040 030c 	orr.w	r3, r0, #12
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001a24:	f040 0008 	orr.w	r0, r0, #8
 8001a28:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001a2c:	eb0d 0102 	add.w	r1, sp, r2
 8001a30:	204e      	movs	r0, #78	; 0x4e
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001a32:	f88d 3006 	strb.w	r3, [sp, #6]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001a36:	f7ff ffd7 	bl	80019e8 <I2C_send_data>
}
 8001a3a:	b003      	add	sp, #12
 8001a3c:	f85d fb04 	ldr.w	pc, [sp], #4

08001a40 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001a40:	b507      	push	{r0, r1, r2, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001a42:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001a46:	f043 020d 	orr.w	r2, r3, #13
 8001a4a:	f88d 2004 	strb.w	r2, [sp, #4]
	data_t[1] = data_u|0x09;  //en=0, rs=0
	data_t[2] = data_l|0x0D;  //en=1, rs=0
	data_t[3] = data_l|0x09;  //en=0, rs=0
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001a4e:	2204      	movs	r2, #4
	data_l = ((data<<4)&0xf0);
 8001a50:	0100      	lsls	r0, r0, #4
 8001a52:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001a54:	f043 0309 	orr.w	r3, r3, #9
 8001a58:	f88d 3005 	strb.w	r3, [sp, #5]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a5c:	f040 030d 	orr.w	r3, r0, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001a60:	f040 0009 	orr.w	r0, r0, #9
 8001a64:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001a68:	eb0d 0102 	add.w	r1, sp, r2
 8001a6c:	204e      	movs	r0, #78	; 0x4e
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001a6e:	f88d 3006 	strb.w	r3, [sp, #6]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001a72:	f7ff ffb9 	bl	80019e8 <I2C_send_data>
}
 8001a76:	b003      	add	sp, #12
 8001a78:	f85d fb04 	ldr.w	pc, [sp], #4

08001a7c <lcd_init>:

void lcd_init (void)
{
 8001a7c:	b508      	push	{r3, lr}
	I2C_init();
 8001a7e:	f7ff ff93 	bl	80019a8 <I2C_init>
	HAL_Delay(50);
 8001a82:	2032      	movs	r0, #50	; 0x32
 8001a84:	f7fe fd76 	bl	8000574 <HAL_Delay>
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001a88:	2033      	movs	r0, #51	; 0x33
 8001a8a:	f7ff ffbb 	bl	8001a04 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001a8e:	2032      	movs	r0, #50	; 0x32
 8001a90:	f7ff ffb8 	bl	8001a04 <lcd_send_cmd>
	HAL_Delay(50);
 8001a94:	2032      	movs	r0, #50	; 0x32
 8001a96:	f7fe fd6d 	bl	8000574 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001a9a:	2028      	movs	r0, #40	; 0x28
 8001a9c:	f7ff ffb2 	bl	8001a04 <lcd_send_cmd>
	HAL_Delay(50);
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f7fe fd67 	bl	8000574 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7ff ffac 	bl	8001a04 <lcd_send_cmd>
	HAL_Delay(50);
 8001aac:	2032      	movs	r0, #50	; 0x32
 8001aae:	f7fe fd61 	bl	8000574 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001ab2:	2006      	movs	r0, #6
 8001ab4:	f7ff ffa6 	bl	8001a04 <lcd_send_cmd>
	HAL_Delay(50);
 8001ab8:	2032      	movs	r0, #50	; 0x32
 8001aba:	f7fe fd5b 	bl	8000574 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8001abe:	200c      	movs	r0, #12
 8001ac0:	f7ff ffa0 	bl	8001a04 <lcd_send_cmd>
	HAL_Delay(50);
 8001ac4:	2032      	movs	r0, #50	; 0x32
 8001ac6:	f7fe fd55 	bl	8000574 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001aca:	2002      	movs	r0, #2
 8001acc:	f7ff ff9a 	bl	8001a04 <lcd_send_cmd>
	HAL_Delay(50);
 8001ad0:	2032      	movs	r0, #50	; 0x32
 8001ad2:	f7fe fd4f 	bl	8000574 <HAL_Delay>
	lcd_send_cmd (0x80);
}
 8001ad6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_cmd (0x80);
 8001ada:	2080      	movs	r0, #128	; 0x80
 8001adc:	f7ff bf92 	b.w	8001a04 <lcd_send_cmd>

08001ae0 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 8001ae4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001ae8:	b900      	cbnz	r0, 8001aec <lcd_send_string+0xc>
}
 8001aea:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 8001aec:	f7ff ffa8 	bl	8001a40 <lcd_send_data>
 8001af0:	e7f8      	b.n	8001ae4 <lcd_send_string+0x4>

08001af2 <lcd_goto_XY>:
}

void lcd_goto_XY (int row, int col)
{
	uint8_t pos_Addr;
	if(row == 1)
 8001af2:	2801      	cmp	r0, #1
	{
		pos_Addr = 0x80 + row - 1 + col;
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001af4:	bf15      	itete	ne
 8001af6:	f101 0040 	addne.w	r0, r1, #64	; 0x40
		pos_Addr = 0x80 + row - 1 + col;
 8001afa:	3980      	subeq	r1, #128	; 0x80
		pos_Addr = 0x80 | (0x40 + col);
 8001afc:	f060 007f 	ornne	r0, r0, #127	; 0x7f
		pos_Addr = 0x80 + row - 1 + col;
 8001b00:	b2c8      	uxtbeq	r0, r1
		pos_Addr = 0x80 | (0x40 + col);
 8001b02:	bf18      	it	ne
 8001b04:	b2c0      	uxtbne	r0, r0
	}
	lcd_send_cmd(pos_Addr);
 8001b06:	f7ff bf7d 	b.w	8001a04 <lcd_send_cmd>

08001b0a <MFRC522_WriteRegister>:


#include "rcc522.h"

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8001b0a:	0040      	lsls	r0, r0, #1
	SPI_write_reg(addr, val);
 8001b0c:	f000 007e 	and.w	r0, r0, #126	; 0x7e
 8001b10:	f000 b9ae 	b.w	8001e70 <SPI_write_reg>

08001b14 <MFRC522_ReadRegister>:
}

uint8_t MFRC522_ReadRegister(uint8_t addr) {
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8001b14:	0040      	lsls	r0, r0, #1
 8001b16:	f000 007e 	and.w	r0, r0, #126	; 0x7e
	val = SPI_read_reg(addr);
 8001b1a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001b1e:	f000 b9bf 	b.w	8001ea0 <SPI_read_reg>

08001b22 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8001b22:	b538      	push	{r3, r4, r5, lr}
 8001b24:	4605      	mov	r5, r0
 8001b26:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001b28:	f7ff fff4 	bl	8001b14 <MFRC522_ReadRegister>
 8001b2c:	ea40 0104 	orr.w	r1, r0, r4
 8001b30:	b2c9      	uxtb	r1, r1
 8001b32:	4628      	mov	r0, r5
}
 8001b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8001b38:	f7ff bfe7 	b.w	8001b0a <MFRC522_WriteRegister>

08001b3c <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8001b3c:	b538      	push	{r3, r4, r5, lr}
 8001b3e:	4605      	mov	r5, r0
 8001b40:	460c      	mov	r4, r1
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001b42:	f7ff ffe7 	bl	8001b14 <MFRC522_ReadRegister>
 8001b46:	ea20 0104 	bic.w	r1, r0, r4
 8001b4a:	b2c9      	uxtb	r1, r1
 8001b4c:	4628      	mov	r0, r5
}
 8001b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8001b52:	f7ff bfda 	b.w	8001b0a <MFRC522_WriteRegister>

08001b56 <MFRC522_ToCard>:
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
	return status;
}

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001b56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t waitIRq = 0x00;
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8001b5a:	280c      	cmp	r0, #12
uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8001b5c:	4681      	mov	r9, r0
 8001b5e:	460f      	mov	r7, r1
 8001b60:	4692      	mov	sl, r2
 8001b62:	461e      	mov	r6, r3
 8001b64:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	switch (command) {
 8001b68:	d03e      	beq.n	8001be8 <MFRC522_ToCard+0x92>
 8001b6a:	280e      	cmp	r0, #14
 8001b6c:	d03f      	beq.n	8001bee <MFRC522_ToCard+0x98>
	uint8_t waitIRq = 0x00;
 8001b6e:	2500      	movs	r5, #0
	uint8_t irqEn = 0x00;
 8001b70:	462c      	mov	r4, r5
	SPI_write_reg(addr, val);
 8001b72:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 8001b76:	2004      	movs	r0, #4
 8001b78:	f000 f97a 	bl	8001e70 <SPI_write_reg>
		default:
		break;
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	2004      	movs	r0, #4
 8001b80:	f7ff ffdc 	bl	8001b3c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	200a      	movs	r0, #10
 8001b88:	f7ff ffcb 	bl	8001b22 <MFRC522_SetBitMask>
	SPI_write_reg(addr, val);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f000 f96e 	bl	8001e70 <SPI_write_reg>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001b94:	46bb      	mov	fp, r7
 8001b96:	fa1f fa8a 	uxth.w	sl, sl
 8001b9a:	ebab 0307 	sub.w	r3, fp, r7
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	459a      	cmp	sl, r3
 8001ba2:	d827      	bhi.n	8001bf4 <MFRC522_ToCard+0x9e>
	SPI_write_reg(addr, val);
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f000 f962 	bl	8001e70 <SPI_write_reg>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts
 8001bac:	f1b9 0f0c 	cmp.w	r9, #12
 8001bb0:	d103      	bne.n	8001bba <MFRC522_ToCard+0x64>
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	200d      	movs	r0, #13
 8001bb6:	f7ff ffb4 	bl	8001b22 <MFRC522_SetBitMask>
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8001bba:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001bbe:	f045 0a01 	orr.w	sl, r5, #1
	val = SPI_read_reg(addr);
 8001bc2:	2088      	movs	r0, #136	; 0x88
 8001bc4:	f000 f96c 	bl	8001ea0 <SPI_read_reg>
		i--;
 8001bc8:	3f01      	subs	r7, #1
 8001bca:	b2bf      	uxth	r7, r7
	val = SPI_read_reg(addr);
 8001bcc:	4605      	mov	r5, r0
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001bce:	b117      	cbz	r7, 8001bd6 <MFRC522_ToCard+0x80>
 8001bd0:	ea10 0f0a 	tst.w	r0, sl
 8001bd4:	d0f5      	beq.n	8001bc2 <MFRC522_ToCard+0x6c>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	200d      	movs	r0, #13
 8001bda:	f7ff ffaf 	bl	8001b3c <MFRC522_ClearBitMask>

	if (i != 0)  {
 8001bde:	b97f      	cbnz	r7, 8001c00 <MFRC522_ToCard+0xaa>
	uint8_t status = MI_ERR;
 8001be0:	2502      	movs	r5, #2
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
			}
		} else status = MI_ERR;
	}
	return status;
}
 8001be2:	4628      	mov	r0, r5
 8001be4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			waitIRq = 0x30;
 8001be8:	2530      	movs	r5, #48	; 0x30
			irqEn = 0x77;
 8001bea:	2477      	movs	r4, #119	; 0x77
			break;
 8001bec:	e7c1      	b.n	8001b72 <MFRC522_ToCard+0x1c>
			waitIRq = 0x10;
 8001bee:	2510      	movs	r5, #16
			irqEn = 0x12;
 8001bf0:	2412      	movs	r4, #18
 8001bf2:	e7be      	b.n	8001b72 <MFRC522_ToCard+0x1c>
	SPI_write_reg(addr, val);
 8001bf4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8001bf8:	2012      	movs	r0, #18
 8001bfa:	f000 f939 	bl	8001e70 <SPI_write_reg>
 8001bfe:	e7cc      	b.n	8001b9a <MFRC522_ToCard+0x44>
	val = SPI_read_reg(addr);
 8001c00:	208c      	movs	r0, #140	; 0x8c
 8001c02:	f000 f94d 	bl	8001ea0 <SPI_read_reg>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8001c06:	f010 0f1b 	tst.w	r0, #27
 8001c0a:	d1e9      	bne.n	8001be0 <MFRC522_ToCard+0x8a>
			status = MI_OK;
 8001c0c:	f004 0401 	and.w	r4, r4, #1
			if (command == PCD_TRANSCEIVE) {
 8001c10:	f1b9 0f0c 	cmp.w	r9, #12
			status = MI_OK;
 8001c14:	ea05 0504 	and.w	r5, r5, r4
			if (command == PCD_TRANSCEIVE) {
 8001c18:	d1e3      	bne.n	8001be2 <MFRC522_ToCard+0x8c>
	val = SPI_read_reg(addr);
 8001c1a:	2094      	movs	r0, #148	; 0x94
 8001c1c:	f000 f940 	bl	8001ea0 <SPI_read_reg>
 8001c20:	4604      	mov	r4, r0
 8001c22:	2098      	movs	r0, #152	; 0x98
 8001c24:	f000 f93c 	bl	8001ea0 <SPI_read_reg>
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 8001c28:	f010 0007 	ands.w	r0, r0, #7
 8001c2c:	bf1b      	ittet	ne
 8001c2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001c32:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
 8001c36:	00e3      	lsleq	r3, r4, #3
 8001c38:	f8a8 0000 	strhne.w	r0, [r8]
 8001c3c:	bf08      	it	eq
 8001c3e:	f8a8 3000 	strheq.w	r3, [r8]
				if (n == 0) n = 1;
 8001c42:	b17c      	cbz	r4, 8001c64 <MFRC522_ToCard+0x10e>
 8001c44:	2c10      	cmp	r4, #16
 8001c46:	bf28      	it	cs
 8001c48:	2410      	movcs	r4, #16
 8001c4a:	b2e4      	uxtb	r4, r4
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001c4c:	4637      	mov	r7, r6
 8001c4e:	b2a4      	uxth	r4, r4
 8001c50:	1bbb      	subs	r3, r7, r6
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	429c      	cmp	r4, r3
 8001c56:	d9c4      	bls.n	8001be2 <MFRC522_ToCard+0x8c>
	val = SPI_read_reg(addr);
 8001c58:	2092      	movs	r0, #146	; 0x92
 8001c5a:	f000 f921 	bl	8001ea0 <SPI_read_reg>
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8001c5e:	f807 0b01 	strb.w	r0, [r7], #1
 8001c62:	e7f5      	b.n	8001c50 <MFRC522_ToCard+0xfa>
				if (n == 0) n = 1;
 8001c64:	2401      	movs	r4, #1
 8001c66:	e7f1      	b.n	8001c4c <MFRC522_ToCard+0xf6>

08001c68 <MFRC522_Request>:
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8001c68:	b530      	push	{r4, r5, lr}
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	b085      	sub	sp, #20
	SPI_write_reg(addr, val);
 8001c70:	2107      	movs	r1, #7
 8001c72:	201a      	movs	r0, #26
 8001c74:	f000 f8fc 	bl	8001e70 <SPI_write_reg>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c78:	f10d 030e 	add.w	r3, sp, #14
 8001c7c:	9300      	str	r3, [sp, #0]
	TagType[0] = reqMode;
 8001c7e:	7025      	strb	r5, [r4, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001c80:	4623      	mov	r3, r4
 8001c82:	2201      	movs	r2, #1
 8001c84:	4621      	mov	r1, r4
 8001c86:	200c      	movs	r0, #12
 8001c88:	f7ff ff65 	bl	8001b56 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001c8c:	b930      	cbnz	r0, 8001c9c <MFRC522_Request+0x34>
 8001c8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001c92:	2b10      	cmp	r3, #16
 8001c94:	bf18      	it	ne
 8001c96:	2002      	movne	r0, #2
}
 8001c98:	b005      	add	sp, #20
 8001c9a:	bd30      	pop	{r4, r5, pc}
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8001c9c:	2002      	movs	r0, #2
 8001c9e:	e7fb      	b.n	8001c98 <MFRC522_Request+0x30>

08001ca0 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001ca0:	b530      	push	{r4, r5, lr}
	SPI_write_reg(addr, val);
 8001ca2:	2100      	movs	r1, #0
uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	b085      	sub	sp, #20
	SPI_write_reg(addr, val);
 8001ca8:	201a      	movs	r0, #26
 8001caa:	f000 f8e1 	bl	8001e70 <SPI_write_reg>
	uint8_t i;
	uint8_t serNumCheck = 0;
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
	serNum[0] = PICC_ANTICOLL;
 8001cae:	2393      	movs	r3, #147	; 0x93
 8001cb0:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 8001cb2:	2320      	movs	r3, #32
 8001cb4:	7063      	strb	r3, [r4, #1]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001cb6:	f10d 030e 	add.w	r3, sp, #14
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	200c      	movs	r0, #12
 8001cc4:	f7ff ff47 	bl	8001b56 <MFRC522_ToCard>
	if (status == MI_OK) {
 8001cc8:	b960      	cbnz	r0, 8001ce4 <MFRC522_Anticoll+0x44>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	1e62      	subs	r2, r4, #1
 8001cce:	1ce1      	adds	r1, r4, #3
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 8001cd0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	ea83 0305 	eor.w	r3, r3, r5
 8001cda:	d1f9      	bne.n	8001cd0 <MFRC522_Anticoll+0x30>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 8001cdc:	7922      	ldrb	r2, [r4, #4]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	bf18      	it	ne
 8001ce2:	2002      	movne	r0, #2
	}
	return status;
}
 8001ce4:	b005      	add	sp, #20
 8001ce6:	bd30      	pop	{r4, r5, pc}

08001ce8 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cea:	4604      	mov	r4, r0
 8001cec:	460e      	mov	r6, r1
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001cee:	2005      	movs	r0, #5
 8001cf0:	2104      	movs	r1, #4
void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8001cf2:	4617      	mov	r7, r2
	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8001cf4:	f7ff ff22 	bl	8001b3c <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	200a      	movs	r0, #10
 8001cfc:	f7ff ff11 	bl	8001b22 <MFRC522_SetBitMask>
 8001d00:	3e01      	subs	r6, #1
 8001d02:	1e65      	subs	r5, r4, #1
 8001d04:	4434      	add	r4, r6
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8001d06:	42a5      	cmp	r5, r4
 8001d08:	d116      	bne.n	8001d38 <MFRC522_CalculateCRC+0x50>
	SPI_write_reg(addr, val);
 8001d0a:	2103      	movs	r1, #3
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f000 f8af 	bl	8001e70 <SPI_write_reg>
 8001d12:	24ff      	movs	r4, #255	; 0xff
	val = SPI_read_reg(addr);
 8001d14:	208a      	movs	r0, #138	; 0x8a
 8001d16:	3c01      	subs	r4, #1
 8001d18:	f000 f8c2 	bl	8001ea0 <SPI_read_reg>
	// Wait CRC calculation is complete
	i = 0xFF;
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
		i--;
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8001d1c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8001d20:	d001      	beq.n	8001d26 <MFRC522_CalculateCRC+0x3e>
 8001d22:	0743      	lsls	r3, r0, #29
 8001d24:	d5f6      	bpl.n	8001d14 <MFRC522_CalculateCRC+0x2c>
	val = SPI_read_reg(addr);
 8001d26:	20c4      	movs	r0, #196	; 0xc4
 8001d28:	f000 f8ba 	bl	8001ea0 <SPI_read_reg>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8001d2c:	7038      	strb	r0, [r7, #0]
	val = SPI_read_reg(addr);
 8001d2e:	20c2      	movs	r0, #194	; 0xc2
 8001d30:	f000 f8b6 	bl	8001ea0 <SPI_read_reg>
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8001d34:	7078      	strb	r0, [r7, #1]
 8001d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SPI_write_reg(addr, val);
 8001d38:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8001d3c:	2012      	movs	r0, #18
 8001d3e:	f000 f897 	bl	8001e70 <SPI_write_reg>
 8001d42:	e7e0      	b.n	8001d06 <MFRC522_CalculateCRC+0x1e>

08001d44 <MFRC522_Reset>:
 8001d44:	210f      	movs	r1, #15
 8001d46:	2002      	movs	r0, #2
 8001d48:	f000 b892 	b.w	8001e70 <SPI_write_reg>

08001d4c <MFRC522_AntennaOn>:

void MFRC522_Reset(void) {
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
}

void MFRC522_AntennaOn(void) {
 8001d4c:	b508      	push	{r3, lr}
	val = SPI_read_reg(addr);
 8001d4e:	20a8      	movs	r0, #168	; 0xa8
 8001d50:	f000 f8a6 	bl	8001ea0 <SPI_read_reg>
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001d54:	0783      	lsls	r3, r0, #30
 8001d56:	d105      	bne.n	8001d64 <MFRC522_AntennaOn+0x18>
}
 8001d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f7ff bedf 	b.w	8001b22 <MFRC522_SetBitMask>
 8001d64:	bd08      	pop	{r3, pc}

08001d66 <MFRC522_Init>:
void MFRC522_Init(void) {
 8001d66:	b508      	push	{r3, lr}
	SPI_INIT_project();
 8001d68:	f000 f84e 	bl	8001e08 <SPI_INIT_project>
	HAL_Delay(50);
 8001d6c:	2032      	movs	r0, #50	; 0x32
 8001d6e:	f7fe fc01 	bl	8000574 <HAL_Delay>
	MFRC522_Reset();
 8001d72:	f7ff ffe7 	bl	8001d44 <MFRC522_Reset>
	SPI_write_reg(addr, val);
 8001d76:	218d      	movs	r1, #141	; 0x8d
 8001d78:	2054      	movs	r0, #84	; 0x54
 8001d7a:	f000 f879 	bl	8001e70 <SPI_write_reg>
 8001d7e:	213e      	movs	r1, #62	; 0x3e
 8001d80:	2056      	movs	r0, #86	; 0x56
 8001d82:	f000 f875 	bl	8001e70 <SPI_write_reg>
 8001d86:	211e      	movs	r1, #30
 8001d88:	205a      	movs	r0, #90	; 0x5a
 8001d8a:	f000 f871 	bl	8001e70 <SPI_write_reg>
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2058      	movs	r0, #88	; 0x58
 8001d92:	f000 f86d 	bl	8001e70 <SPI_write_reg>
 8001d96:	2170      	movs	r1, #112	; 0x70
 8001d98:	204c      	movs	r0, #76	; 0x4c
 8001d9a:	f000 f869 	bl	8001e70 <SPI_write_reg>
 8001d9e:	2140      	movs	r1, #64	; 0x40
 8001da0:	202a      	movs	r0, #42	; 0x2a
 8001da2:	f000 f865 	bl	8001e70 <SPI_write_reg>
 8001da6:	213d      	movs	r1, #61	; 0x3d
 8001da8:	2022      	movs	r0, #34	; 0x22
 8001daa:	f000 f861 	bl	8001e70 <SPI_write_reg>
}
 8001dae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MFRC522_AntennaOn();																		// Open the antenna
 8001db2:	f7ff bfcb 	b.w	8001d4c <MFRC522_AntennaOn>

08001db6 <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 8001db6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 8001db8:	2350      	movs	r3, #80	; 0x50
 8001dba:	f88d 300c 	strb.w	r3, [sp, #12]
	buff[1] = 0;
 8001dbe:	2300      	movs	r3, #0
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001dc0:	f10d 020e 	add.w	r2, sp, #14
 8001dc4:	a803      	add	r0, sp, #12
 8001dc6:	2102      	movs	r1, #2
	buff[1] = 0;
 8001dc8:	f88d 300d 	strb.w	r3, [sp, #13]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 8001dcc:	f7ff ff8c 	bl	8001ce8 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8001dd0:	f10d 030a 	add.w	r3, sp, #10
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	ab03      	add	r3, sp, #12
 8001dd8:	2204      	movs	r2, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	200c      	movs	r0, #12
 8001dde:	f7ff feba 	bl	8001b56 <MFRC522_ToCard>
}
 8001de2:	b005      	add	sp, #20
 8001de4:	f85d fb04 	ldr.w	pc, [sp], #4

08001de8 <MFRC522_Check>:
uint8_t MFRC522_Check(uint8_t* id) {
 8001de8:	b538      	push	{r3, r4, r5, lr}
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8001dea:	4601      	mov	r1, r0
uint8_t MFRC522_Check(uint8_t* id) {
 8001dec:	4605      	mov	r5, r0
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8001dee:	2026      	movs	r0, #38	; 0x26
 8001df0:	f7ff ff3a 	bl	8001c68 <MFRC522_Request>
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8001df4:	4604      	mov	r4, r0
 8001df6:	b918      	cbnz	r0, 8001e00 <MFRC522_Check+0x18>
 8001df8:	4628      	mov	r0, r5
 8001dfa:	f7ff ff51 	bl	8001ca0 <MFRC522_Anticoll>
 8001dfe:	4604      	mov	r4, r0
	MFRC522_Halt();																					// Command card into hibernation
 8001e00:	f7ff ffd9 	bl	8001db6 <MFRC522_Halt>
}
 8001e04:	4620      	mov	r0, r4
 8001e06:	bd38      	pop	{r3, r4, r5, pc}

08001e08 <SPI_INIT_project>:
static SPI_HandleTypeDef hspi_ctrl;

uint8_t SPI_send_byte(uint8_t data);

void SPI_INIT_project(void)
{
 8001e08:	b508      	push	{r3, lr}
	hspi_ctrl.Instance = SPI1;
	hspi_ctrl.Init.Mode = SPI_MODE_MASTER;
 8001e0a:	f44f 7e82 	mov.w	lr, #260	; 0x104
	hspi_ctrl.Instance = SPI1;
 8001e0e:	480d      	ldr	r0, [pc, #52]	; (8001e44 <SPI_INIT_project+0x3c>)
	hspi_ctrl.Init.Mode = SPI_MODE_MASTER;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <SPI_INIT_project+0x40>)
	hspi_ctrl.Init.Direction = SPI_DIRECTION_2LINES;
	hspi_ctrl.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi_ctrl.Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi_ctrl.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi_ctrl.Init.NSS = SPI_NSS_SOFT;
 8001e12:	f44f 7200 	mov.w	r2, #512	; 0x200
	hspi_ctrl.Init.Mode = SPI_MODE_MASTER;
 8001e16:	e880 4008 	stmia.w	r0, {r3, lr}
	hspi_ctrl.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1a:	2300      	movs	r3, #0
	hspi_ctrl.Init.NSS = SPI_NSS_SOFT;
 8001e1c:	6182      	str	r2, [r0, #24]
	hspi_ctrl.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	6083      	str	r3, [r0, #8]
	hspi_ctrl.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e20:	60c3      	str	r3, [r0, #12]
	hspi_ctrl.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e22:	6103      	str	r3, [r0, #16]
	hspi_ctrl.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e24:	6143      	str	r3, [r0, #20]
	hspi_ctrl.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e26:	2210      	movs	r2, #16
	hspi_ctrl.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e28:	6203      	str	r3, [r0, #32]
	hspi_ctrl.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e2a:	6243      	str	r3, [r0, #36]	; 0x24
	hspi_ctrl.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	6283      	str	r3, [r0, #40]	; 0x28
	hspi_ctrl.Init.CRCPolynomial = 10;
 8001e2e:	230a      	movs	r3, #10
	hspi_ctrl.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e30:	61c2      	str	r2, [r0, #28]
	hspi_ctrl.Init.CRCPolynomial = 10;
 8001e32:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi_ctrl) != HAL_OK)
 8001e34:	f7ff fa79 	bl	800132a <HAL_SPI_Init>
 8001e38:	b118      	cbz	r0, 8001e42 <SPI_INIT_project+0x3a>
	{
		Error_Handler();
	}
}
 8001e3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 8001e3e:	f7fe bac5 	b.w	80003cc <Error_Handler>
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	200000e4 	.word	0x200000e4
 8001e48:	40013000 	.word	0x40013000

08001e4c <SPI_send_byte>:


uint8_t SPI_send_byte(uint8_t data)
{
 8001e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	unsigned char writeCommand[1];
	unsigned char readValue[1];

	writeCommand[0] = data;
	HAL_SPI_TransmitReceive(&hspi_ctrl, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 100);
 8001e4e:	2364      	movs	r3, #100	; 0x64
	writeCommand[0] = data;
 8001e50:	f88d 0008 	strb.w	r0, [sp, #8]
	HAL_SPI_TransmitReceive(&hspi_ctrl, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 100);
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	aa03      	add	r2, sp, #12
 8001e58:	2301      	movs	r3, #1
 8001e5a:	a902      	add	r1, sp, #8
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <SPI_send_byte+0x20>)
 8001e5e:	f7ff fa9f 	bl	80013a0 <HAL_SPI_TransmitReceive>
	return readValue[0];
}
 8001e62:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001e66:	b005      	add	sp, #20
 8001e68:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e6c:	200000e4 	.word	0x200000e4

08001e70 <SPI_write_reg>:

void SPI_write_reg(uint8_t add_reg, uint8_t data)
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	4606      	mov	r6, r0
 8001e74:	460d      	mov	r5, r1
	ENA_SPI_COM_CTRL;
 8001e76:	4c09      	ldr	r4, [pc, #36]	; (8001e9c <SPI_write_reg+0x2c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7fe fcb7 	bl	80007f0 <HAL_GPIO_WritePin>
	(void)SPI_send_byte(add_reg);
 8001e82:	4630      	mov	r0, r6
 8001e84:	f7ff ffe2 	bl	8001e4c <SPI_send_byte>
	(void)SPI_send_byte(data);
 8001e88:	4628      	mov	r0, r5
 8001e8a:	f7ff ffdf 	bl	8001e4c <SPI_send_byte>
	DIS_SPI_COM_CTRL;
 8001e8e:	4620      	mov	r0, r4
}
 8001e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	DIS_SPI_COM_CTRL;
 8001e94:	2201      	movs	r2, #1
 8001e96:	2110      	movs	r1, #16
 8001e98:	f7fe bcaa 	b.w	80007f0 <HAL_GPIO_WritePin>
 8001e9c:	40010800 	.word	0x40010800

08001ea0 <SPI_read_reg>:

uint8_t SPI_read_reg(uint8_t add_reg)
{
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4605      	mov	r5, r0
	uint8_t ret_val;
	ENA_SPI_COM_CTRL;
 8001ea4:	4c09      	ldr	r4, [pc, #36]	; (8001ecc <SPI_read_reg+0x2c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7fe fca0 	bl	80007f0 <HAL_GPIO_WritePin>
	(void)SPI_send_byte(add_reg);
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	f7ff ffcb 	bl	8001e4c <SPI_send_byte>
	ret_val = SPI_send_byte(0x00);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f7ff ffc8 	bl	8001e4c <SPI_send_byte>
 8001ebc:	4605      	mov	r5, r0
	DIS_SPI_COM_CTRL;
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	2110      	movs	r1, #16
 8001ec4:	f7fe fc94 	bl	80007f0 <HAL_GPIO_WritePin>
	return ret_val;
}
 8001ec8:	4628      	mov	r0, r5
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
 8001ecc:	40010800 	.word	0x40010800

08001ed0 <rotate_motor>:
	HAL_GPIO_WritePin(STEP_DRIVER_PIN_GPIO_Port, STEP_DRIVER_PIN_Pin, GPIO_PIN_RESET);
    HAL_Delay(10);
}

void rotate_motor(GPIO_PinState dir, uint64_t step)
{
 8001ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t count;
	HAL_GPIO_WritePin(DIR_DRIVER_PIN_GPIO_Port, DIR_DRIVER_PIN_Pin, dir);
 8001ed2:	2104      	movs	r1, #4
{
 8001ed4:	4616      	mov	r6, r2
	HAL_GPIO_WritePin(DIR_DRIVER_PIN_GPIO_Port, DIR_DRIVER_PIN_Pin, dir);
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	480e      	ldr	r0, [pc, #56]	; (8001f14 <rotate_motor+0x44>)
{
 8001eda:	461f      	mov	r7, r3
	for (count = 0; count < step; ++count)
 8001edc:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(DIR_DRIVER_PIN_GPIO_Port, DIR_DRIVER_PIN_Pin, dir);
 8001ede:	f7fe fc87 	bl	80007f0 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(STEP_DRIVER_PIN_GPIO_Port, STEP_DRIVER_PIN_Pin, GPIO_PIN_SET);
 8001ee2:	4d0c      	ldr	r5, [pc, #48]	; (8001f14 <rotate_motor+0x44>)
	for (count = 0; count < step; ++count)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	42bb      	cmp	r3, r7
 8001ee8:	bf08      	it	eq
 8001eea:	42b4      	cmpeq	r4, r6
 8001eec:	d300      	bcc.n	8001ef0 <rotate_motor+0x20>
	    HAL_Delay(26);
		HAL_GPIO_WritePin(STEP_DRIVER_PIN_GPIO_Port, STEP_DRIVER_PIN_Pin, GPIO_PIN_RESET);
	    HAL_Delay(26);
	}

}
 8001eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(STEP_DRIVER_PIN_GPIO_Port, STEP_DRIVER_PIN_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f7fe fc7b 	bl	80007f0 <HAL_GPIO_WritePin>
	    HAL_Delay(26);
 8001efa:	201a      	movs	r0, #26
 8001efc:	f7fe fb3a 	bl	8000574 <HAL_Delay>
		HAL_GPIO_WritePin(STEP_DRIVER_PIN_GPIO_Port, STEP_DRIVER_PIN_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2102      	movs	r1, #2
 8001f04:	4628      	mov	r0, r5
 8001f06:	f7fe fc73 	bl	80007f0 <HAL_GPIO_WritePin>
	    HAL_Delay(26);
 8001f0a:	201a      	movs	r0, #26
 8001f0c:	f7fe fb32 	bl	8000574 <HAL_Delay>
	for (count = 0; count < step; ++count)
 8001f10:	3401      	adds	r4, #1
 8001f12:	e7e7      	b.n	8001ee4 <rotate_motor+0x14>
 8001f14:	40010800 	.word	0x40010800

08001f18 <__errno>:
 8001f18:	4b01      	ldr	r3, [pc, #4]	; (8001f20 <__errno+0x8>)
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	2000000c 	.word	0x2000000c

08001f24 <__libc_init_array>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	2500      	movs	r5, #0
 8001f28:	4e0c      	ldr	r6, [pc, #48]	; (8001f5c <__libc_init_array+0x38>)
 8001f2a:	4c0d      	ldr	r4, [pc, #52]	; (8001f60 <__libc_init_array+0x3c>)
 8001f2c:	1ba4      	subs	r4, r4, r6
 8001f2e:	10a4      	asrs	r4, r4, #2
 8001f30:	42a5      	cmp	r5, r4
 8001f32:	d109      	bne.n	8001f48 <__libc_init_array+0x24>
 8001f34:	f000 f8fe 	bl	8002134 <_init>
 8001f38:	2500      	movs	r5, #0
 8001f3a:	4e0a      	ldr	r6, [pc, #40]	; (8001f64 <__libc_init_array+0x40>)
 8001f3c:	4c0a      	ldr	r4, [pc, #40]	; (8001f68 <__libc_init_array+0x44>)
 8001f3e:	1ba4      	subs	r4, r4, r6
 8001f40:	10a4      	asrs	r4, r4, #2
 8001f42:	42a5      	cmp	r5, r4
 8001f44:	d105      	bne.n	8001f52 <__libc_init_array+0x2e>
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f4c:	4798      	blx	r3
 8001f4e:	3501      	adds	r5, #1
 8001f50:	e7ee      	b.n	8001f30 <__libc_init_array+0xc>
 8001f52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f56:	4798      	blx	r3
 8001f58:	3501      	adds	r5, #1
 8001f5a:	e7f2      	b.n	8001f42 <__libc_init_array+0x1e>
 8001f5c:	0800217c 	.word	0x0800217c
 8001f60:	0800217c 	.word	0x0800217c
 8001f64:	0800217c 	.word	0x0800217c
 8001f68:	08002180 	.word	0x08002180

08001f6c <malloc>:
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <malloc+0xc>)
 8001f6e:	4601      	mov	r1, r0
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	f000 b86f 	b.w	8002054 <_malloc_r>
 8001f76:	bf00      	nop
 8001f78:	2000000c 	.word	0x2000000c

08001f7c <free>:
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <free+0xc>)
 8001f7e:	4601      	mov	r1, r0
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	f000 b81b 	b.w	8001fbc <_free_r>
 8001f86:	bf00      	nop
 8001f88:	2000000c 	.word	0x2000000c

08001f8c <memcmp>:
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	3901      	subs	r1, #1
 8001f90:	4402      	add	r2, r0
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d101      	bne.n	8001f9a <memcmp+0xe>
 8001f96:	2000      	movs	r0, #0
 8001f98:	bd10      	pop	{r4, pc}
 8001f9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001f9e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8001fa2:	42a3      	cmp	r3, r4
 8001fa4:	d0f5      	beq.n	8001f92 <memcmp+0x6>
 8001fa6:	1b18      	subs	r0, r3, r4
 8001fa8:	bd10      	pop	{r4, pc}

08001faa <memset>:
 8001faa:	4603      	mov	r3, r0
 8001fac:	4402      	add	r2, r0
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d100      	bne.n	8001fb4 <memset+0xa>
 8001fb2:	4770      	bx	lr
 8001fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8001fb8:	e7f9      	b.n	8001fae <memset+0x4>
	...

08001fbc <_free_r>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	4605      	mov	r5, r0
 8001fc0:	2900      	cmp	r1, #0
 8001fc2:	d043      	beq.n	800204c <_free_r+0x90>
 8001fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fc8:	1f0c      	subs	r4, r1, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bfb8      	it	lt
 8001fce:	18e4      	addlt	r4, r4, r3
 8001fd0:	f000 f8ae 	bl	8002130 <__malloc_lock>
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <_free_r+0x94>)
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	4610      	mov	r0, r2
 8001fda:	b933      	cbnz	r3, 8001fea <_free_r+0x2e>
 8001fdc:	6063      	str	r3, [r4, #4]
 8001fde:	6014      	str	r4, [r2, #0]
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fe6:	f000 b8a4 	b.w	8002132 <__malloc_unlock>
 8001fea:	42a3      	cmp	r3, r4
 8001fec:	d90b      	bls.n	8002006 <_free_r+0x4a>
 8001fee:	6821      	ldr	r1, [r4, #0]
 8001ff0:	1862      	adds	r2, r4, r1
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	bf01      	itttt	eq
 8001ff6:	681a      	ldreq	r2, [r3, #0]
 8001ff8:	685b      	ldreq	r3, [r3, #4]
 8001ffa:	1852      	addeq	r2, r2, r1
 8001ffc:	6022      	streq	r2, [r4, #0]
 8001ffe:	6063      	str	r3, [r4, #4]
 8002000:	6004      	str	r4, [r0, #0]
 8002002:	e7ed      	b.n	8001fe0 <_free_r+0x24>
 8002004:	4613      	mov	r3, r2
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	b10a      	cbz	r2, 800200e <_free_r+0x52>
 800200a:	42a2      	cmp	r2, r4
 800200c:	d9fa      	bls.n	8002004 <_free_r+0x48>
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	1858      	adds	r0, r3, r1
 8002012:	42a0      	cmp	r0, r4
 8002014:	d10b      	bne.n	800202e <_free_r+0x72>
 8002016:	6820      	ldr	r0, [r4, #0]
 8002018:	4401      	add	r1, r0
 800201a:	1858      	adds	r0, r3, r1
 800201c:	4282      	cmp	r2, r0
 800201e:	6019      	str	r1, [r3, #0]
 8002020:	d1de      	bne.n	8001fe0 <_free_r+0x24>
 8002022:	6810      	ldr	r0, [r2, #0]
 8002024:	6852      	ldr	r2, [r2, #4]
 8002026:	4401      	add	r1, r0
 8002028:	6019      	str	r1, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e7d8      	b.n	8001fe0 <_free_r+0x24>
 800202e:	d902      	bls.n	8002036 <_free_r+0x7a>
 8002030:	230c      	movs	r3, #12
 8002032:	602b      	str	r3, [r5, #0]
 8002034:	e7d4      	b.n	8001fe0 <_free_r+0x24>
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	1821      	adds	r1, r4, r0
 800203a:	428a      	cmp	r2, r1
 800203c:	bf01      	itttt	eq
 800203e:	6811      	ldreq	r1, [r2, #0]
 8002040:	6852      	ldreq	r2, [r2, #4]
 8002042:	1809      	addeq	r1, r1, r0
 8002044:	6021      	streq	r1, [r4, #0]
 8002046:	6062      	str	r2, [r4, #4]
 8002048:	605c      	str	r4, [r3, #4]
 800204a:	e7c9      	b.n	8001fe0 <_free_r+0x24>
 800204c:	bd38      	pop	{r3, r4, r5, pc}
 800204e:	bf00      	nop
 8002050:	2000013c 	.word	0x2000013c

08002054 <_malloc_r>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	1ccd      	adds	r5, r1, #3
 8002058:	f025 0503 	bic.w	r5, r5, #3
 800205c:	3508      	adds	r5, #8
 800205e:	2d0c      	cmp	r5, #12
 8002060:	bf38      	it	cc
 8002062:	250c      	movcc	r5, #12
 8002064:	2d00      	cmp	r5, #0
 8002066:	4606      	mov	r6, r0
 8002068:	db01      	blt.n	800206e <_malloc_r+0x1a>
 800206a:	42a9      	cmp	r1, r5
 800206c:	d903      	bls.n	8002076 <_malloc_r+0x22>
 800206e:	230c      	movs	r3, #12
 8002070:	6033      	str	r3, [r6, #0]
 8002072:	2000      	movs	r0, #0
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	f000 f85b 	bl	8002130 <__malloc_lock>
 800207a:	4a23      	ldr	r2, [pc, #140]	; (8002108 <_malloc_r+0xb4>)
 800207c:	6814      	ldr	r4, [r2, #0]
 800207e:	4621      	mov	r1, r4
 8002080:	b991      	cbnz	r1, 80020a8 <_malloc_r+0x54>
 8002082:	4c22      	ldr	r4, [pc, #136]	; (800210c <_malloc_r+0xb8>)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	b91b      	cbnz	r3, 8002090 <_malloc_r+0x3c>
 8002088:	4630      	mov	r0, r6
 800208a:	f000 f841 	bl	8002110 <_sbrk_r>
 800208e:	6020      	str	r0, [r4, #0]
 8002090:	4629      	mov	r1, r5
 8002092:	4630      	mov	r0, r6
 8002094:	f000 f83c 	bl	8002110 <_sbrk_r>
 8002098:	1c43      	adds	r3, r0, #1
 800209a:	d126      	bne.n	80020ea <_malloc_r+0x96>
 800209c:	230c      	movs	r3, #12
 800209e:	4630      	mov	r0, r6
 80020a0:	6033      	str	r3, [r6, #0]
 80020a2:	f000 f846 	bl	8002132 <__malloc_unlock>
 80020a6:	e7e4      	b.n	8002072 <_malloc_r+0x1e>
 80020a8:	680b      	ldr	r3, [r1, #0]
 80020aa:	1b5b      	subs	r3, r3, r5
 80020ac:	d41a      	bmi.n	80020e4 <_malloc_r+0x90>
 80020ae:	2b0b      	cmp	r3, #11
 80020b0:	d90f      	bls.n	80020d2 <_malloc_r+0x7e>
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	18cc      	adds	r4, r1, r3
 80020b6:	50cd      	str	r5, [r1, r3]
 80020b8:	4630      	mov	r0, r6
 80020ba:	f000 f83a 	bl	8002132 <__malloc_unlock>
 80020be:	f104 000b 	add.w	r0, r4, #11
 80020c2:	1d23      	adds	r3, r4, #4
 80020c4:	f020 0007 	bic.w	r0, r0, #7
 80020c8:	1ac3      	subs	r3, r0, r3
 80020ca:	d01b      	beq.n	8002104 <_malloc_r+0xb0>
 80020cc:	425a      	negs	r2, r3
 80020ce:	50e2      	str	r2, [r4, r3]
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	428c      	cmp	r4, r1
 80020d4:	bf0b      	itete	eq
 80020d6:	6863      	ldreq	r3, [r4, #4]
 80020d8:	684b      	ldrne	r3, [r1, #4]
 80020da:	6013      	streq	r3, [r2, #0]
 80020dc:	6063      	strne	r3, [r4, #4]
 80020de:	bf18      	it	ne
 80020e0:	460c      	movne	r4, r1
 80020e2:	e7e9      	b.n	80020b8 <_malloc_r+0x64>
 80020e4:	460c      	mov	r4, r1
 80020e6:	6849      	ldr	r1, [r1, #4]
 80020e8:	e7ca      	b.n	8002080 <_malloc_r+0x2c>
 80020ea:	1cc4      	adds	r4, r0, #3
 80020ec:	f024 0403 	bic.w	r4, r4, #3
 80020f0:	42a0      	cmp	r0, r4
 80020f2:	d005      	beq.n	8002100 <_malloc_r+0xac>
 80020f4:	1a21      	subs	r1, r4, r0
 80020f6:	4630      	mov	r0, r6
 80020f8:	f000 f80a 	bl	8002110 <_sbrk_r>
 80020fc:	3001      	adds	r0, #1
 80020fe:	d0cd      	beq.n	800209c <_malloc_r+0x48>
 8002100:	6025      	str	r5, [r4, #0]
 8002102:	e7d9      	b.n	80020b8 <_malloc_r+0x64>
 8002104:	bd70      	pop	{r4, r5, r6, pc}
 8002106:	bf00      	nop
 8002108:	2000013c 	.word	0x2000013c
 800210c:	20000140 	.word	0x20000140

08002110 <_sbrk_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	2300      	movs	r3, #0
 8002114:	4c05      	ldr	r4, [pc, #20]	; (800212c <_sbrk_r+0x1c>)
 8002116:	4605      	mov	r5, r0
 8002118:	4608      	mov	r0, r1
 800211a:	6023      	str	r3, [r4, #0]
 800211c:	f7fe f83c 	bl	8000198 <_sbrk>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d102      	bne.n	800212a <_sbrk_r+0x1a>
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	b103      	cbz	r3, 800212a <_sbrk_r+0x1a>
 8002128:	602b      	str	r3, [r5, #0]
 800212a:	bd38      	pop	{r3, r4, r5, pc}
 800212c:	20000168 	.word	0x20000168

08002130 <__malloc_lock>:
 8002130:	4770      	bx	lr

08002132 <__malloc_unlock>:
 8002132:	4770      	bx	lr

08002134 <_init>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr

08002140 <_fini>:
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	bf00      	nop
 8002144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002146:	bc08      	pop	{r3}
 8002148:	469e      	mov	lr, r3
 800214a:	4770      	bx	lr
