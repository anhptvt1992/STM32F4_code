
AUTO_PARKING_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080022b8  080022b8  000122b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023a0  080023a0  000123a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080023a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000011c  20000070  08002414  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000018c  08002414  0002018c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000595e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00010862  00000000  00000000  000259f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024c4  00000000  00000000  00036259  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000680  00000000  00000000  00038720  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a78  00000000  00000000  00038da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004760  00000000  00000000  00039818  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b0b  00000000  00000000  0003df78  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00040a83  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000187c  00000000  00000000  00040b00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080022a0 	.word	0x080022a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080022a0 	.word	0x080022a0

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f000 f921 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 f963 	bl	8001440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 f885 	bl	8000288 <main>
  bx lr
 800017e:	4770      	bx	lr
  ldr r3, =_sidata
 8000180:	080023a4 	.word	0x080023a4
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800018c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000190:	2000018c 	.word	0x2000018c

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>

08000196 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000196:	b570      	push	{r4, r5, r6, lr}
 8000198:	460e      	mov	r6, r1
 800019a:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800019c:	460c      	mov	r4, r1
 800019e:	1ba3      	subs	r3, r4, r6
 80001a0:	429d      	cmp	r5, r3
 80001a2:	dc01      	bgt.n	80001a8 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80001a4:	4628      	mov	r0, r5
 80001a6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80001a8:	f3af 8000 	nop.w
 80001ac:	f804 0b01 	strb.w	r0, [r4], #1
 80001b0:	e7f5      	b.n	800019e <_read+0x8>

080001b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80001b2:	b570      	push	{r4, r5, r6, lr}
 80001b4:	460e      	mov	r6, r1
 80001b6:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001b8:	460c      	mov	r4, r1
 80001ba:	1ba3      	subs	r3, r4, r6
 80001bc:	429d      	cmp	r5, r3
 80001be:	dc01      	bgt.n	80001c4 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80001c0:	4628      	mov	r0, r5
 80001c2:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80001c4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80001c8:	f3af 8000 	nop.w
 80001cc:	e7f5      	b.n	80001ba <_write+0x8>
	...

080001d0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80001d0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80001d2:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <_sbrk+0x2c>)
{
 80001d4:	4602      	mov	r2, r0
	if (heap_end == 0)
 80001d6:	6819      	ldr	r1, [r3, #0]
 80001d8:	b909      	cbnz	r1, 80001de <_sbrk+0xe>
		heap_end = &end;
 80001da:	4909      	ldr	r1, [pc, #36]	; (8000200 <_sbrk+0x30>)
 80001dc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80001de:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80001e0:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80001e2:	4402      	add	r2, r0
 80001e4:	428a      	cmp	r2, r1
 80001e6:	d906      	bls.n	80001f6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80001e8:	f001 f924 	bl	8001434 <__errno>
 80001ec:	230c      	movs	r3, #12
 80001ee:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80001f6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80001f8:	bd08      	pop	{r3, pc}
 80001fa:	bf00      	nop
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	2000018c 	.word	0x2000018c

08000204 <_close>:

int _close(int file)
{
	return -1;
}
 8000204:	f04f 30ff 	mov.w	r0, #4294967295
 8000208:	4770      	bx	lr

0800020a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800020a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800020e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000210:	604b      	str	r3, [r1, #4]
}
 8000212:	4770      	bx	lr

08000214 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000214:	2001      	movs	r0, #1
 8000216:	4770      	bx	lr

08000218 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000218:	2000      	movs	r0, #0
 800021a:	4770      	bx	lr

0800021c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021c:	2228      	movs	r2, #40	; 0x28
{
 800021e:	b530      	push	{r4, r5, lr}
 8000220:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	eb0d 0002 	add.w	r0, sp, r2
 8000226:	2100      	movs	r1, #0
 8000228:	f001 f92e 	bl	8001488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022e:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	eb0d 0002 	add.w	r0, sp, r2
 8000234:	2100      	movs	r1, #0
 8000236:	f001 f927 	bl	8001488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023a:	462a      	mov	r2, r5
 800023c:	2100      	movs	r1, #0
 800023e:	a801      	add	r0, sp, #4
 8000240:	f001 f922 	bl	8001488 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000246:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000248:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000250:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000252:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000254:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f000 fcc0 	bl	8000bdc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000262:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	4621      	mov	r1, r4
 8000268:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000270:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	f000 fe8d 	bl	8000f90 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800027c:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800027e:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000280:	f000 ff34 	bl	80010ec <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000284:	b015      	add	sp, #84	; 0x54
 8000286:	bd30      	pop	{r4, r5, pc}

08000288 <main>:
{
 8000288:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 800028a:	f000 f8df 	bl	800044c <HAL_Init>
  SystemClock_Config();
 800028e:	f7ff ffc5 	bl	800021c <SystemClock_Config>
  GPIO_Init();
 8000292:	f000 ffa3 	bl	80011dc <GPIO_Init>
  lcd_init();
 8000296:	f001 f885 	bl	80013a4 <lcd_init>
  lcd_goto_XY(1,2);
 800029a:	2102      	movs	r1, #2
 800029c:	2001      	movs	r0, #1
 800029e:	f001 f8bc 	bl	800141a <lcd_goto_XY>
  lcd_send_string("Hello");
 80002a2:	4816      	ldr	r0, [pc, #88]	; (80002fc <main+0x74>)
 80002a4:	f001 f8b0 	bl	8001408 <lcd_send_string>
  HAL_Delay(1000);
 80002a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ac:	f000 f8f2 	bl	8000494 <HAL_Delay>
  memset(card_id, 0, 5);
 80002b0:	2300      	movs	r3, #0
 80002b2:	4c13      	ldr	r4, [pc, #76]	; (8000300 <main+0x78>)
  HAL_Delay(500);
 80002b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  memset(card_id, 0, 5);
 80002b8:	6023      	str	r3, [r4, #0]
 80002ba:	7123      	strb	r3, [r4, #4]
  HAL_Delay(500);
 80002bc:	f000 f8ea 	bl	8000494 <HAL_Delay>
	  lcd_send_string("Card ID is:");
 80002c0:	4d10      	ldr	r5, [pc, #64]	; (8000304 <main+0x7c>)
	  lcd_goto_XY(1,2);
 80002c2:	2102      	movs	r1, #2
 80002c4:	2001      	movs	r0, #1
 80002c6:	f001 f8a8 	bl	800141a <lcd_goto_XY>
	  lcd_send_string("Card ID is:");
 80002ca:	4628      	mov	r0, r5
 80002cc:	f001 f89c 	bl	8001408 <lcd_send_string>
	  lcd_goto_XY(2,1);
 80002d0:	2101      	movs	r1, #1
 80002d2:	2002      	movs	r0, #2
 80002d4:	f001 f8a1 	bl	800141a <lcd_goto_XY>
	  printf("%x-%x-%x-%x-%x", card_id[0], card_id[1], card_id[2], card_id[3], card_id[4]);
 80002d8:	7920      	ldrb	r0, [r4, #4]
 80002da:	78a3      	ldrb	r3, [r4, #2]
 80002dc:	9001      	str	r0, [sp, #4]
 80002de:	78e0      	ldrb	r0, [r4, #3]
 80002e0:	7862      	ldrb	r2, [r4, #1]
 80002e2:	9000      	str	r0, [sp, #0]
 80002e4:	7821      	ldrb	r1, [r4, #0]
 80002e6:	4808      	ldr	r0, [pc, #32]	; (8000308 <main+0x80>)
 80002e8:	f001 f8d6 	bl	8001498 <iprintf>
	  memset(card_id, 0, 5);
 80002ec:	2300      	movs	r3, #0
	  HAL_Delay(500);
 80002ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	  memset(card_id, 0, 5);
 80002f2:	6023      	str	r3, [r4, #0]
 80002f4:	7123      	strb	r3, [r4, #4]
	  HAL_Delay(500);
 80002f6:	f000 f8cd 	bl	8000494 <HAL_Delay>
 80002fa:	e7e2      	b.n	80002c2 <main+0x3a>
 80002fc:	080022c8 	.word	0x080022c8
 8000300:	20000104 	.word	0x20000104
 8000304:	080022ce 	.word	0x080022ce
 8000308:	080022da 	.word	0x080022da

0800030c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030c:	4770      	bx	lr
	...

08000310 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <HAL_MspInit+0x2c>)
{
 8000312:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000314:	699a      	ldr	r2, [r3, #24]
 8000316:	f042 0201 	orr.w	r2, r2, #1
 800031a:	619a      	str	r2, [r3, #24]
 800031c:	699a      	ldr	r2, [r3, #24]
 800031e:	f002 0201 	and.w	r2, r2, #1
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000326:	69da      	ldr	r2, [r3, #28]
 8000328:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800032c:	61da      	str	r2, [r3, #28]
 800032e:	69db      	ldr	r3, [r3, #28]
 8000330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	9b01      	ldr	r3, [sp, #4]
//  __HAL_AFIO_REMAP_SWJ_DISABLE();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000338:	b002      	add	sp, #8
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000

08000340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000340:	b510      	push	{r4, lr}
 8000342:	4604      	mov	r4, r0
 8000344:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	2210      	movs	r2, #16
 8000348:	2100      	movs	r1, #0
 800034a:	a802      	add	r0, sp, #8
 800034c:	f001 f89c 	bl	8001488 <memset>
  if(hi2c->Instance==I2C1)
 8000350:	6822      	ldr	r2, [r4, #0]
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <HAL_I2C_MspInit+0x58>)
 8000354:	429a      	cmp	r2, r3
 8000356:	d11c      	bne.n	8000392 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000358:	4c10      	ldr	r4, [pc, #64]	; (800039c <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035e:	4810      	ldr	r0, [pc, #64]	; (80003a0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000360:	f043 0308 	orr.w	r3, r3, #8
 8000364:	61a3      	str	r3, [r4, #24]
 8000366:	69a3      	ldr	r3, [r4, #24]
 8000368:	f003 0308 	and.w	r3, r3, #8
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000370:	23c0      	movs	r3, #192	; 0xc0
 8000372:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000374:	2312      	movs	r3, #18
 8000376:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000378:	2303      	movs	r3, #3
 800037a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f000 f8f8 	bl	8000570 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000380:	69e3      	ldr	r3, [r4, #28]
 8000382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000386:	61e3      	str	r3, [r4, #28]
 8000388:	69e3      	ldr	r3, [r4, #28]
 800038a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000392:	b006      	add	sp, #24
 8000394:	bd10      	pop	{r4, pc}
 8000396:	bf00      	nop
 8000398:	40005400 	.word	0x40005400
 800039c:	40021000 	.word	0x40021000
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <NMI_Handler>:
 80003a4:	4770      	bx	lr

080003a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a6:	e7fe      	b.n	80003a6 <HardFault_Handler>

080003a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a8:	e7fe      	b.n	80003a8 <MemManage_Handler>

080003aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003aa:	e7fe      	b.n	80003aa <BusFault_Handler>

080003ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ac:	e7fe      	b.n	80003ac <UsageFault_Handler>

080003ae <SVC_Handler>:
 80003ae:	4770      	bx	lr

080003b0 <DebugMon_Handler>:
 80003b0:	4770      	bx	lr

080003b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003b2:	4770      	bx	lr

080003b4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 b85c 	b.w	8000470 <HAL_IncTick>

080003b8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <SystemInit+0x40>)
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	f042 0201 	orr.w	r2, r2, #1
 80003c0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003c2:	6859      	ldr	r1, [r3, #4]
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <SystemInit+0x44>)
 80003c6:	400a      	ands	r2, r1
 80003c8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80003d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80003d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80003dc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003de:	685a      	ldr	r2, [r3, #4]
 80003e0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80003e4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <SystemInit+0x48>)
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000
 80003fc:	f8ff0000 	.word	0xf8ff0000
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000404:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <HAL_InitTick+0x3c>)
{
 8000408:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800040a:	7818      	ldrb	r0, [r3, #0]
 800040c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000410:	fbb3 f3f0 	udiv	r3, r3, r0
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <HAL_InitTick+0x40>)
 8000416:	6810      	ldr	r0, [r2, #0]
 8000418:	fbb0 f0f3 	udiv	r0, r0, r3
 800041c:	f000 f892 	bl	8000544 <HAL_SYSTICK_Config>
 8000420:	4604      	mov	r4, r0
 8000422:	b958      	cbnz	r0, 800043c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000424:	2d0f      	cmp	r5, #15
 8000426:	d809      	bhi.n	800043c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000428:	4602      	mov	r2, r0
 800042a:	4629      	mov	r1, r5
 800042c:	f04f 30ff 	mov.w	r0, #4294967295
 8000430:	f000 f854 	bl	80004dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <HAL_InitTick+0x44>)
 8000436:	4620      	mov	r0, r4
 8000438:	601d      	str	r5, [r3, #0]
 800043a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800043c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800043e:	bd38      	pop	{r3, r4, r5, pc}
 8000440:	20000004 	.word	0x20000004
 8000444:	20000000 	.word	0x20000000
 8000448:	20000008 	.word	0x20000008

0800044c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_Init+0x20>)
{
 800044e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000450:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000452:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800045a:	f000 f82d 	bl	80004b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ffd0 	bl	8000404 <HAL_InitTick>
  HAL_MspInit();
 8000464:	f7ff ff54 	bl	8000310 <HAL_MspInit>
}
 8000468:	2000      	movs	r0, #0
 800046a:	bd08      	pop	{r3, pc}
 800046c:	40022000 	.word	0x40022000

08000470 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000470:	4a03      	ldr	r2, [pc, #12]	; (8000480 <HAL_IncTick+0x10>)
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <HAL_IncTick+0x14>)
 8000474:	6811      	ldr	r1, [r2, #0]
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	440b      	add	r3, r1
 800047a:	6013      	str	r3, [r2, #0]
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000184 	.word	0x20000184
 8000484:	20000004 	.word	0x20000004

08000488 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000488:	4b01      	ldr	r3, [pc, #4]	; (8000490 <HAL_GetTick+0x8>)
 800048a:	6818      	ldr	r0, [r3, #0]
}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000184 	.word	0x20000184

08000494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000494:	b538      	push	{r3, r4, r5, lr}
 8000496:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000498:	f7ff fff6 	bl	8000488 <HAL_GetTick>
 800049c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800049e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80004a0:	bf1e      	ittt	ne
 80004a2:	4b04      	ldrne	r3, [pc, #16]	; (80004b4 <HAL_Delay+0x20>)
 80004a4:	781b      	ldrbne	r3, [r3, #0]
 80004a6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004a8:	f7ff ffee 	bl	8000488 <HAL_GetTick>
 80004ac:	1b40      	subs	r0, r0, r5
 80004ae:	4284      	cmp	r4, r0
 80004b0:	d8fa      	bhi.n	80004a8 <HAL_Delay+0x14>
  {
  }
}
 80004b2:	bd38      	pop	{r3, r4, r5, pc}
 80004b4:	20000004 	.word	0x20000004

080004b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004ba:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004bc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80004be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004c6:	041b      	lsls	r3, r3, #16
 80004c8:	0c1b      	lsrs	r3, r3, #16
 80004ca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80004d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80004d4:	60d3      	str	r3, [r2, #12]
 80004d6:	4770      	bx	lr
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	68dc      	ldr	r4, [r3, #12]
 80004e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	bf28      	it	cs
 80004f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004f4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004f8:	bf98      	it	ls
 80004fa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000500:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000504:	bf88      	it	hi
 8000506:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000508:	4019      	ands	r1, r3
 800050a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800050c:	fa05 f404 	lsl.w	r4, r5, r4
 8000510:	3c01      	subs	r4, #1
 8000512:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000514:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000516:	ea42 0201 	orr.w	r2, r2, r1
 800051a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051e:	bfa9      	itett	ge
 8000520:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000524:	4b06      	ldrlt	r3, [pc, #24]	; (8000540 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000526:	b2d2      	uxtbge	r2, r2
 8000528:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052c:	bfbb      	ittet	lt
 800052e:	f000 000f 	andlt.w	r0, r0, #15
 8000532:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000534:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	541a      	strblt	r2, [r3, r0]
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	e000ed00 	.word	0xe000ed00
 8000540:	e000ed14 	.word	0xe000ed14

08000544 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000544:	3801      	subs	r0, #1
 8000546:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800054a:	d20a      	bcs.n	8000562 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000552:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000554:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000558:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800055a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800055c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000562:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000e010 	.word	0xe000e010
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000574:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000576:	4626      	mov	r6, r4
 8000578:	4b66      	ldr	r3, [pc, #408]	; (8000714 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800057a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000724 <HAL_GPIO_Init+0x1b4>
 800057e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000728 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000582:	680a      	ldr	r2, [r1, #0]
 8000584:	fa32 f506 	lsrs.w	r5, r2, r6
 8000588:	d102      	bne.n	8000590 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800058a:	b003      	add	sp, #12
 800058c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000590:	f04f 0801 	mov.w	r8, #1
 8000594:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000598:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800059c:	4590      	cmp	r8, r2
 800059e:	d17f      	bne.n	80006a0 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 80005a0:	684d      	ldr	r5, [r1, #4]
 80005a2:	2d12      	cmp	r5, #18
 80005a4:	f000 80aa 	beq.w	80006fc <HAL_GPIO_Init+0x18c>
 80005a8:	f200 8083 	bhi.w	80006b2 <HAL_GPIO_Init+0x142>
 80005ac:	2d02      	cmp	r5, #2
 80005ae:	f000 80a2 	beq.w	80006f6 <HAL_GPIO_Init+0x186>
 80005b2:	d877      	bhi.n	80006a4 <HAL_GPIO_Init+0x134>
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	f000 8089 	beq.w	80006cc <HAL_GPIO_Init+0x15c>
 80005ba:	2d01      	cmp	r5, #1
 80005bc:	f000 8099 	beq.w	80006f2 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005c0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005c4:	2aff      	cmp	r2, #255	; 0xff
 80005c6:	bf93      	iteet	ls
 80005c8:	4682      	movls	sl, r0
 80005ca:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80005ce:	3d08      	subhi	r5, #8
 80005d0:	f8d0 b000 	ldrls.w	fp, [r0]
 80005d4:	bf92      	itee	ls
 80005d6:	00b5      	lslls	r5, r6, #2
 80005d8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80005dc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005de:	fa09 f805 	lsl.w	r8, r9, r5
 80005e2:	ea2b 0808 	bic.w	r8, fp, r8
 80005e6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005ea:	bf88      	it	hi
 80005ec:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005f0:	ea48 0505 	orr.w	r5, r8, r5
 80005f4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005f8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80005fc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000600:	d04e      	beq.n	80006a0 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000602:	4d45      	ldr	r5, [pc, #276]	; (8000718 <HAL_GPIO_Init+0x1a8>)
 8000604:	4f44      	ldr	r7, [pc, #272]	; (8000718 <HAL_GPIO_Init+0x1a8>)
 8000606:	69ad      	ldr	r5, [r5, #24]
 8000608:	f026 0803 	bic.w	r8, r6, #3
 800060c:	f045 0501 	orr.w	r5, r5, #1
 8000610:	61bd      	str	r5, [r7, #24]
 8000612:	69bd      	ldr	r5, [r7, #24]
 8000614:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000618:	f005 0501 	and.w	r5, r5, #1
 800061c:	9501      	str	r5, [sp, #4]
 800061e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000622:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000626:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000628:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800062c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000630:	fa09 f90b 	lsl.w	r9, r9, fp
 8000634:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000638:	4d38      	ldr	r5, [pc, #224]	; (800071c <HAL_GPIO_Init+0x1ac>)
 800063a:	42a8      	cmp	r0, r5
 800063c:	d063      	beq.n	8000706 <HAL_GPIO_Init+0x196>
 800063e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000642:	42a8      	cmp	r0, r5
 8000644:	d061      	beq.n	800070a <HAL_GPIO_Init+0x19a>
 8000646:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800064a:	42a8      	cmp	r0, r5
 800064c:	d05f      	beq.n	800070e <HAL_GPIO_Init+0x19e>
 800064e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000652:	42a8      	cmp	r0, r5
 8000654:	bf0c      	ite	eq
 8000656:	2503      	moveq	r5, #3
 8000658:	2504      	movne	r5, #4
 800065a:	fa05 f50b 	lsl.w	r5, r5, fp
 800065e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000662:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000666:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000668:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800066c:	bf14      	ite	ne
 800066e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000670:	4395      	biceq	r5, r2
 8000672:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000674:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000676:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800067a:	bf14      	ite	ne
 800067c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800067e:	4395      	biceq	r5, r2
 8000680:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000682:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000684:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000688:	bf14      	ite	ne
 800068a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800068c:	4395      	biceq	r5, r2
 800068e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000690:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000692:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000696:	bf14      	ite	ne
 8000698:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800069a:	ea25 0202 	biceq.w	r2, r5, r2
 800069e:	60da      	str	r2, [r3, #12]
	position++;
 80006a0:	3601      	adds	r6, #1
 80006a2:	e76e      	b.n	8000582 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80006a4:	2d03      	cmp	r5, #3
 80006a6:	d022      	beq.n	80006ee <HAL_GPIO_Init+0x17e>
 80006a8:	2d11      	cmp	r5, #17
 80006aa:	d189      	bne.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80006ac:	68cc      	ldr	r4, [r1, #12]
 80006ae:	3404      	adds	r4, #4
          break;
 80006b0:	e786      	b.n	80005c0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006b2:	4f1b      	ldr	r7, [pc, #108]	; (8000720 <HAL_GPIO_Init+0x1b0>)
 80006b4:	42bd      	cmp	r5, r7
 80006b6:	d009      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006b8:	d812      	bhi.n	80006e0 <HAL_GPIO_Init+0x170>
 80006ba:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800072c <HAL_GPIO_Init+0x1bc>
 80006be:	454d      	cmp	r5, r9
 80006c0:	d004      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006c2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80006c6:	454d      	cmp	r5, r9
 80006c8:	f47f af7a 	bne.w	80005c0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006cc:	688c      	ldr	r4, [r1, #8]
 80006ce:	b1c4      	cbz	r4, 8000702 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006d0:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80006d2:	bf0c      	ite	eq
 80006d4:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80006d8:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006dc:	2408      	movs	r4, #8
 80006de:	e76f      	b.n	80005c0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80006e0:	4575      	cmp	r5, lr
 80006e2:	d0f3      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006e4:	4565      	cmp	r5, ip
 80006e6:	d0f1      	beq.n	80006cc <HAL_GPIO_Init+0x15c>
 80006e8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000730 <HAL_GPIO_Init+0x1c0>
 80006ec:	e7eb      	b.n	80006c6 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006ee:	2400      	movs	r4, #0
 80006f0:	e766      	b.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80006f2:	68cc      	ldr	r4, [r1, #12]
          break;
 80006f4:	e764      	b.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006f6:	68cc      	ldr	r4, [r1, #12]
 80006f8:	3408      	adds	r4, #8
          break;
 80006fa:	e761      	b.n	80005c0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006fc:	68cc      	ldr	r4, [r1, #12]
 80006fe:	340c      	adds	r4, #12
          break;
 8000700:	e75e      	b.n	80005c0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000702:	2404      	movs	r4, #4
 8000704:	e75c      	b.n	80005c0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000706:	2500      	movs	r5, #0
 8000708:	e7a7      	b.n	800065a <HAL_GPIO_Init+0xea>
 800070a:	2501      	movs	r5, #1
 800070c:	e7a5      	b.n	800065a <HAL_GPIO_Init+0xea>
 800070e:	2502      	movs	r5, #2
 8000710:	e7a3      	b.n	800065a <HAL_GPIO_Init+0xea>
 8000712:	bf00      	nop
 8000714:	40010400 	.word	0x40010400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010800 	.word	0x40010800
 8000720:	10210000 	.word	0x10210000
 8000724:	10310000 	.word	0x10310000
 8000728:	10320000 	.word	0x10320000
 800072c:	10110000 	.word	0x10110000
 8000730:	10220000 	.word	0x10220000

08000734 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	b10a      	cbz	r2, 800073a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000736:	6101      	str	r1, [r0, #16]
 8000738:	4770      	bx	lr
 800073a:	0409      	lsls	r1, r1, #16
 800073c:	e7fb      	b.n	8000736 <HAL_GPIO_WritePin+0x2>

0800073e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800073e:	6801      	ldr	r1, [r0, #0]
 8000740:	2200      	movs	r2, #0
 8000742:	694b      	ldr	r3, [r1, #20]
 8000744:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000748:	d010      	beq.n	800076c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800074a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800074e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8000750:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8000752:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000754:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000758:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800075c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800075e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000762:	f043 0304 	orr.w	r3, r3, #4
 8000766:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8000768:	2001      	movs	r0, #1
 800076a:	4770      	bx	lr
  }
  return HAL_OK;
 800076c:	4618      	mov	r0, r3
}
 800076e:	4770      	bx	lr

08000770 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000774:	4604      	mov	r4, r0
 8000776:	4617      	mov	r7, r2
 8000778:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800077a:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800077e:	b28e      	uxth	r6, r1
 8000780:	6825      	ldr	r5, [r4, #0]
 8000782:	f1b8 0f01 	cmp.w	r8, #1
 8000786:	bf0c      	ite	eq
 8000788:	696b      	ldreq	r3, [r5, #20]
 800078a:	69ab      	ldrne	r3, [r5, #24]
 800078c:	ea36 0303 	bics.w	r3, r6, r3
 8000790:	bf14      	ite	ne
 8000792:	2001      	movne	r0, #1
 8000794:	2000      	moveq	r0, #0
 8000796:	b908      	cbnz	r0, 800079c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800079c:	696b      	ldr	r3, [r5, #20]
 800079e:	055a      	lsls	r2, r3, #21
 80007a0:	d516      	bpl.n	80007d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80007a2:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80007a4:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80007a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007aa:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80007ac:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80007b0:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80007b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80007ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80007be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007c0:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80007c4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80007c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80007ca:	2001      	movs	r0, #1
 80007cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80007d0:	1c7b      	adds	r3, r7, #1
 80007d2:	d0d5      	beq.n	8000780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80007d4:	f7ff fe58 	bl	8000488 <HAL_GetTick>
 80007d8:	eba0 0009 	sub.w	r0, r0, r9
 80007dc:	4287      	cmp	r7, r0
 80007de:	d301      	bcc.n	80007e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80007e0:	2f00      	cmp	r7, #0
 80007e2:	d1cd      	bne.n	8000780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80007e4:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80007e6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80007e8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80007ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80007ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80007f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007f4:	f042 0220 	orr.w	r2, r2, #32
 80007f8:	e7e4      	b.n	80007c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080007fa <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80007fa:	b570      	push	{r4, r5, r6, lr}
 80007fc:	4604      	mov	r4, r0
 80007fe:	460d      	mov	r5, r1
 8000800:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	075b      	lsls	r3, r3, #29
 8000808:	d501      	bpl.n	800080e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800080a:	2000      	movs	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800080e:	4620      	mov	r0, r4
 8000810:	f7ff ff95 	bl	800073e <I2C_IsAcknowledgeFailed>
 8000814:	b9a8      	cbnz	r0, 8000842 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8000816:	1c6a      	adds	r2, r5, #1
 8000818:	d0f3      	beq.n	8000802 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800081a:	f7ff fe35 	bl	8000488 <HAL_GetTick>
 800081e:	1b80      	subs	r0, r0, r6
 8000820:	4285      	cmp	r5, r0
 8000822:	d301      	bcc.n	8000828 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000824:	2d00      	cmp	r5, #0
 8000826:	d1ec      	bne.n	8000802 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000828:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800082a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800082c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800082e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000832:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000836:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000838:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800083c:	f042 0220 	orr.w	r2, r2, #32
 8000840:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
}
 8000844:	bd70      	pop	{r4, r5, r6, pc}

08000846 <I2C_WaitOnFlagUntilTimeout>:
{
 8000846:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800084a:	4604      	mov	r4, r0
 800084c:	4690      	mov	r8, r2
 800084e:	461f      	mov	r7, r3
 8000850:	9e08      	ldr	r6, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000852:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000856:	b28d      	uxth	r5, r1
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	f1b9 0f01 	cmp.w	r9, #1
 800085e:	bf0c      	ite	eq
 8000860:	695b      	ldreq	r3, [r3, #20]
 8000862:	699b      	ldrne	r3, [r3, #24]
 8000864:	ea35 0303 	bics.w	r3, r5, r3
 8000868:	bf0c      	ite	eq
 800086a:	2301      	moveq	r3, #1
 800086c:	2300      	movne	r3, #0
 800086e:	4543      	cmp	r3, r8
 8000870:	d002      	beq.n	8000878 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000872:	2000      	movs	r0, #0
}
 8000874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000878:	1c7b      	adds	r3, r7, #1
 800087a:	d0ed      	beq.n	8000858 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800087c:	f7ff fe04 	bl	8000488 <HAL_GetTick>
 8000880:	1b80      	subs	r0, r0, r6
 8000882:	4287      	cmp	r7, r0
 8000884:	d301      	bcc.n	800088a <I2C_WaitOnFlagUntilTimeout+0x44>
 8000886:	2f00      	cmp	r7, #0
 8000888:	d1e6      	bne.n	8000858 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800088a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800088c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800088e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000890:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000894:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000898:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800089a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800089e:	f042 0220 	orr.w	r2, r2, #32
 80008a2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80008a4:	2001      	movs	r0, #1
 80008a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080008aa <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80008aa:	b570      	push	{r4, r5, r6, lr}
 80008ac:	4604      	mov	r4, r0
 80008ae:	460d      	mov	r5, r1
 80008b0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80008b2:	6823      	ldr	r3, [r4, #0]
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	061b      	lsls	r3, r3, #24
 80008b8:	d501      	bpl.n	80008be <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80008ba:	2000      	movs	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80008be:	4620      	mov	r0, r4
 80008c0:	f7ff ff3d 	bl	800073e <I2C_IsAcknowledgeFailed>
 80008c4:	b9a8      	cbnz	r0, 80008f2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80008c6:	1c6a      	adds	r2, r5, #1
 80008c8:	d0f3      	beq.n	80008b2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008ca:	f7ff fddd 	bl	8000488 <HAL_GetTick>
 80008ce:	1b80      	subs	r0, r0, r6
 80008d0:	4285      	cmp	r5, r0
 80008d2:	d301      	bcc.n	80008d8 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d1ec      	bne.n	80008b2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80008d8:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80008da:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80008dc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80008de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80008e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80008e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80008ec:	f042 0220 	orr.w	r2, r2, #32
 80008f0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80008f2:	2001      	movs	r0, #1
}
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080008f8 <HAL_I2C_Init>:
{
 80008f8:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80008fa:	4604      	mov	r4, r0
 80008fc:	b908      	cbnz	r0, 8000902 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80008fe:	2001      	movs	r0, #1
 8000900:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000902:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800090a:	b91b      	cbnz	r3, 8000914 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800090c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000910:	f7ff fd16 	bl	8000340 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000914:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000916:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000918:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	f023 0301 	bic.w	r3, r3, #1
 8000922:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000924:	f000 fbd2 	bl	80010cc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000928:	6865      	ldr	r5, [r4, #4]
 800092a:	4b41      	ldr	r3, [pc, #260]	; (8000a30 <HAL_I2C_Init+0x138>)
 800092c:	429d      	cmp	r5, r3
 800092e:	d84d      	bhi.n	80009cc <HAL_I2C_Init+0xd4>
 8000930:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <HAL_I2C_Init+0x13c>)
 8000932:	4298      	cmp	r0, r3
 8000934:	d9e3      	bls.n	80008fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000936:	4940      	ldr	r1, [pc, #256]	; (8000a38 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000938:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800093a:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800093e:	6853      	ldr	r3, [r2, #4]
 8000940:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000944:	430b      	orrs	r3, r1
 8000946:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000948:	6a13      	ldr	r3, [r2, #32]
 800094a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800094e:	3101      	adds	r1, #1
 8000950:	4319      	orrs	r1, r3
 8000952:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000954:	69d1      	ldr	r1, [r2, #28]
 8000956:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_I2C_Init+0x138>)
 8000958:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800095c:	429d      	cmp	r5, r3
 800095e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000962:	f100 30ff 	add.w	r0, r0, #4294967295
 8000966:	d848      	bhi.n	80009fa <HAL_I2C_Init+0x102>
 8000968:	006d      	lsls	r5, r5, #1
 800096a:	fbb0 f0f5 	udiv	r0, r0, r5
 800096e:	3001      	adds	r0, #1
 8000970:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000974:	2b04      	cmp	r3, #4
 8000976:	bf38      	it	cc
 8000978:	2304      	movcc	r3, #4
 800097a:	430b      	orrs	r3, r1
 800097c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800097e:	6811      	ldr	r1, [r2, #0]
 8000980:	6a20      	ldr	r0, [r4, #32]
 8000982:	69e3      	ldr	r3, [r4, #28]
 8000984:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000988:	4303      	orrs	r3, r0
 800098a:	430b      	orrs	r3, r1
 800098c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800098e:	6891      	ldr	r1, [r2, #8]
 8000990:	68e0      	ldr	r0, [r4, #12]
 8000992:	6923      	ldr	r3, [r4, #16]
 8000994:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000998:	4303      	orrs	r3, r0
 800099a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800099e:	430b      	orrs	r3, r1
 80009a0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80009a2:	68d1      	ldr	r1, [r2, #12]
 80009a4:	69a0      	ldr	r0, [r4, #24]
 80009a6:	6963      	ldr	r3, [r4, #20]
 80009a8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80009ac:	4303      	orrs	r3, r0
 80009ae:	430b      	orrs	r3, r1
 80009b0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80009b2:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009b4:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80009bc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009be:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009c4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009c6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <HAL_I2C_Init+0x144>)
 80009ce:	4298      	cmp	r0, r3
 80009d0:	d995      	bls.n	80008fe <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80009d2:	4e19      	ldr	r6, [pc, #100]	; (8000a38 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80009d4:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80009d8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80009dc:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80009de:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80009e0:	6853      	ldr	r3, [r2, #4]
 80009e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009e6:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80009e8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80009ec:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80009ee:	6a13      	ldr	r3, [r2, #32]
 80009f0:	fbb1 f1f6 	udiv	r1, r1, r6
 80009f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80009f8:	e7a9      	b.n	800094e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80009fa:	68a3      	ldr	r3, [r4, #8]
 80009fc:	b953      	cbnz	r3, 8000a14 <HAL_I2C_Init+0x11c>
 80009fe:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000a02:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a06:	1c43      	adds	r3, r0, #1
 8000a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a0c:	b16b      	cbz	r3, 8000a2a <HAL_I2C_Init+0x132>
 8000a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a12:	e7b2      	b.n	800097a <HAL_I2C_Init+0x82>
 8000a14:	2319      	movs	r3, #25
 8000a16:	436b      	muls	r3, r5
 8000a18:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a1c:	1c43      	adds	r3, r0, #1
 8000a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a22:	b113      	cbz	r3, 8000a2a <HAL_I2C_Init+0x132>
 8000a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a28:	e7a7      	b.n	800097a <HAL_I2C_Init+0x82>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e7a5      	b.n	800097a <HAL_I2C_Init+0x82>
 8000a2e:	bf00      	nop
 8000a30:	000186a0 	.word	0x000186a0
 8000a34:	001e847f 	.word	0x001e847f
 8000a38:	000f4240 	.word	0x000f4240
 8000a3c:	003d08ff 	.word	0x003d08ff

08000a40 <HAL_I2C_Master_Transmit>:
{
 8000a40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000a44:	4604      	mov	r4, r0
 8000a46:	461f      	mov	r7, r3
 8000a48:	460d      	mov	r5, r1
 8000a4a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff fd1c 	bl	8000488 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a50:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8000a54:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a56:	2b20      	cmp	r3, #32
 8000a58:	d004      	beq.n	8000a64 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000a5a:	2502      	movs	r5, #2
}
 8000a5c:	4628      	mov	r0, r5
 8000a5e:	b004      	add	sp, #16
 8000a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a64:	9000      	str	r0, [sp, #0]
 8000a66:	2319      	movs	r3, #25
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4958      	ldr	r1, [pc, #352]	; (8000bcc <HAL_I2C_Master_Transmit+0x18c>)
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f7ff feea 	bl	8000846 <I2C_WaitOnFlagUntilTimeout>
 8000a72:	2800      	cmp	r0, #0
 8000a74:	d1f1      	bne.n	8000a5a <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000a76:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d0ed      	beq.n	8000a5a <HAL_I2C_Master_Transmit+0x1a>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000a8a:	bf5e      	ittt	pl
 8000a8c:	681a      	ldrpl	r2, [r3, #0]
 8000a8e:	f042 0201 	orrpl.w	r2, r2, #1
 8000a92:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a9a:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000a9c:	2221      	movs	r2, #33	; 0x21
 8000a9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000aac:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000aae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000ab0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000ab4:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ab6:	4a46      	ldr	r2, [pc, #280]	; (8000bd0 <HAL_I2C_Master_Transmit+0x190>)
 8000ab8:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000aba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000abc:	2a08      	cmp	r2, #8
 8000abe:	d004      	beq.n	8000aca <HAL_I2C_Master_Transmit+0x8a>
 8000ac0:	2a01      	cmp	r2, #1
 8000ac2:	d002      	beq.n	8000aca <HAL_I2C_Master_Transmit+0x8a>
 8000ac4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000ac8:	d104      	bne.n	8000ad4 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e002      	b.n	8000ada <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000ad4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ad6:	2a12      	cmp	r2, #18
 8000ad8:	d0f7      	beq.n	8000aca <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ada:	9600      	str	r6, [sp, #0]
 8000adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f7ff feae 	bl	8000846 <I2C_WaitOnFlagUntilTimeout>
 8000aea:	b108      	cbz	r0, 8000af0 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8000aec:	2501      	movs	r5, #1
 8000aee:	e7b5      	b.n	8000a5c <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000af0:	6923      	ldr	r3, [r4, #16]
 8000af2:	6822      	ldr	r2, [r4, #0]
 8000af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000af8:	d113      	bne.n	8000b22 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000afa:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000afe:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b00:	4633      	mov	r3, r6
 8000b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b04:	4933      	ldr	r1, [pc, #204]	; (8000bd4 <HAL_I2C_Master_Transmit+0x194>)
 8000b06:	4620      	mov	r0, r4
 8000b08:	f7ff fe32 	bl	8000770 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b0c:	4605      	mov	r5, r0
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d1ec      	bne.n	8000aec <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b12:	6823      	ldr	r3, [r4, #0]
 8000b14:	9003      	str	r0, [sp, #12]
 8000b16:	695a      	ldr	r2, [r3, #20]
 8000b18:	9203      	str	r2, [sp, #12]
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	9303      	str	r3, [sp, #12]
 8000b1e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000b20:	e044      	b.n	8000bac <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000b22:	11eb      	asrs	r3, r5, #7
 8000b24:	f003 0306 	and.w	r3, r3, #6
 8000b28:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b2c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000b2e:	492a      	ldr	r1, [pc, #168]	; (8000bd8 <HAL_I2C_Master_Transmit+0x198>)
 8000b30:	4633      	mov	r3, r6
 8000b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b34:	4620      	mov	r0, r4
 8000b36:	f7ff fe1b 	bl	8000770 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	d1d6      	bne.n	8000aec <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	b2ed      	uxtb	r5, r5
 8000b42:	611d      	str	r5, [r3, #16]
 8000b44:	e7dc      	b.n	8000b00 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b46:	4632      	mov	r2, r6
 8000b48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff fead 	bl	80008aa <I2C_WaitOnTXEFlagUntilTimeout>
 8000b50:	b140      	cbz	r0, 8000b64 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b54:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b56:	bf01      	itttt	eq
 8000b58:	6822      	ldreq	r2, [r4, #0]
 8000b5a:	6813      	ldreq	r3, [r2, #0]
 8000b5c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8000b60:	6013      	streq	r3, [r2, #0]
 8000b62:	e7c3      	b.n	8000aec <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b66:	6820      	ldr	r0, [r4, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8000b6e:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8000b70:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000b72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000b74:	3a01      	subs	r2, #1
 8000b76:	b292      	uxth	r2, r2
 8000b78:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000b7a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b7c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000b7e:	1e51      	subs	r1, r2, #1
 8000b80:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b82:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000b84:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000b86:	d50a      	bpl.n	8000b9e <HAL_I2C_Master_Transmit+0x15e>
 8000b88:	b149      	cbz	r1, 8000b9e <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b8a:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8000b8c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000b8e:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8000b90:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000b92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000b94:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8000b96:	3b01      	subs	r3, #1
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000b9c:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b9e:	4632      	mov	r2, r6
 8000ba0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f7ff fe29 	bl	80007fa <I2C_WaitOnBTFFlagUntilTimeout>
 8000ba8:	2800      	cmp	r0, #0
 8000baa:	d1d2      	bne.n	8000b52 <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8000bac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1c9      	bne.n	8000b46 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bb2:	6821      	ldr	r1, [r4, #0]
 8000bb4:	680a      	ldr	r2, [r1, #0]
 8000bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bba:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000bbc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8000bbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000bc2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000bca:	e747      	b.n	8000a5c <HAL_I2C_Master_Transmit+0x1c>
 8000bcc:	00100002 	.word	0x00100002
 8000bd0:	ffff0000 	.word	0xffff0000
 8000bd4:	00010002 	.word	0x00010002
 8000bd8:	00010008 	.word	0x00010008

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be0:	4605      	mov	r5, r0
 8000be2:	b908      	cbnz	r0, 8000be8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000be4:	2001      	movs	r0, #1
 8000be6:	e03c      	b.n	8000c62 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be8:	6803      	ldr	r3, [r0, #0]
 8000bea:	07db      	lsls	r3, r3, #31
 8000bec:	d410      	bmi.n	8000c10 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	079f      	lsls	r7, r3, #30
 8000bf2:	d45d      	bmi.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bf4:	682b      	ldr	r3, [r5, #0]
 8000bf6:	0719      	lsls	r1, r3, #28
 8000bf8:	f100 8094 	bmi.w	8000d24 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	075a      	lsls	r2, r3, #29
 8000c00:	f100 80be 	bmi.w	8000d80 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c04:	69e8      	ldr	r0, [r5, #28]
 8000c06:	2800      	cmp	r0, #0
 8000c08:	f040 812c 	bne.w	8000e64 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e028      	b.n	8000c62 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c10:	4c8f      	ldr	r4, [pc, #572]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000c12:	6863      	ldr	r3, [r4, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d007      	beq.n	8000c2c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d109      	bne.n	8000c3a <HAL_RCC_OscConfig+0x5e>
 8000c26:	6863      	ldr	r3, [r4, #4]
 8000c28:	03de      	lsls	r6, r3, #15
 8000c2a:	d506      	bpl.n	8000c3a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	039c      	lsls	r4, r3, #14
 8000c30:	d5dd      	bpl.n	8000bee <HAL_RCC_OscConfig+0x12>
 8000c32:	686b      	ldr	r3, [r5, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1da      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
 8000c38:	e7d4      	b.n	8000be4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	686b      	ldr	r3, [r5, #4]
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d112      	bne.n	8000c68 <HAL_RCC_OscConfig+0x8c>
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c48:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fc1d 	bl	8000488 <HAL_GetTick>
 8000c4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	0398      	lsls	r0, r3, #14
 8000c54:	d4cb      	bmi.n	8000bee <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c56:	f7ff fc17 	bl	8000488 <HAL_GetTick>
 8000c5a:	1b80      	subs	r0, r0, r6
 8000c5c:	2864      	cmp	r0, #100	; 0x64
 8000c5e:	d9f7      	bls.n	8000c50 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000c60:	2003      	movs	r0, #3
}
 8000c62:	b002      	add	sp, #8
 8000c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c68:	b99b      	cbnz	r3, 8000c92 <HAL_RCC_OscConfig+0xb6>
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c70:	6023      	str	r3, [r4, #0]
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fc05 	bl	8000488 <HAL_GetTick>
 8000c7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c80:	6823      	ldr	r3, [r4, #0]
 8000c82:	0399      	lsls	r1, r3, #14
 8000c84:	d5b3      	bpl.n	8000bee <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c86:	f7ff fbff 	bl	8000488 <HAL_GetTick>
 8000c8a:	1b80      	subs	r0, r0, r6
 8000c8c:	2864      	cmp	r0, #100	; 0x64
 8000c8e:	d9f7      	bls.n	8000c80 <HAL_RCC_OscConfig+0xa4>
 8000c90:	e7e6      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	d103      	bne.n	8000ca2 <HAL_RCC_OscConfig+0xc6>
 8000c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9e:	6023      	str	r3, [r4, #0]
 8000ca0:	e7cf      	b.n	8000c42 <HAL_RCC_OscConfig+0x66>
 8000ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca6:	6023      	str	r3, [r4, #0]
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cae:	e7cb      	b.n	8000c48 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cb0:	4c67      	ldr	r4, [pc, #412]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000cb2:	6863      	ldr	r3, [r4, #4]
 8000cb4:	f013 0f0c 	tst.w	r3, #12
 8000cb8:	d007      	beq.n	8000cca <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cba:	6863      	ldr	r3, [r4, #4]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b08      	cmp	r3, #8
 8000cc2:	d110      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	03da      	lsls	r2, r3, #15
 8000cc8:	d40d      	bmi.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	079b      	lsls	r3, r3, #30
 8000cce:	d502      	bpl.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
 8000cd0:	692b      	ldr	r3, [r5, #16]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d186      	bne.n	8000be4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	696a      	ldr	r2, [r5, #20]
 8000cda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000cde:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ce2:	6023      	str	r3, [r4, #0]
 8000ce4:	e786      	b.n	8000bf4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce6:	692a      	ldr	r2, [r5, #16]
 8000ce8:	4b5a      	ldr	r3, [pc, #360]	; (8000e54 <HAL_RCC_OscConfig+0x278>)
 8000cea:	b16a      	cbz	r2, 8000d08 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000cec:	2201      	movs	r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fbca 	bl	8000488 <HAL_GetTick>
 8000cf4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	079f      	lsls	r7, r3, #30
 8000cfa:	d4ec      	bmi.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfc:	f7ff fbc4 	bl	8000488 <HAL_GetTick>
 8000d00:	1b80      	subs	r0, r0, r6
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d9f7      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x11a>
 8000d06:	e7ab      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000d08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d0a:	f7ff fbbd 	bl	8000488 <HAL_GetTick>
 8000d0e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	0798      	lsls	r0, r3, #30
 8000d14:	f57f af6e 	bpl.w	8000bf4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fbb6 	bl	8000488 <HAL_GetTick>
 8000d1c:	1b80      	subs	r0, r0, r6
 8000d1e:	2802      	cmp	r0, #2
 8000d20:	d9f6      	bls.n	8000d10 <HAL_RCC_OscConfig+0x134>
 8000d22:	e79d      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d24:	69aa      	ldr	r2, [r5, #24]
 8000d26:	4c4a      	ldr	r4, [pc, #296]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000d28:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <HAL_RCC_OscConfig+0x27c>)
 8000d2a:	b1da      	cbz	r2, 8000d64 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d30:	f7ff fbaa 	bl	8000488 <HAL_GetTick>
 8000d34:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d38:	079b      	lsls	r3, r3, #30
 8000d3a:	d50d      	bpl.n	8000d58 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000d3c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000d40:	4b46      	ldr	r3, [pc, #280]	; (8000e5c <HAL_RCC_OscConfig+0x280>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d48:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000d4a:	bf00      	nop
  }
  while (Delay --);
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	9201      	str	r2, [sp, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f9      	bne.n	8000d4a <HAL_RCC_OscConfig+0x16e>
 8000d56:	e751      	b.n	8000bfc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fb96 	bl	8000488 <HAL_GetTick>
 8000d5c:	1b80      	subs	r0, r0, r6
 8000d5e:	2802      	cmp	r0, #2
 8000d60:	d9e9      	bls.n	8000d36 <HAL_RCC_OscConfig+0x15a>
 8000d62:	e77d      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000d64:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d66:	f7ff fb8f 	bl	8000488 <HAL_GetTick>
 8000d6a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d6e:	079f      	lsls	r7, r3, #30
 8000d70:	f57f af44 	bpl.w	8000bfc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d74:	f7ff fb88 	bl	8000488 <HAL_GetTick>
 8000d78:	1b80      	subs	r0, r0, r6
 8000d7a:	2802      	cmp	r0, #2
 8000d7c:	d9f6      	bls.n	8000d6c <HAL_RCC_OscConfig+0x190>
 8000d7e:	e76f      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d80:	4c33      	ldr	r4, [pc, #204]	; (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000d82:	69e3      	ldr	r3, [r4, #28]
 8000d84:	00d8      	lsls	r0, r3, #3
 8000d86:	d424      	bmi.n	8000dd2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000d88:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	69e3      	ldr	r3, [r4, #28]
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	61e3      	str	r3, [r4, #28]
 8000d92:	69e3      	ldr	r3, [r4, #28]
 8000d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	4e30      	ldr	r6, [pc, #192]	; (8000e60 <HAL_RCC_OscConfig+0x284>)
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	05d9      	lsls	r1, r3, #23
 8000da2:	d518      	bpl.n	8000dd6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da4:	68eb      	ldr	r3, [r5, #12]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d126      	bne.n	8000df8 <HAL_RCC_OscConfig+0x21c>
 8000daa:	6a23      	ldr	r3, [r4, #32]
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000db2:	f7ff fb69 	bl	8000488 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000dba:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dbc:	6a23      	ldr	r3, [r4, #32]
 8000dbe:	079b      	lsls	r3, r3, #30
 8000dc0:	d53f      	bpl.n	8000e42 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000dc2:	2f00      	cmp	r7, #0
 8000dc4:	f43f af1e 	beq.w	8000c04 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc8:	69e3      	ldr	r3, [r4, #28]
 8000dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dce:	61e3      	str	r3, [r4, #28]
 8000dd0:	e718      	b.n	8000c04 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000dd2:	2700      	movs	r7, #0
 8000dd4:	e7e2      	b.n	8000d9c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd6:	6833      	ldr	r3, [r6, #0]
 8000dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ddc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000dde:	f7ff fb53 	bl	8000488 <HAL_GetTick>
 8000de2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de4:	6833      	ldr	r3, [r6, #0]
 8000de6:	05da      	lsls	r2, r3, #23
 8000de8:	d4dc      	bmi.n	8000da4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dea:	f7ff fb4d 	bl	8000488 <HAL_GetTick>
 8000dee:	eba0 0008 	sub.w	r0, r0, r8
 8000df2:	2864      	cmp	r0, #100	; 0x64
 8000df4:	d9f6      	bls.n	8000de4 <HAL_RCC_OscConfig+0x208>
 8000df6:	e733      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df8:	b9ab      	cbnz	r3, 8000e26 <HAL_RCC_OscConfig+0x24a>
 8000dfa:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dfc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e00:	f023 0301 	bic.w	r3, r3, #1
 8000e04:	6223      	str	r3, [r4, #32]
 8000e06:	6a23      	ldr	r3, [r4, #32]
 8000e08:	f023 0304 	bic.w	r3, r3, #4
 8000e0c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fb3b 	bl	8000488 <HAL_GetTick>
 8000e12:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e14:	6a23      	ldr	r3, [r4, #32]
 8000e16:	0798      	lsls	r0, r3, #30
 8000e18:	d5d3      	bpl.n	8000dc2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e1a:	f7ff fb35 	bl	8000488 <HAL_GetTick>
 8000e1e:	1b80      	subs	r0, r0, r6
 8000e20:	4540      	cmp	r0, r8
 8000e22:	d9f7      	bls.n	8000e14 <HAL_RCC_OscConfig+0x238>
 8000e24:	e71c      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	6a23      	ldr	r3, [r4, #32]
 8000e2a:	d103      	bne.n	8000e34 <HAL_RCC_OscConfig+0x258>
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	6223      	str	r3, [r4, #32]
 8000e32:	e7ba      	b.n	8000daa <HAL_RCC_OscConfig+0x1ce>
 8000e34:	f023 0301 	bic.w	r3, r3, #1
 8000e38:	6223      	str	r3, [r4, #32]
 8000e3a:	6a23      	ldr	r3, [r4, #32]
 8000e3c:	f023 0304 	bic.w	r3, r3, #4
 8000e40:	e7b6      	b.n	8000db0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e42:	f7ff fb21 	bl	8000488 <HAL_GetTick>
 8000e46:	eba0 0008 	sub.w	r0, r0, r8
 8000e4a:	42b0      	cmp	r0, r6
 8000e4c:	d9b6      	bls.n	8000dbc <HAL_RCC_OscConfig+0x1e0>
 8000e4e:	e707      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
 8000e50:	40021000 	.word	0x40021000
 8000e54:	42420000 	.word	0x42420000
 8000e58:	42420480 	.word	0x42420480
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e64:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <HAL_RCC_OscConfig+0x334>)
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	461c      	mov	r4, r3
 8000e6a:	f002 020c 	and.w	r2, r2, #12
 8000e6e:	2a08      	cmp	r2, #8
 8000e70:	d03d      	beq.n	8000eee <HAL_RCC_OscConfig+0x312>
 8000e72:	2300      	movs	r3, #0
 8000e74:	4e27      	ldr	r6, [pc, #156]	; (8000f14 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e76:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000e78:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e7a:	d12b      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fb04 	bl	8000488 <HAL_GetTick>
 8000e80:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	0199      	lsls	r1, r3, #6
 8000e86:	d41f      	bmi.n	8000ec8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e88:	6a2b      	ldr	r3, [r5, #32]
 8000e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8e:	d105      	bne.n	8000e9c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e90:	6862      	ldr	r2, [r4, #4]
 8000e92:	68a9      	ldr	r1, [r5, #8]
 8000e94:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e9c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000e9e:	6862      	ldr	r2, [r4, #4]
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000eaa:	2301      	movs	r3, #1
 8000eac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000eae:	f7ff faeb 	bl	8000488 <HAL_GetTick>
 8000eb2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	019a      	lsls	r2, r3, #6
 8000eb8:	f53f aea8 	bmi.w	8000c0c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ebc:	f7ff fae4 	bl	8000488 <HAL_GetTick>
 8000ec0:	1b40      	subs	r0, r0, r5
 8000ec2:	2802      	cmp	r0, #2
 8000ec4:	d9f6      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x2d8>
 8000ec6:	e6cb      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec8:	f7ff fade 	bl	8000488 <HAL_GetTick>
 8000ecc:	1bc0      	subs	r0, r0, r7
 8000ece:	2802      	cmp	r0, #2
 8000ed0:	d9d7      	bls.n	8000e82 <HAL_RCC_OscConfig+0x2a6>
 8000ed2:	e6c5      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fad8 	bl	8000488 <HAL_GetTick>
 8000ed8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	f57f ae95 	bpl.w	8000c0c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ee2:	f7ff fad1 	bl	8000488 <HAL_GetTick>
 8000ee6:	1b40      	subs	r0, r0, r5
 8000ee8:	2802      	cmp	r0, #2
 8000eea:	d9f6      	bls.n	8000eda <HAL_RCC_OscConfig+0x2fe>
 8000eec:	e6b8      	b.n	8000c60 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eee:	2801      	cmp	r0, #1
 8000ef0:	f43f aeb7 	beq.w	8000c62 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000ef4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef6:	6a2b      	ldr	r3, [r5, #32]
 8000ef8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f47f ae71 	bne.w	8000be4 <HAL_RCC_OscConfig+0x8>
 8000f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f04:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000f08:	1ac0      	subs	r0, r0, r3
 8000f0a:	bf18      	it	ne
 8000f0c:	2001      	movne	r0, #1
 8000f0e:	e6a8      	b.n	8000c62 <HAL_RCC_OscConfig+0x86>
 8000f10:	40021000 	.word	0x40021000
 8000f14:	42420060 	.word	0x42420060

08000f18 <HAL_RCC_GetSysClockFreq>:
{
 8000f18:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f1c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f1e:	ac02      	add	r4, sp, #8
 8000f20:	f103 0510 	add.w	r5, r3, #16
 8000f24:	4622      	mov	r2, r4
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	6859      	ldr	r1, [r3, #4]
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	c203      	stmia	r2!, {r0, r1}
 8000f2e:	42ab      	cmp	r3, r5
 8000f30:	4614      	mov	r4, r2
 8000f32:	d1f7      	bne.n	8000f24 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f34:	2301      	movs	r3, #1
 8000f36:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f3a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000f3c:	4911      	ldr	r1, [pc, #68]	; (8000f84 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f3e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000f42:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f44:	f003 020c 	and.w	r2, r3, #12
 8000f48:	2a08      	cmp	r2, #8
 8000f4a:	d117      	bne.n	8000f7c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f4c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000f50:	a806      	add	r0, sp, #24
 8000f52:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f54:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f56:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f5a:	d50c      	bpl.n	8000f76 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f5c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f5e:	480a      	ldr	r0, [pc, #40]	; (8000f88 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f60:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f64:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f66:	aa06      	add	r2, sp, #24
 8000f68:	4413      	add	r3, r2
 8000f6a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f6e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000f72:	b007      	add	sp, #28
 8000f74:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <HAL_RCC_GetSysClockFreq+0x74>)
 8000f78:	4350      	muls	r0, r2
 8000f7a:	e7fa      	b.n	8000f72 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000f7e:	e7f8      	b.n	8000f72 <HAL_RCC_GetSysClockFreq+0x5a>
 8000f80:	080022b8 	.word	0x080022b8
 8000f84:	40021000 	.word	0x40021000
 8000f88:	007a1200 	.word	0x007a1200
 8000f8c:	003d0900 	.word	0x003d0900

08000f90 <HAL_RCC_ClockConfig>:
{
 8000f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f94:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000f96:	4604      	mov	r4, r0
 8000f98:	b910      	cbnz	r0, 8000fa0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fa0:	4a45      	ldr	r2, [pc, #276]	; (80010b8 <HAL_RCC_ClockConfig+0x128>)
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d329      	bcc.n	8001000 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fac:	6821      	ldr	r1, [r4, #0]
 8000fae:	078e      	lsls	r6, r1, #30
 8000fb0:	d431      	bmi.n	8001016 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb2:	07ca      	lsls	r2, r1, #31
 8000fb4:	d444      	bmi.n	8001040 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fb6:	4a40      	ldr	r2, [pc, #256]	; (80010b8 <HAL_RCC_ClockConfig+0x128>)
 8000fb8:	6813      	ldr	r3, [r2, #0]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	429d      	cmp	r5, r3
 8000fc0:	d367      	bcc.n	8001092 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc2:	6822      	ldr	r2, [r4, #0]
 8000fc4:	4d3d      	ldr	r5, [pc, #244]	; (80010bc <HAL_RCC_ClockConfig+0x12c>)
 8000fc6:	f012 0f04 	tst.w	r2, #4
 8000fca:	d16e      	bne.n	80010aa <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fcc:	0713      	lsls	r3, r2, #28
 8000fce:	d506      	bpl.n	8000fde <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000fd0:	686b      	ldr	r3, [r5, #4]
 8000fd2:	6922      	ldr	r2, [r4, #16]
 8000fd4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fd8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fdc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000fde:	f7ff ff9b 	bl	8000f18 <HAL_RCC_GetSysClockFreq>
 8000fe2:	686b      	ldr	r3, [r5, #4]
 8000fe4:	4a36      	ldr	r2, [pc, #216]	; (80010c0 <HAL_RCC_ClockConfig+0x130>)
 8000fe6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000fea:	5cd3      	ldrb	r3, [r2, r3]
 8000fec:	40d8      	lsrs	r0, r3
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <HAL_RCC_ClockConfig+0x134>)
 8000ff0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000ff2:	4b35      	ldr	r3, [pc, #212]	; (80010c8 <HAL_RCC_ClockConfig+0x138>)
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f7ff fa05 	bl	8000404 <HAL_InitTick>
  return HAL_OK;
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001000:	6813      	ldr	r3, [r2, #0]
 8001002:	f023 0307 	bic.w	r3, r3, #7
 8001006:	430b      	orrs	r3, r1
 8001008:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800100a:	6813      	ldr	r3, [r2, #0]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	4299      	cmp	r1, r3
 8001012:	d1c2      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xa>
 8001014:	e7ca      	b.n	8000fac <HAL_RCC_ClockConfig+0x1c>
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001018:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800101c:	bf1e      	ittt	ne
 800101e:	685a      	ldrne	r2, [r3, #4]
 8001020:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001024:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001026:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001028:	bf42      	ittt	mi
 800102a:	685a      	ldrmi	r2, [r3, #4]
 800102c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001030:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	68a0      	ldr	r0, [r4, #8]
 8001036:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800103a:	4302      	orrs	r2, r0
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	e7b8      	b.n	8000fb2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001040:	6862      	ldr	r2, [r4, #4]
 8001042:	4e1e      	ldr	r6, [pc, #120]	; (80010bc <HAL_RCC_ClockConfig+0x12c>)
 8001044:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001048:	d11b      	bne.n	8001082 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	d0a4      	beq.n	8000f9a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001050:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001052:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001056:	f023 0303 	bic.w	r3, r3, #3
 800105a:	4313      	orrs	r3, r2
 800105c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800105e:	f7ff fa13 	bl	8000488 <HAL_GetTick>
 8001062:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001064:	6873      	ldr	r3, [r6, #4]
 8001066:	6862      	ldr	r2, [r4, #4]
 8001068:	f003 030c 	and.w	r3, r3, #12
 800106c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001070:	d0a1      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001072:	f7ff fa09 	bl	8000488 <HAL_GetTick>
 8001076:	1bc0      	subs	r0, r0, r7
 8001078:	4540      	cmp	r0, r8
 800107a:	d9f3      	bls.n	8001064 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800107c:	2003      	movs	r0, #3
}
 800107e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001082:	2a02      	cmp	r2, #2
 8001084:	d102      	bne.n	800108c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001086:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800108a:	e7e0      	b.n	800104e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	f013 0f02 	tst.w	r3, #2
 8001090:	e7dd      	b.n	800104e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	f023 0307 	bic.w	r3, r3, #7
 8001098:	432b      	orrs	r3, r5
 800109a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800109c:	6813      	ldr	r3, [r2, #0]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	429d      	cmp	r5, r3
 80010a4:	f47f af79 	bne.w	8000f9a <HAL_RCC_ClockConfig+0xa>
 80010a8:	e78b      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010aa:	686b      	ldr	r3, [r5, #4]
 80010ac:	68e1      	ldr	r1, [r4, #12]
 80010ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010b2:	430b      	orrs	r3, r1
 80010b4:	606b      	str	r3, [r5, #4]
 80010b6:	e789      	b.n	8000fcc <HAL_RCC_ClockConfig+0x3c>
 80010b8:	40022000 	.word	0x40022000
 80010bc:	40021000 	.word	0x40021000
 80010c0:	080022e9 	.word	0x080022e9
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80010d6:	5cd3      	ldrb	r3, [r2, r3]
 80010d8:	4a03      	ldr	r2, [pc, #12]	; (80010e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010da:	6810      	ldr	r0, [r2, #0]
}
 80010dc:	40d8      	lsrs	r0, r3
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000
 80010e4:	080022f9 	.word	0x080022f9
 80010e8:	20000000 	.word	0x20000000

080010ec <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010ec:	6803      	ldr	r3, [r0, #0]
{
 80010ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010f2:	07d9      	lsls	r1, r3, #31
{
 80010f4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80010f6:	d520      	bpl.n	800113a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f8:	4c35      	ldr	r4, [pc, #212]	; (80011d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80010fa:	69e3      	ldr	r3, [r4, #28]
 80010fc:	00da      	lsls	r2, r3, #3
 80010fe:	d432      	bmi.n	8001166 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001100:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	69e3      	ldr	r3, [r4, #28]
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	61e3      	str	r3, [r4, #28]
 800110a:	69e3      	ldr	r3, [r4, #28]
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001114:	4e2f      	ldr	r6, [pc, #188]	; (80011d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001116:	6833      	ldr	r3, [r6, #0]
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	d526      	bpl.n	800116a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800111c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800111e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001122:	d136      	bne.n	8001192 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001124:	6a23      	ldr	r3, [r4, #32]
 8001126:	686a      	ldr	r2, [r5, #4]
 8001128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800112c:	4313      	orrs	r3, r2
 800112e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001130:	b11f      	cbz	r7, 800113a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001132:	69e3      	ldr	r3, [r4, #28]
 8001134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001138:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800113a:	6828      	ldr	r0, [r5, #0]
 800113c:	0783      	lsls	r3, r0, #30
 800113e:	d506      	bpl.n	800114e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001140:	4a23      	ldr	r2, [pc, #140]	; (80011d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001142:	68a9      	ldr	r1, [r5, #8]
 8001144:	6853      	ldr	r3, [r2, #4]
 8001146:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800114a:	430b      	orrs	r3, r1
 800114c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800114e:	f010 0010 	ands.w	r0, r0, #16
 8001152:	d01b      	beq.n	800118c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001154:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001156:	68e9      	ldr	r1, [r5, #12]
 8001158:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800115a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800115c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001160:	430b      	orrs	r3, r1
 8001162:	6053      	str	r3, [r2, #4]
 8001164:	e012      	b.n	800118c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001166:	2700      	movs	r7, #0
 8001168:	e7d4      	b.n	8001114 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800116a:	6833      	ldr	r3, [r6, #0]
 800116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001170:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001172:	f7ff f989 	bl	8000488 <HAL_GetTick>
 8001176:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	6833      	ldr	r3, [r6, #0]
 800117a:	05d8      	lsls	r0, r3, #23
 800117c:	d4ce      	bmi.n	800111c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800117e:	f7ff f983 	bl	8000488 <HAL_GetTick>
 8001182:	eba0 0008 	sub.w	r0, r0, r8
 8001186:	2864      	cmp	r0, #100	; 0x64
 8001188:	d9f6      	bls.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800118a:	2003      	movs	r0, #3
}
 800118c:	b002      	add	sp, #8
 800118e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001192:	686a      	ldr	r2, [r5, #4]
 8001194:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001198:	4293      	cmp	r3, r2
 800119a:	d0c3      	beq.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 800119c:	2001      	movs	r0, #1
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011a0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80011a2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011a4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011aa:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80011ac:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011ae:	07d9      	lsls	r1, r3, #31
 80011b0:	d5b8      	bpl.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80011b2:	f7ff f969 	bl	8000488 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80011ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011bc:	6a23      	ldr	r3, [r4, #32]
 80011be:	079a      	lsls	r2, r3, #30
 80011c0:	d4b0      	bmi.n	8001124 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c2:	f7ff f961 	bl	8000488 <HAL_GetTick>
 80011c6:	1b80      	subs	r0, r0, r6
 80011c8:	4540      	cmp	r0, r8
 80011ca:	d9f7      	bls.n	80011bc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80011cc:	e7dd      	b.n	800118a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40007000 	.word	0x40007000
 80011d8:	42420440 	.word	0x42420440

080011dc <GPIO_Init>:
#include "gpio_dev.h"

void GPIO_Init(void)
{
 80011dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011e0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	2210      	movs	r2, #16
 80011e4:	2100      	movs	r1, #0
 80011e6:	a802      	add	r0, sp, #8
 80011e8:	f000 f94e 	bl	8001488 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <GPIO_Init+0xe8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 80011ee:	4d36      	ldr	r5, [pc, #216]	; (80012c8 <GPIO_Init+0xec>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 80011f2:	4e36      	ldr	r6, [pc, #216]	; (80012cc <GPIO_Init+0xf0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	f042 0204 	orr.w	r2, r2, #4
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 80011fc:	4628      	mov	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	f002 0204 	and.w	r2, r2, #4
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 8001208:	2116      	movs	r1, #22
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	f042 0208 	orr.w	r2, r2, #8
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin, GPIO_PIN_SET);
 800121c:	f7ff fa8a 	bl	8000734 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin|LED_STATUS_Pin, GPIO_PIN_RESET);
 8001220:	4630      	mov	r0, r6
 8001222:	2200      	movs	r2, #0
 8001224:	f24b 0120 	movw	r1, #45088	; 0xb020
 8001228:	f7ff fa84 	bl	8000734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COLOR_SS_S2_Pin|COLOR_SS_S1_Pin|COLOR_SS_S0_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	4628      	mov	r0, r5
 8001230:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001234:	f7ff fa7e 	bl	8000734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STEP_DRIVER_PIN_Pin DIR_DRIVER_PIN_Pin NSS_PIN_RC522_Pin COLOR_SS_S1_Pin */
  GPIO_InitStruct.Pin = STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin|COLOR_SS_S1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin|COLOR_SS_S1_Pin;
 800123c:	f240 2316 	movw	r3, #534	; 0x216
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	f04f 0803 	mov.w	r8, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	a902      	add	r1, sp, #8
 8001246:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = STEP_DRIVER_PIN_Pin|DIR_DRIVER_PIN_Pin|NSS_PIN_RC522_Pin|COLOR_SS_S1_Pin;
 8001248:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124a:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	f7ff f98d 	bl	8000570 <HAL_GPIO_Init>

  /*Configure GPIO pins : JSW_H1_Pin JSW_L1_Pin JSW_H2_Pin JSW_L2_Pin
                           COLOR_SS_OUT_Pin */
  GPIO_InitStruct.Pin = JSW_H1_Pin|JSW_L1_Pin|JSW_H2_Pin|JSW_L2_Pin
 8001256:	f644 4303 	movw	r3, #19459	; 0x4c03
                          |COLOR_SS_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	a902      	add	r1, sp, #8
 800125c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = JSW_H1_Pin|JSW_L1_Pin|JSW_H2_Pin|JSW_L2_Pin
 800125e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f7ff f984 	bl	8000570 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_ODOOR_Pin RELAY_CDOOR_Pin COLOR_SS_S3_Pin */
  GPIO_InitStruct.Pin = RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin;
 8001268:	f44f 4330 	mov.w	r3, #45056	; 0xb000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	a902      	add	r1, sp, #8
 800126e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = RELAY_ODOOR_Pin|RELAY_CDOOR_Pin|COLOR_SS_S3_Pin;
 8001270:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001272:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	9703      	str	r7, [sp, #12]

  /*Configure GPIO pins : COLOR_SS_S2_Pin COLOR_SS_S0_Pin */
  GPIO_InitStruct.Pin = COLOR_SS_S2_Pin|COLOR_SS_S0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	f7ff f977 	bl	8000570 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = COLOR_SS_S2_Pin|COLOR_SS_S0_Pin;
 8001282:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	a902      	add	r1, sp, #8
 8001288:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = COLOR_SS_S2_Pin|COLOR_SS_S0_Pin;
 800128a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f7ff f96c 	bl	8000570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PARKING_BT_Pin TAKE_BT_Pin */
  GPIO_InitStruct.Pin = PARKING_BT_Pin|TAKE_BT_Pin;
 8001298:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	a902      	add	r1, sp, #8
 800129e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = PARKING_BT_Pin|TAKE_BT_Pin;
 80012a0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f7ff f963 	bl	8000570 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 80012aa:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 80012ac:	a902      	add	r1, sp, #8
 80012ae:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 80012b0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f7ff f959 	bl	8000570 <HAL_GPIO_Init>

}
 80012be:	b006      	add	sp, #24
 80012c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00

080012d0 <I2C_init>:
#include "i2c_dev.h"

static I2C_HandleTypeDef hi2c_ctrl;

void I2C_init(void)
{
 80012d0:	b508      	push	{r3, lr}
	hi2c_ctrl.Instance = I2C1;
 80012d2:	480c      	ldr	r0, [pc, #48]	; (8001304 <I2C_init+0x34>)
	hi2c_ctrl.Init.ClockSpeed = 100000;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <I2C_init+0x38>)
 80012d6:	f8df e034 	ldr.w	lr, [pc, #52]	; 800130c <I2C_init+0x3c>
	hi2c_ctrl.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c_ctrl.Init.OwnAddress1 = 0;
	hi2c_ctrl.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
	hi2c_ctrl.Init.ClockSpeed = 100000;
 80012de:	e880 4008 	stmia.w	r0, {r3, lr}
	hi2c_ctrl.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e2:	2300      	movs	r3, #0
	hi2c_ctrl.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	6102      	str	r2, [r0, #16]
	hi2c_ctrl.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e6:	6083      	str	r3, [r0, #8]
	hi2c_ctrl.Init.OwnAddress1 = 0;
 80012e8:	60c3      	str	r3, [r0, #12]
	hi2c_ctrl.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ea:	6143      	str	r3, [r0, #20]
	hi2c_ctrl.Init.OwnAddress2 = 0;
 80012ec:	6183      	str	r3, [r0, #24]
	hi2c_ctrl.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	61c3      	str	r3, [r0, #28]
	hi2c_ctrl.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f0:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c_ctrl) != HAL_OK)
 80012f2:	f7ff fb01 	bl	80008f8 <HAL_I2C_Init>
 80012f6:	b118      	cbz	r0, 8001300 <I2C_init+0x30>
	{
		Error_Handler();
	}
}
 80012f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		Error_Handler();
 80012fc:	f7ff b806 	b.w	800030c <Error_Handler>
 8001300:	bd08      	pop	{r3, pc}
 8001302:	bf00      	nop
 8001304:	20000090 	.word	0x20000090
 8001308:	40005400 	.word	0x40005400
 800130c:	000186a0 	.word	0x000186a0

08001310 <I2C_send_data>:

void I2C_send_data(uint8_t add_dev, uint8_t *data_t, uint8_t data_len)
{
	HAL_I2C_Master_Transmit(&hi2c_ctrl, add_dev, data_t, data_len, 100);
 8001310:	2364      	movs	r3, #100	; 0x64
{
 8001312:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Master_Transmit(&hi2c_ctrl, add_dev, data_t, data_len, 100);
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	4613      	mov	r3, r2
 8001318:	460a      	mov	r2, r1
 800131a:	4601      	mov	r1, r0
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <I2C_send_data+0x18>)
 800131e:	f7ff fb8f 	bl	8000a40 <HAL_I2C_Master_Transmit>
}
 8001322:	b003      	add	sp, #12
 8001324:	f85d fb04 	ldr.w	pc, [sp], #4
 8001328:	20000090 	.word	0x20000090

0800132c <lcd_send_cmd>:
#include "lcd_i2c.h"

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800132c:	b507      	push	{r0, r1, r2, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800132e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001332:	f043 020c 	orr.w	r2, r3, #12
 8001336:	f88d 2004 	strb.w	r2, [sp, #4]
	data_t[1] = data_u|0x08;  //en=0, rs=0
	data_t[2] = data_l|0x0C;  //en=1, rs=0
	data_t[3] = data_l|0x08;  //en=0, rs=0
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 800133a:	2204      	movs	r2, #4
	data_l = ((cmd<<4)&0xf0);
 800133c:	0100      	lsls	r0, r0, #4
 800133e:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	f88d 3005 	strb.w	r3, [sp, #5]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001348:	f040 030c 	orr.w	r3, r0, #12
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800134c:	f040 0008 	orr.w	r0, r0, #8
 8001350:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001354:	eb0d 0102 	add.w	r1, sp, r2
 8001358:	204e      	movs	r0, #78	; 0x4e
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800135a:	f88d 3006 	strb.w	r3, [sp, #6]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 800135e:	f7ff ffd7 	bl	8001310 <I2C_send_data>
}
 8001362:	b003      	add	sp, #12
 8001364:	f85d fb04 	ldr.w	pc, [sp], #4

08001368 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001368:	b507      	push	{r0, r1, r2, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800136a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800136e:	f043 020d 	orr.w	r2, r3, #13
 8001372:	f88d 2004 	strb.w	r2, [sp, #4]
	data_t[1] = data_u|0x09;  //en=0, rs=0
	data_t[2] = data_l|0x0D;  //en=1, rs=0
	data_t[3] = data_l|0x09;  //en=0, rs=0
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001376:	2204      	movs	r2, #4
	data_l = ((data<<4)&0xf0);
 8001378:	0100      	lsls	r0, r0, #4
 800137a:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800137c:	f043 0309 	orr.w	r3, r3, #9
 8001380:	f88d 3005 	strb.w	r3, [sp, #5]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001384:	f040 030d 	orr.w	r3, r0, #13
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001388:	f040 0009 	orr.w	r0, r0, #9
 800138c:	f88d 0007 	strb.w	r0, [sp, #7]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001390:	eb0d 0102 	add.w	r1, sp, r2
 8001394:	204e      	movs	r0, #78	; 0x4e
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001396:	f88d 3006 	strb.w	r3, [sp, #6]
	I2C_send_data(SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 800139a:	f7ff ffb9 	bl	8001310 <I2C_send_data>
}
 800139e:	b003      	add	sp, #12
 80013a0:	f85d fb04 	ldr.w	pc, [sp], #4

080013a4 <lcd_init>:

void lcd_init (void)
{
 80013a4:	b508      	push	{r3, lr}
	I2C_init();
 80013a6:	f7ff ff93 	bl	80012d0 <I2C_init>
	HAL_Delay(50);
 80013aa:	2032      	movs	r0, #50	; 0x32
 80013ac:	f7ff f872 	bl	8000494 <HAL_Delay>
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80013b0:	2033      	movs	r0, #51	; 0x33
 80013b2:	f7ff ffbb 	bl	800132c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80013b6:	2032      	movs	r0, #50	; 0x32
 80013b8:	f7ff ffb8 	bl	800132c <lcd_send_cmd>
	HAL_Delay(50);
 80013bc:	2032      	movs	r0, #50	; 0x32
 80013be:	f7ff f869 	bl	8000494 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80013c2:	2028      	movs	r0, #40	; 0x28
 80013c4:	f7ff ffb2 	bl	800132c <lcd_send_cmd>
	HAL_Delay(50);
 80013c8:	2032      	movs	r0, #50	; 0x32
 80013ca:	f7ff f863 	bl	8000494 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ffac 	bl	800132c <lcd_send_cmd>
	HAL_Delay(50);
 80013d4:	2032      	movs	r0, #50	; 0x32
 80013d6:	f7ff f85d 	bl	8000494 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80013da:	2006      	movs	r0, #6
 80013dc:	f7ff ffa6 	bl	800132c <lcd_send_cmd>
	HAL_Delay(50);
 80013e0:	2032      	movs	r0, #50	; 0x32
 80013e2:	f7ff f857 	bl	8000494 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80013e6:	200c      	movs	r0, #12
 80013e8:	f7ff ffa0 	bl	800132c <lcd_send_cmd>
	HAL_Delay(50);
 80013ec:	2032      	movs	r0, #50	; 0x32
 80013ee:	f7ff f851 	bl	8000494 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff ff9a 	bl	800132c <lcd_send_cmd>
	HAL_Delay(50);
 80013f8:	2032      	movs	r0, #50	; 0x32
 80013fa:	f7ff f84b 	bl	8000494 <HAL_Delay>
	lcd_send_cmd (0x80);
}
 80013fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_cmd (0x80);
 8001402:	2080      	movs	r0, #128	; 0x80
 8001404:	f7ff bf92 	b.w	800132c <lcd_send_cmd>

08001408 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001408:	b510      	push	{r4, lr}
 800140a:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 800140c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001410:	b900      	cbnz	r0, 8001414 <lcd_send_string+0xc>
}
 8001412:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 8001414:	f7ff ffa8 	bl	8001368 <lcd_send_data>
 8001418:	e7f8      	b.n	800140c <lcd_send_string+0x4>

0800141a <lcd_goto_XY>:
}

void lcd_goto_XY (int row, int col)
{
	uint8_t pos_Addr;
	if(row == 1)
 800141a:	2801      	cmp	r0, #1
	{
		pos_Addr = 0x80 + row - 1 + col;
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800141c:	bf15      	itete	ne
 800141e:	f101 0040 	addne.w	r0, r1, #64	; 0x40
		pos_Addr = 0x80 + row - 1 + col;
 8001422:	3980      	subeq	r1, #128	; 0x80
		pos_Addr = 0x80 | (0x40 + col);
 8001424:	f060 007f 	ornne	r0, r0, #127	; 0x7f
		pos_Addr = 0x80 + row - 1 + col;
 8001428:	b2c8      	uxtbeq	r0, r1
		pos_Addr = 0x80 | (0x40 + col);
 800142a:	bf18      	it	ne
 800142c:	b2c0      	uxtbne	r0, r0
	}
	lcd_send_cmd(pos_Addr);
 800142e:	f7ff bf7d 	b.w	800132c <lcd_send_cmd>
	...

08001434 <__errno>:
 8001434:	4b01      	ldr	r3, [pc, #4]	; (800143c <__errno+0x8>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000000c 	.word	0x2000000c

08001440 <__libc_init_array>:
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	2500      	movs	r5, #0
 8001444:	4e0c      	ldr	r6, [pc, #48]	; (8001478 <__libc_init_array+0x38>)
 8001446:	4c0d      	ldr	r4, [pc, #52]	; (800147c <__libc_init_array+0x3c>)
 8001448:	1ba4      	subs	r4, r4, r6
 800144a:	10a4      	asrs	r4, r4, #2
 800144c:	42a5      	cmp	r5, r4
 800144e:	d109      	bne.n	8001464 <__libc_init_array+0x24>
 8001450:	f000 ff26 	bl	80022a0 <_init>
 8001454:	2500      	movs	r5, #0
 8001456:	4e0a      	ldr	r6, [pc, #40]	; (8001480 <__libc_init_array+0x40>)
 8001458:	4c0a      	ldr	r4, [pc, #40]	; (8001484 <__libc_init_array+0x44>)
 800145a:	1ba4      	subs	r4, r4, r6
 800145c:	10a4      	asrs	r4, r4, #2
 800145e:	42a5      	cmp	r5, r4
 8001460:	d105      	bne.n	800146e <__libc_init_array+0x2e>
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001468:	4798      	blx	r3
 800146a:	3501      	adds	r5, #1
 800146c:	e7ee      	b.n	800144c <__libc_init_array+0xc>
 800146e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001472:	4798      	blx	r3
 8001474:	3501      	adds	r5, #1
 8001476:	e7f2      	b.n	800145e <__libc_init_array+0x1e>
 8001478:	0800239c 	.word	0x0800239c
 800147c:	0800239c 	.word	0x0800239c
 8001480:	0800239c 	.word	0x0800239c
 8001484:	080023a0 	.word	0x080023a0

08001488 <memset>:
 8001488:	4603      	mov	r3, r0
 800148a:	4402      	add	r2, r0
 800148c:	4293      	cmp	r3, r2
 800148e:	d100      	bne.n	8001492 <memset+0xa>
 8001490:	4770      	bx	lr
 8001492:	f803 1b01 	strb.w	r1, [r3], #1
 8001496:	e7f9      	b.n	800148c <memset+0x4>

08001498 <iprintf>:
 8001498:	b40f      	push	{r0, r1, r2, r3}
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <iprintf+0x2c>)
 800149c:	b513      	push	{r0, r1, r4, lr}
 800149e:	681c      	ldr	r4, [r3, #0]
 80014a0:	b124      	cbz	r4, 80014ac <iprintf+0x14>
 80014a2:	69a3      	ldr	r3, [r4, #24]
 80014a4:	b913      	cbnz	r3, 80014ac <iprintf+0x14>
 80014a6:	4620      	mov	r0, r4
 80014a8:	f000 f84e 	bl	8001548 <__sinit>
 80014ac:	ab05      	add	r3, sp, #20
 80014ae:	9a04      	ldr	r2, [sp, #16]
 80014b0:	68a1      	ldr	r1, [r4, #8]
 80014b2:	4620      	mov	r0, r4
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f000 f957 	bl	8001768 <_vfiprintf_r>
 80014ba:	b002      	add	sp, #8
 80014bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014c0:	b004      	add	sp, #16
 80014c2:	4770      	bx	lr
 80014c4:	2000000c 	.word	0x2000000c

080014c8 <_cleanup_r>:
 80014c8:	4901      	ldr	r1, [pc, #4]	; (80014d0 <_cleanup_r+0x8>)
 80014ca:	f000 b8a9 	b.w	8001620 <_fwalk_reent>
 80014ce:	bf00      	nop
 80014d0:	08002041 	.word	0x08002041

080014d4 <std.isra.0>:
 80014d4:	2300      	movs	r3, #0
 80014d6:	b510      	push	{r4, lr}
 80014d8:	4604      	mov	r4, r0
 80014da:	6003      	str	r3, [r0, #0]
 80014dc:	6043      	str	r3, [r0, #4]
 80014de:	6083      	str	r3, [r0, #8]
 80014e0:	8181      	strh	r1, [r0, #12]
 80014e2:	6643      	str	r3, [r0, #100]	; 0x64
 80014e4:	81c2      	strh	r2, [r0, #14]
 80014e6:	6103      	str	r3, [r0, #16]
 80014e8:	6143      	str	r3, [r0, #20]
 80014ea:	6183      	str	r3, [r0, #24]
 80014ec:	4619      	mov	r1, r3
 80014ee:	2208      	movs	r2, #8
 80014f0:	305c      	adds	r0, #92	; 0x5c
 80014f2:	f7ff ffc9 	bl	8001488 <memset>
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <std.isra.0+0x38>)
 80014f8:	6224      	str	r4, [r4, #32]
 80014fa:	6263      	str	r3, [r4, #36]	; 0x24
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <std.isra.0+0x3c>)
 80014fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <std.isra.0+0x40>)
 8001502:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <std.isra.0+0x44>)
 8001506:	6323      	str	r3, [r4, #48]	; 0x30
 8001508:	bd10      	pop	{r4, pc}
 800150a:	bf00      	nop
 800150c:	08001ce5 	.word	0x08001ce5
 8001510:	08001d07 	.word	0x08001d07
 8001514:	08001d3f 	.word	0x08001d3f
 8001518:	08001d63 	.word	0x08001d63

0800151c <__sfmoreglue>:
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	2568      	movs	r5, #104	; 0x68
 8001520:	1e4a      	subs	r2, r1, #1
 8001522:	4355      	muls	r5, r2
 8001524:	460e      	mov	r6, r1
 8001526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800152a:	f000 f897 	bl	800165c <_malloc_r>
 800152e:	4604      	mov	r4, r0
 8001530:	b140      	cbz	r0, 8001544 <__sfmoreglue+0x28>
 8001532:	2100      	movs	r1, #0
 8001534:	e880 0042 	stmia.w	r0, {r1, r6}
 8001538:	300c      	adds	r0, #12
 800153a:	60a0      	str	r0, [r4, #8]
 800153c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001540:	f7ff ffa2 	bl	8001488 <memset>
 8001544:	4620      	mov	r0, r4
 8001546:	bd70      	pop	{r4, r5, r6, pc}

08001548 <__sinit>:
 8001548:	6983      	ldr	r3, [r0, #24]
 800154a:	b510      	push	{r4, lr}
 800154c:	4604      	mov	r4, r0
 800154e:	bb33      	cbnz	r3, 800159e <__sinit+0x56>
 8001550:	6483      	str	r3, [r0, #72]	; 0x48
 8001552:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001554:	6503      	str	r3, [r0, #80]	; 0x50
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <__sinit+0x58>)
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <__sinit+0x5c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6282      	str	r2, [r0, #40]	; 0x28
 800155e:	4298      	cmp	r0, r3
 8001560:	bf04      	itt	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	6183      	streq	r3, [r0, #24]
 8001566:	f000 f81f 	bl	80015a8 <__sfp>
 800156a:	6060      	str	r0, [r4, #4]
 800156c:	4620      	mov	r0, r4
 800156e:	f000 f81b 	bl	80015a8 <__sfp>
 8001572:	60a0      	str	r0, [r4, #8]
 8001574:	4620      	mov	r0, r4
 8001576:	f000 f817 	bl	80015a8 <__sfp>
 800157a:	2200      	movs	r2, #0
 800157c:	60e0      	str	r0, [r4, #12]
 800157e:	2104      	movs	r1, #4
 8001580:	6860      	ldr	r0, [r4, #4]
 8001582:	f7ff ffa7 	bl	80014d4 <std.isra.0>
 8001586:	2201      	movs	r2, #1
 8001588:	2109      	movs	r1, #9
 800158a:	68a0      	ldr	r0, [r4, #8]
 800158c:	f7ff ffa2 	bl	80014d4 <std.isra.0>
 8001590:	2202      	movs	r2, #2
 8001592:	2112      	movs	r1, #18
 8001594:	68e0      	ldr	r0, [r4, #12]
 8001596:	f7ff ff9d 	bl	80014d4 <std.isra.0>
 800159a:	2301      	movs	r3, #1
 800159c:	61a3      	str	r3, [r4, #24]
 800159e:	bd10      	pop	{r4, pc}
 80015a0:	08002304 	.word	0x08002304
 80015a4:	080014c9 	.word	0x080014c9

080015a8 <__sfp>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <__sfp+0x74>)
 80015ac:	4607      	mov	r7, r0
 80015ae:	681e      	ldr	r6, [r3, #0]
 80015b0:	69b3      	ldr	r3, [r6, #24]
 80015b2:	b913      	cbnz	r3, 80015ba <__sfp+0x12>
 80015b4:	4630      	mov	r0, r6
 80015b6:	f7ff ffc7 	bl	8001548 <__sinit>
 80015ba:	3648      	adds	r6, #72	; 0x48
 80015bc:	68b4      	ldr	r4, [r6, #8]
 80015be:	6873      	ldr	r3, [r6, #4]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	d503      	bpl.n	80015cc <__sfp+0x24>
 80015c4:	6833      	ldr	r3, [r6, #0]
 80015c6:	b133      	cbz	r3, 80015d6 <__sfp+0x2e>
 80015c8:	6836      	ldr	r6, [r6, #0]
 80015ca:	e7f7      	b.n	80015bc <__sfp+0x14>
 80015cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015d0:	b16d      	cbz	r5, 80015ee <__sfp+0x46>
 80015d2:	3468      	adds	r4, #104	; 0x68
 80015d4:	e7f4      	b.n	80015c0 <__sfp+0x18>
 80015d6:	2104      	movs	r1, #4
 80015d8:	4638      	mov	r0, r7
 80015da:	f7ff ff9f 	bl	800151c <__sfmoreglue>
 80015de:	6030      	str	r0, [r6, #0]
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d1f1      	bne.n	80015c8 <__sfp+0x20>
 80015e4:	230c      	movs	r3, #12
 80015e6:	4604      	mov	r4, r0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4620      	mov	r0, r4
 80015ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f2:	81e3      	strh	r3, [r4, #14]
 80015f4:	2301      	movs	r3, #1
 80015f6:	6665      	str	r5, [r4, #100]	; 0x64
 80015f8:	81a3      	strh	r3, [r4, #12]
 80015fa:	6025      	str	r5, [r4, #0]
 80015fc:	60a5      	str	r5, [r4, #8]
 80015fe:	6065      	str	r5, [r4, #4]
 8001600:	6125      	str	r5, [r4, #16]
 8001602:	6165      	str	r5, [r4, #20]
 8001604:	61a5      	str	r5, [r4, #24]
 8001606:	2208      	movs	r2, #8
 8001608:	4629      	mov	r1, r5
 800160a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800160e:	f7ff ff3b 	bl	8001488 <memset>
 8001612:	6365      	str	r5, [r4, #52]	; 0x34
 8001614:	63a5      	str	r5, [r4, #56]	; 0x38
 8001616:	64a5      	str	r5, [r4, #72]	; 0x48
 8001618:	64e5      	str	r5, [r4, #76]	; 0x4c
 800161a:	e7e6      	b.n	80015ea <__sfp+0x42>
 800161c:	08002304 	.word	0x08002304

08001620 <_fwalk_reent>:
 8001620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001624:	4680      	mov	r8, r0
 8001626:	4689      	mov	r9, r1
 8001628:	2600      	movs	r6, #0
 800162a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800162e:	b914      	cbnz	r4, 8001636 <_fwalk_reent+0x16>
 8001630:	4630      	mov	r0, r6
 8001632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001636:	68a5      	ldr	r5, [r4, #8]
 8001638:	6867      	ldr	r7, [r4, #4]
 800163a:	3f01      	subs	r7, #1
 800163c:	d501      	bpl.n	8001642 <_fwalk_reent+0x22>
 800163e:	6824      	ldr	r4, [r4, #0]
 8001640:	e7f5      	b.n	800162e <_fwalk_reent+0xe>
 8001642:	89ab      	ldrh	r3, [r5, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d907      	bls.n	8001658 <_fwalk_reent+0x38>
 8001648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800164c:	3301      	adds	r3, #1
 800164e:	d003      	beq.n	8001658 <_fwalk_reent+0x38>
 8001650:	4629      	mov	r1, r5
 8001652:	4640      	mov	r0, r8
 8001654:	47c8      	blx	r9
 8001656:	4306      	orrs	r6, r0
 8001658:	3568      	adds	r5, #104	; 0x68
 800165a:	e7ee      	b.n	800163a <_fwalk_reent+0x1a>

0800165c <_malloc_r>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	1ccd      	adds	r5, r1, #3
 8001660:	f025 0503 	bic.w	r5, r5, #3
 8001664:	3508      	adds	r5, #8
 8001666:	2d0c      	cmp	r5, #12
 8001668:	bf38      	it	cc
 800166a:	250c      	movcc	r5, #12
 800166c:	2d00      	cmp	r5, #0
 800166e:	4606      	mov	r6, r0
 8001670:	db01      	blt.n	8001676 <_malloc_r+0x1a>
 8001672:	42a9      	cmp	r1, r5
 8001674:	d903      	bls.n	800167e <_malloc_r+0x22>
 8001676:	230c      	movs	r3, #12
 8001678:	6033      	str	r3, [r6, #0]
 800167a:	2000      	movs	r0, #0
 800167c:	bd70      	pop	{r4, r5, r6, pc}
 800167e:	f000 fd8d 	bl	800219c <__malloc_lock>
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <_malloc_r+0xb4>)
 8001684:	6814      	ldr	r4, [r2, #0]
 8001686:	4621      	mov	r1, r4
 8001688:	b991      	cbnz	r1, 80016b0 <_malloc_r+0x54>
 800168a:	4c22      	ldr	r4, [pc, #136]	; (8001714 <_malloc_r+0xb8>)
 800168c:	6823      	ldr	r3, [r4, #0]
 800168e:	b91b      	cbnz	r3, 8001698 <_malloc_r+0x3c>
 8001690:	4630      	mov	r0, r6
 8001692:	f000 fb17 	bl	8001cc4 <_sbrk_r>
 8001696:	6020      	str	r0, [r4, #0]
 8001698:	4629      	mov	r1, r5
 800169a:	4630      	mov	r0, r6
 800169c:	f000 fb12 	bl	8001cc4 <_sbrk_r>
 80016a0:	1c43      	adds	r3, r0, #1
 80016a2:	d126      	bne.n	80016f2 <_malloc_r+0x96>
 80016a4:	230c      	movs	r3, #12
 80016a6:	4630      	mov	r0, r6
 80016a8:	6033      	str	r3, [r6, #0]
 80016aa:	f000 fd78 	bl	800219e <__malloc_unlock>
 80016ae:	e7e4      	b.n	800167a <_malloc_r+0x1e>
 80016b0:	680b      	ldr	r3, [r1, #0]
 80016b2:	1b5b      	subs	r3, r3, r5
 80016b4:	d41a      	bmi.n	80016ec <_malloc_r+0x90>
 80016b6:	2b0b      	cmp	r3, #11
 80016b8:	d90f      	bls.n	80016da <_malloc_r+0x7e>
 80016ba:	600b      	str	r3, [r1, #0]
 80016bc:	18cc      	adds	r4, r1, r3
 80016be:	50cd      	str	r5, [r1, r3]
 80016c0:	4630      	mov	r0, r6
 80016c2:	f000 fd6c 	bl	800219e <__malloc_unlock>
 80016c6:	f104 000b 	add.w	r0, r4, #11
 80016ca:	1d23      	adds	r3, r4, #4
 80016cc:	f020 0007 	bic.w	r0, r0, #7
 80016d0:	1ac3      	subs	r3, r0, r3
 80016d2:	d01b      	beq.n	800170c <_malloc_r+0xb0>
 80016d4:	425a      	negs	r2, r3
 80016d6:	50e2      	str	r2, [r4, r3]
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
 80016da:	428c      	cmp	r4, r1
 80016dc:	bf0b      	itete	eq
 80016de:	6863      	ldreq	r3, [r4, #4]
 80016e0:	684b      	ldrne	r3, [r1, #4]
 80016e2:	6013      	streq	r3, [r2, #0]
 80016e4:	6063      	strne	r3, [r4, #4]
 80016e6:	bf18      	it	ne
 80016e8:	460c      	movne	r4, r1
 80016ea:	e7e9      	b.n	80016c0 <_malloc_r+0x64>
 80016ec:	460c      	mov	r4, r1
 80016ee:	6849      	ldr	r1, [r1, #4]
 80016f0:	e7ca      	b.n	8001688 <_malloc_r+0x2c>
 80016f2:	1cc4      	adds	r4, r0, #3
 80016f4:	f024 0403 	bic.w	r4, r4, #3
 80016f8:	42a0      	cmp	r0, r4
 80016fa:	d005      	beq.n	8001708 <_malloc_r+0xac>
 80016fc:	1a21      	subs	r1, r4, r0
 80016fe:	4630      	mov	r0, r6
 8001700:	f000 fae0 	bl	8001cc4 <_sbrk_r>
 8001704:	3001      	adds	r0, #1
 8001706:	d0cd      	beq.n	80016a4 <_malloc_r+0x48>
 8001708:	6025      	str	r5, [r4, #0]
 800170a:	e7d9      	b.n	80016c0 <_malloc_r+0x64>
 800170c:	bd70      	pop	{r4, r5, r6, pc}
 800170e:	bf00      	nop
 8001710:	200000e4 	.word	0x200000e4
 8001714:	200000e8 	.word	0x200000e8

08001718 <__sfputc_r>:
 8001718:	6893      	ldr	r3, [r2, #8]
 800171a:	b410      	push	{r4}
 800171c:	3b01      	subs	r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	6093      	str	r3, [r2, #8]
 8001722:	da08      	bge.n	8001736 <__sfputc_r+0x1e>
 8001724:	6994      	ldr	r4, [r2, #24]
 8001726:	42a3      	cmp	r3, r4
 8001728:	db02      	blt.n	8001730 <__sfputc_r+0x18>
 800172a:	b2cb      	uxtb	r3, r1
 800172c:	2b0a      	cmp	r3, #10
 800172e:	d102      	bne.n	8001736 <__sfputc_r+0x1e>
 8001730:	bc10      	pop	{r4}
 8001732:	f000 bb1b 	b.w	8001d6c <__swbuf_r>
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	1c58      	adds	r0, r3, #1
 800173a:	6010      	str	r0, [r2, #0]
 800173c:	7019      	strb	r1, [r3, #0]
 800173e:	b2c8      	uxtb	r0, r1
 8001740:	bc10      	pop	{r4}
 8001742:	4770      	bx	lr

08001744 <__sfputs_r>:
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	4606      	mov	r6, r0
 8001748:	460f      	mov	r7, r1
 800174a:	4614      	mov	r4, r2
 800174c:	18d5      	adds	r5, r2, r3
 800174e:	42ac      	cmp	r4, r5
 8001750:	d101      	bne.n	8001756 <__sfputs_r+0x12>
 8001752:	2000      	movs	r0, #0
 8001754:	e007      	b.n	8001766 <__sfputs_r+0x22>
 8001756:	463a      	mov	r2, r7
 8001758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800175c:	4630      	mov	r0, r6
 800175e:	f7ff ffdb 	bl	8001718 <__sfputc_r>
 8001762:	1c43      	adds	r3, r0, #1
 8001764:	d1f3      	bne.n	800174e <__sfputs_r+0xa>
 8001766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001768 <_vfiprintf_r>:
 8001768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176c:	b09d      	sub	sp, #116	; 0x74
 800176e:	460c      	mov	r4, r1
 8001770:	4617      	mov	r7, r2
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	4606      	mov	r6, r0
 8001776:	b118      	cbz	r0, 8001780 <_vfiprintf_r+0x18>
 8001778:	6983      	ldr	r3, [r0, #24]
 800177a:	b90b      	cbnz	r3, 8001780 <_vfiprintf_r+0x18>
 800177c:	f7ff fee4 	bl	8001548 <__sinit>
 8001780:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <_vfiprintf_r+0x20c>)
 8001782:	429c      	cmp	r4, r3
 8001784:	d157      	bne.n	8001836 <_vfiprintf_r+0xce>
 8001786:	6874      	ldr	r4, [r6, #4]
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	0718      	lsls	r0, r3, #28
 800178c:	d55d      	bpl.n	800184a <_vfiprintf_r+0xe2>
 800178e:	6923      	ldr	r3, [r4, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05a      	beq.n	800184a <_vfiprintf_r+0xe2>
 8001794:	2300      	movs	r3, #0
 8001796:	9309      	str	r3, [sp, #36]	; 0x24
 8001798:	2320      	movs	r3, #32
 800179a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800179e:	2330      	movs	r3, #48	; 0x30
 80017a0:	f04f 0b01 	mov.w	fp, #1
 80017a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017a8:	46b8      	mov	r8, r7
 80017aa:	4645      	mov	r5, r8
 80017ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d155      	bne.n	8001860 <_vfiprintf_r+0xf8>
 80017b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80017b8:	d00b      	beq.n	80017d2 <_vfiprintf_r+0x6a>
 80017ba:	4653      	mov	r3, sl
 80017bc:	463a      	mov	r2, r7
 80017be:	4621      	mov	r1, r4
 80017c0:	4630      	mov	r0, r6
 80017c2:	f7ff ffbf 	bl	8001744 <__sfputs_r>
 80017c6:	3001      	adds	r0, #1
 80017c8:	f000 80c4 	beq.w	8001954 <_vfiprintf_r+0x1ec>
 80017cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017ce:	4453      	add	r3, sl
 80017d0:	9309      	str	r3, [sp, #36]	; 0x24
 80017d2:	f898 3000 	ldrb.w	r3, [r8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80bc 	beq.w	8001954 <_vfiprintf_r+0x1ec>
 80017dc:	2300      	movs	r3, #0
 80017de:	f04f 32ff 	mov.w	r2, #4294967295
 80017e2:	9304      	str	r3, [sp, #16]
 80017e4:	9307      	str	r3, [sp, #28]
 80017e6:	9205      	str	r2, [sp, #20]
 80017e8:	9306      	str	r3, [sp, #24]
 80017ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017ee:	931a      	str	r3, [sp, #104]	; 0x68
 80017f0:	2205      	movs	r2, #5
 80017f2:	7829      	ldrb	r1, [r5, #0]
 80017f4:	4860      	ldr	r0, [pc, #384]	; (8001978 <_vfiprintf_r+0x210>)
 80017f6:	f000 fcc3 	bl	8002180 <memchr>
 80017fa:	f105 0801 	add.w	r8, r5, #1
 80017fe:	9b04      	ldr	r3, [sp, #16]
 8001800:	2800      	cmp	r0, #0
 8001802:	d131      	bne.n	8001868 <_vfiprintf_r+0x100>
 8001804:	06d9      	lsls	r1, r3, #27
 8001806:	bf44      	itt	mi
 8001808:	2220      	movmi	r2, #32
 800180a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800180e:	071a      	lsls	r2, r3, #28
 8001810:	bf44      	itt	mi
 8001812:	222b      	movmi	r2, #43	; 0x2b
 8001814:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001818:	782a      	ldrb	r2, [r5, #0]
 800181a:	2a2a      	cmp	r2, #42	; 0x2a
 800181c:	d02c      	beq.n	8001878 <_vfiprintf_r+0x110>
 800181e:	2100      	movs	r1, #0
 8001820:	200a      	movs	r0, #10
 8001822:	9a07      	ldr	r2, [sp, #28]
 8001824:	46a8      	mov	r8, r5
 8001826:	f898 3000 	ldrb.w	r3, [r8]
 800182a:	3501      	adds	r5, #1
 800182c:	3b30      	subs	r3, #48	; 0x30
 800182e:	2b09      	cmp	r3, #9
 8001830:	d96d      	bls.n	800190e <_vfiprintf_r+0x1a6>
 8001832:	b371      	cbz	r1, 8001892 <_vfiprintf_r+0x12a>
 8001834:	e026      	b.n	8001884 <_vfiprintf_r+0x11c>
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <_vfiprintf_r+0x214>)
 8001838:	429c      	cmp	r4, r3
 800183a:	d101      	bne.n	8001840 <_vfiprintf_r+0xd8>
 800183c:	68b4      	ldr	r4, [r6, #8]
 800183e:	e7a3      	b.n	8001788 <_vfiprintf_r+0x20>
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <_vfiprintf_r+0x218>)
 8001842:	429c      	cmp	r4, r3
 8001844:	bf08      	it	eq
 8001846:	68f4      	ldreq	r4, [r6, #12]
 8001848:	e79e      	b.n	8001788 <_vfiprintf_r+0x20>
 800184a:	4621      	mov	r1, r4
 800184c:	4630      	mov	r0, r6
 800184e:	f000 faf1 	bl	8001e34 <__swsetup_r>
 8001852:	2800      	cmp	r0, #0
 8001854:	d09e      	beq.n	8001794 <_vfiprintf_r+0x2c>
 8001856:	f04f 30ff 	mov.w	r0, #4294967295
 800185a:	b01d      	add	sp, #116	; 0x74
 800185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001860:	2b25      	cmp	r3, #37	; 0x25
 8001862:	d0a7      	beq.n	80017b4 <_vfiprintf_r+0x4c>
 8001864:	46a8      	mov	r8, r5
 8001866:	e7a0      	b.n	80017aa <_vfiprintf_r+0x42>
 8001868:	4a43      	ldr	r2, [pc, #268]	; (8001978 <_vfiprintf_r+0x210>)
 800186a:	4645      	mov	r5, r8
 800186c:	1a80      	subs	r0, r0, r2
 800186e:	fa0b f000 	lsl.w	r0, fp, r0
 8001872:	4318      	orrs	r0, r3
 8001874:	9004      	str	r0, [sp, #16]
 8001876:	e7bb      	b.n	80017f0 <_vfiprintf_r+0x88>
 8001878:	9a03      	ldr	r2, [sp, #12]
 800187a:	1d11      	adds	r1, r2, #4
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	9103      	str	r1, [sp, #12]
 8001880:	2a00      	cmp	r2, #0
 8001882:	db01      	blt.n	8001888 <_vfiprintf_r+0x120>
 8001884:	9207      	str	r2, [sp, #28]
 8001886:	e004      	b.n	8001892 <_vfiprintf_r+0x12a>
 8001888:	4252      	negs	r2, r2
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	9207      	str	r2, [sp, #28]
 8001890:	9304      	str	r3, [sp, #16]
 8001892:	f898 3000 	ldrb.w	r3, [r8]
 8001896:	2b2e      	cmp	r3, #46	; 0x2e
 8001898:	d110      	bne.n	80018bc <_vfiprintf_r+0x154>
 800189a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800189e:	f108 0101 	add.w	r1, r8, #1
 80018a2:	2b2a      	cmp	r3, #42	; 0x2a
 80018a4:	d137      	bne.n	8001916 <_vfiprintf_r+0x1ae>
 80018a6:	9b03      	ldr	r3, [sp, #12]
 80018a8:	f108 0802 	add.w	r8, r8, #2
 80018ac:	1d1a      	adds	r2, r3, #4
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	9203      	str	r2, [sp, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bfb8      	it	lt
 80018b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80018ba:	9305      	str	r3, [sp, #20]
 80018bc:	4d31      	ldr	r5, [pc, #196]	; (8001984 <_vfiprintf_r+0x21c>)
 80018be:	2203      	movs	r2, #3
 80018c0:	f898 1000 	ldrb.w	r1, [r8]
 80018c4:	4628      	mov	r0, r5
 80018c6:	f000 fc5b 	bl	8002180 <memchr>
 80018ca:	b140      	cbz	r0, 80018de <_vfiprintf_r+0x176>
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	1b40      	subs	r0, r0, r5
 80018d0:	fa03 f000 	lsl.w	r0, r3, r0
 80018d4:	9b04      	ldr	r3, [sp, #16]
 80018d6:	f108 0801 	add.w	r8, r8, #1
 80018da:	4303      	orrs	r3, r0
 80018dc:	9304      	str	r3, [sp, #16]
 80018de:	f898 1000 	ldrb.w	r1, [r8]
 80018e2:	2206      	movs	r2, #6
 80018e4:	4828      	ldr	r0, [pc, #160]	; (8001988 <_vfiprintf_r+0x220>)
 80018e6:	f108 0701 	add.w	r7, r8, #1
 80018ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018ee:	f000 fc47 	bl	8002180 <memchr>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	d034      	beq.n	8001960 <_vfiprintf_r+0x1f8>
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <_vfiprintf_r+0x224>)
 80018f8:	bb03      	cbnz	r3, 800193c <_vfiprintf_r+0x1d4>
 80018fa:	9b03      	ldr	r3, [sp, #12]
 80018fc:	3307      	adds	r3, #7
 80018fe:	f023 0307 	bic.w	r3, r3, #7
 8001902:	3308      	adds	r3, #8
 8001904:	9303      	str	r3, [sp, #12]
 8001906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001908:	444b      	add	r3, r9
 800190a:	9309      	str	r3, [sp, #36]	; 0x24
 800190c:	e74c      	b.n	80017a8 <_vfiprintf_r+0x40>
 800190e:	fb00 3202 	mla	r2, r0, r2, r3
 8001912:	2101      	movs	r1, #1
 8001914:	e786      	b.n	8001824 <_vfiprintf_r+0xbc>
 8001916:	2300      	movs	r3, #0
 8001918:	250a      	movs	r5, #10
 800191a:	4618      	mov	r0, r3
 800191c:	9305      	str	r3, [sp, #20]
 800191e:	4688      	mov	r8, r1
 8001920:	f898 2000 	ldrb.w	r2, [r8]
 8001924:	3101      	adds	r1, #1
 8001926:	3a30      	subs	r2, #48	; 0x30
 8001928:	2a09      	cmp	r2, #9
 800192a:	d903      	bls.n	8001934 <_vfiprintf_r+0x1cc>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0c5      	beq.n	80018bc <_vfiprintf_r+0x154>
 8001930:	9005      	str	r0, [sp, #20]
 8001932:	e7c3      	b.n	80018bc <_vfiprintf_r+0x154>
 8001934:	fb05 2000 	mla	r0, r5, r0, r2
 8001938:	2301      	movs	r3, #1
 800193a:	e7f0      	b.n	800191e <_vfiprintf_r+0x1b6>
 800193c:	ab03      	add	r3, sp, #12
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	4622      	mov	r2, r4
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <_vfiprintf_r+0x228>)
 8001944:	a904      	add	r1, sp, #16
 8001946:	4630      	mov	r0, r6
 8001948:	f3af 8000 	nop.w
 800194c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001950:	4681      	mov	r9, r0
 8001952:	d1d8      	bne.n	8001906 <_vfiprintf_r+0x19e>
 8001954:	89a3      	ldrh	r3, [r4, #12]
 8001956:	065b      	lsls	r3, r3, #25
 8001958:	f53f af7d 	bmi.w	8001856 <_vfiprintf_r+0xee>
 800195c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800195e:	e77c      	b.n	800185a <_vfiprintf_r+0xf2>
 8001960:	ab03      	add	r3, sp, #12
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4622      	mov	r2, r4
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <_vfiprintf_r+0x228>)
 8001968:	a904      	add	r1, sp, #16
 800196a:	4630      	mov	r0, r6
 800196c:	f000 f88a 	bl	8001a84 <_printf_i>
 8001970:	e7ec      	b.n	800194c <_vfiprintf_r+0x1e4>
 8001972:	bf00      	nop
 8001974:	08002328 	.word	0x08002328
 8001978:	08002368 	.word	0x08002368
 800197c:	08002348 	.word	0x08002348
 8001980:	08002308 	.word	0x08002308
 8001984:	0800236e 	.word	0x0800236e
 8001988:	08002372 	.word	0x08002372
 800198c:	00000000 	.word	0x00000000
 8001990:	08001745 	.word	0x08001745

08001994 <_printf_common>:
 8001994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001998:	4691      	mov	r9, r2
 800199a:	461f      	mov	r7, r3
 800199c:	688a      	ldr	r2, [r1, #8]
 800199e:	690b      	ldr	r3, [r1, #16]
 80019a0:	4606      	mov	r6, r0
 80019a2:	4293      	cmp	r3, r2
 80019a4:	bfb8      	it	lt
 80019a6:	4613      	movlt	r3, r2
 80019a8:	f8c9 3000 	str.w	r3, [r9]
 80019ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019b0:	460c      	mov	r4, r1
 80019b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019b6:	b112      	cbz	r2, 80019be <_printf_common+0x2a>
 80019b8:	3301      	adds	r3, #1
 80019ba:	f8c9 3000 	str.w	r3, [r9]
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	0699      	lsls	r1, r3, #26
 80019c2:	bf42      	ittt	mi
 80019c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80019c8:	3302      	addmi	r3, #2
 80019ca:	f8c9 3000 	strmi.w	r3, [r9]
 80019ce:	6825      	ldr	r5, [r4, #0]
 80019d0:	f015 0506 	ands.w	r5, r5, #6
 80019d4:	d107      	bne.n	80019e6 <_printf_common+0x52>
 80019d6:	f104 0a19 	add.w	sl, r4, #25
 80019da:	68e3      	ldr	r3, [r4, #12]
 80019dc:	f8d9 2000 	ldr.w	r2, [r9]
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	429d      	cmp	r5, r3
 80019e4:	db2a      	blt.n	8001a3c <_printf_common+0xa8>
 80019e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	3300      	adds	r3, #0
 80019ee:	bf18      	it	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	0692      	lsls	r2, r2, #26
 80019f4:	d42f      	bmi.n	8001a56 <_printf_common+0xc2>
 80019f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019fa:	4639      	mov	r1, r7
 80019fc:	4630      	mov	r0, r6
 80019fe:	47c0      	blx	r8
 8001a00:	3001      	adds	r0, #1
 8001a02:	d022      	beq.n	8001a4a <_printf_common+0xb6>
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	68e5      	ldr	r5, [r4, #12]
 8001a08:	f003 0306 	and.w	r3, r3, #6
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	bf18      	it	ne
 8001a10:	2500      	movne	r5, #0
 8001a12:	f8d9 2000 	ldr.w	r2, [r9]
 8001a16:	f04f 0900 	mov.w	r9, #0
 8001a1a:	bf08      	it	eq
 8001a1c:	1aad      	subeq	r5, r5, r2
 8001a1e:	68a3      	ldr	r3, [r4, #8]
 8001a20:	6922      	ldr	r2, [r4, #16]
 8001a22:	bf08      	it	eq
 8001a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bfc4      	itt	gt
 8001a2c:	1a9b      	subgt	r3, r3, r2
 8001a2e:	18ed      	addgt	r5, r5, r3
 8001a30:	341a      	adds	r4, #26
 8001a32:	454d      	cmp	r5, r9
 8001a34:	d11b      	bne.n	8001a6e <_printf_common+0xda>
 8001a36:	2000      	movs	r0, #0
 8001a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	4652      	mov	r2, sl
 8001a40:	4639      	mov	r1, r7
 8001a42:	4630      	mov	r0, r6
 8001a44:	47c0      	blx	r8
 8001a46:	3001      	adds	r0, #1
 8001a48:	d103      	bne.n	8001a52 <_printf_common+0xbe>
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a52:	3501      	adds	r5, #1
 8001a54:	e7c1      	b.n	80019da <_printf_common+0x46>
 8001a56:	2030      	movs	r0, #48	; 0x30
 8001a58:	18e1      	adds	r1, r4, r3
 8001a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a64:	4422      	add	r2, r4
 8001a66:	3302      	adds	r3, #2
 8001a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a6c:	e7c3      	b.n	80019f6 <_printf_common+0x62>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	4622      	mov	r2, r4
 8001a72:	4639      	mov	r1, r7
 8001a74:	4630      	mov	r0, r6
 8001a76:	47c0      	blx	r8
 8001a78:	3001      	adds	r0, #1
 8001a7a:	d0e6      	beq.n	8001a4a <_printf_common+0xb6>
 8001a7c:	f109 0901 	add.w	r9, r9, #1
 8001a80:	e7d7      	b.n	8001a32 <_printf_common+0x9e>
	...

08001a84 <_printf_i>:
 8001a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a88:	4617      	mov	r7, r2
 8001a8a:	7e0a      	ldrb	r2, [r1, #24]
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	2a6e      	cmp	r2, #110	; 0x6e
 8001a90:	4698      	mov	r8, r3
 8001a92:	4606      	mov	r6, r0
 8001a94:	460c      	mov	r4, r1
 8001a96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a98:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001a9c:	f000 80bc 	beq.w	8001c18 <_printf_i+0x194>
 8001aa0:	d81a      	bhi.n	8001ad8 <_printf_i+0x54>
 8001aa2:	2a63      	cmp	r2, #99	; 0x63
 8001aa4:	d02e      	beq.n	8001b04 <_printf_i+0x80>
 8001aa6:	d80a      	bhi.n	8001abe <_printf_i+0x3a>
 8001aa8:	2a00      	cmp	r2, #0
 8001aaa:	f000 80c8 	beq.w	8001c3e <_printf_i+0x1ba>
 8001aae:	2a58      	cmp	r2, #88	; 0x58
 8001ab0:	f000 808a 	beq.w	8001bc8 <_printf_i+0x144>
 8001ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ab8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001abc:	e02a      	b.n	8001b14 <_printf_i+0x90>
 8001abe:	2a64      	cmp	r2, #100	; 0x64
 8001ac0:	d001      	beq.n	8001ac6 <_printf_i+0x42>
 8001ac2:	2a69      	cmp	r2, #105	; 0x69
 8001ac4:	d1f6      	bne.n	8001ab4 <_printf_i+0x30>
 8001ac6:	6821      	ldr	r1, [r4, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001ace:	d023      	beq.n	8001b18 <_printf_i+0x94>
 8001ad0:	1d11      	adds	r1, r2, #4
 8001ad2:	6019      	str	r1, [r3, #0]
 8001ad4:	6813      	ldr	r3, [r2, #0]
 8001ad6:	e027      	b.n	8001b28 <_printf_i+0xa4>
 8001ad8:	2a73      	cmp	r2, #115	; 0x73
 8001ada:	f000 80b4 	beq.w	8001c46 <_printf_i+0x1c2>
 8001ade:	d808      	bhi.n	8001af2 <_printf_i+0x6e>
 8001ae0:	2a6f      	cmp	r2, #111	; 0x6f
 8001ae2:	d02a      	beq.n	8001b3a <_printf_i+0xb6>
 8001ae4:	2a70      	cmp	r2, #112	; 0x70
 8001ae6:	d1e5      	bne.n	8001ab4 <_printf_i+0x30>
 8001ae8:	680a      	ldr	r2, [r1, #0]
 8001aea:	f042 0220 	orr.w	r2, r2, #32
 8001aee:	600a      	str	r2, [r1, #0]
 8001af0:	e003      	b.n	8001afa <_printf_i+0x76>
 8001af2:	2a75      	cmp	r2, #117	; 0x75
 8001af4:	d021      	beq.n	8001b3a <_printf_i+0xb6>
 8001af6:	2a78      	cmp	r2, #120	; 0x78
 8001af8:	d1dc      	bne.n	8001ab4 <_printf_i+0x30>
 8001afa:	2278      	movs	r2, #120	; 0x78
 8001afc:	496f      	ldr	r1, [pc, #444]	; (8001cbc <_printf_i+0x238>)
 8001afe:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001b02:	e064      	b.n	8001bce <_printf_i+0x14a>
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001b0a:	1d11      	adds	r1, r2, #4
 8001b0c:	6019      	str	r1, [r3, #0]
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0a3      	b.n	8001c60 <_printf_i+0x1dc>
 8001b18:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b1c:	f102 0104 	add.w	r1, r2, #4
 8001b20:	6019      	str	r1, [r3, #0]
 8001b22:	d0d7      	beq.n	8001ad4 <_printf_i+0x50>
 8001b24:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da03      	bge.n	8001b34 <_printf_i+0xb0>
 8001b2c:	222d      	movs	r2, #45	; 0x2d
 8001b2e:	425b      	negs	r3, r3
 8001b30:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b34:	4962      	ldr	r1, [pc, #392]	; (8001cc0 <_printf_i+0x23c>)
 8001b36:	220a      	movs	r2, #10
 8001b38:	e017      	b.n	8001b6a <_printf_i+0xe6>
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	6819      	ldr	r1, [r3, #0]
 8001b3e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b42:	d003      	beq.n	8001b4c <_printf_i+0xc8>
 8001b44:	1d08      	adds	r0, r1, #4
 8001b46:	6018      	str	r0, [r3, #0]
 8001b48:	680b      	ldr	r3, [r1, #0]
 8001b4a:	e006      	b.n	8001b5a <_printf_i+0xd6>
 8001b4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b50:	f101 0004 	add.w	r0, r1, #4
 8001b54:	6018      	str	r0, [r3, #0]
 8001b56:	d0f7      	beq.n	8001b48 <_printf_i+0xc4>
 8001b58:	880b      	ldrh	r3, [r1, #0]
 8001b5a:	2a6f      	cmp	r2, #111	; 0x6f
 8001b5c:	bf14      	ite	ne
 8001b5e:	220a      	movne	r2, #10
 8001b60:	2208      	moveq	r2, #8
 8001b62:	4957      	ldr	r1, [pc, #348]	; (8001cc0 <_printf_i+0x23c>)
 8001b64:	2000      	movs	r0, #0
 8001b66:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001b6a:	6865      	ldr	r5, [r4, #4]
 8001b6c:	2d00      	cmp	r5, #0
 8001b6e:	60a5      	str	r5, [r4, #8]
 8001b70:	f2c0 809c 	blt.w	8001cac <_printf_i+0x228>
 8001b74:	6820      	ldr	r0, [r4, #0]
 8001b76:	f020 0004 	bic.w	r0, r0, #4
 8001b7a:	6020      	str	r0, [r4, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d13f      	bne.n	8001c00 <_printf_i+0x17c>
 8001b80:	2d00      	cmp	r5, #0
 8001b82:	f040 8095 	bne.w	8001cb0 <_printf_i+0x22c>
 8001b86:	4675      	mov	r5, lr
 8001b88:	2a08      	cmp	r2, #8
 8001b8a:	d10b      	bne.n	8001ba4 <_printf_i+0x120>
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	07da      	lsls	r2, r3, #31
 8001b90:	d508      	bpl.n	8001ba4 <_printf_i+0x120>
 8001b92:	6923      	ldr	r3, [r4, #16]
 8001b94:	6862      	ldr	r2, [r4, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	bfde      	ittt	le
 8001b9a:	2330      	movle	r3, #48	; 0x30
 8001b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ba4:	ebae 0305 	sub.w	r3, lr, r5
 8001ba8:	6123      	str	r3, [r4, #16]
 8001baa:	f8cd 8000 	str.w	r8, [sp]
 8001bae:	463b      	mov	r3, r7
 8001bb0:	aa03      	add	r2, sp, #12
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f7ff feed 	bl	8001994 <_printf_common>
 8001bba:	3001      	adds	r0, #1
 8001bbc:	d155      	bne.n	8001c6a <_printf_i+0x1e6>
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	b005      	add	sp, #20
 8001bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bc8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001bcc:	493c      	ldr	r1, [pc, #240]	; (8001cc0 <_printf_i+0x23c>)
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001bd6:	f100 0504 	add.w	r5, r0, #4
 8001bda:	601d      	str	r5, [r3, #0]
 8001bdc:	d001      	beq.n	8001be2 <_printf_i+0x15e>
 8001bde:	6803      	ldr	r3, [r0, #0]
 8001be0:	e002      	b.n	8001be8 <_printf_i+0x164>
 8001be2:	0655      	lsls	r5, r2, #25
 8001be4:	d5fb      	bpl.n	8001bde <_printf_i+0x15a>
 8001be6:	8803      	ldrh	r3, [r0, #0]
 8001be8:	07d0      	lsls	r0, r2, #31
 8001bea:	bf44      	itt	mi
 8001bec:	f042 0220 	orrmi.w	r2, r2, #32
 8001bf0:	6022      	strmi	r2, [r4, #0]
 8001bf2:	b91b      	cbnz	r3, 8001bfc <_printf_i+0x178>
 8001bf4:	6822      	ldr	r2, [r4, #0]
 8001bf6:	f022 0220 	bic.w	r2, r2, #32
 8001bfa:	6022      	str	r2, [r4, #0]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	e7b1      	b.n	8001b64 <_printf_i+0xe0>
 8001c00:	4675      	mov	r5, lr
 8001c02:	fbb3 f0f2 	udiv	r0, r3, r2
 8001c06:	fb02 3310 	mls	r3, r2, r0, r3
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c10:	4603      	mov	r3, r0
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d1f5      	bne.n	8001c02 <_printf_i+0x17e>
 8001c16:	e7b7      	b.n	8001b88 <_printf_i+0x104>
 8001c18:	6808      	ldr	r0, [r1, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c20:	6949      	ldr	r1, [r1, #20]
 8001c22:	d004      	beq.n	8001c2e <_printf_i+0x1aa>
 8001c24:	1d10      	adds	r0, r2, #4
 8001c26:	6018      	str	r0, [r3, #0]
 8001c28:	6813      	ldr	r3, [r2, #0]
 8001c2a:	6019      	str	r1, [r3, #0]
 8001c2c:	e007      	b.n	8001c3e <_printf_i+0x1ba>
 8001c2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c32:	f102 0004 	add.w	r0, r2, #4
 8001c36:	6018      	str	r0, [r3, #0]
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	d0f6      	beq.n	8001c2a <_printf_i+0x1a6>
 8001c3c:	8019      	strh	r1, [r3, #0]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	4675      	mov	r5, lr
 8001c42:	6123      	str	r3, [r4, #16]
 8001c44:	e7b1      	b.n	8001baa <_printf_i+0x126>
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	1d11      	adds	r1, r2, #4
 8001c4a:	6019      	str	r1, [r3, #0]
 8001c4c:	6815      	ldr	r5, [r2, #0]
 8001c4e:	2100      	movs	r1, #0
 8001c50:	6862      	ldr	r2, [r4, #4]
 8001c52:	4628      	mov	r0, r5
 8001c54:	f000 fa94 	bl	8002180 <memchr>
 8001c58:	b108      	cbz	r0, 8001c5e <_printf_i+0x1da>
 8001c5a:	1b40      	subs	r0, r0, r5
 8001c5c:	6060      	str	r0, [r4, #4]
 8001c5e:	6863      	ldr	r3, [r4, #4]
 8001c60:	6123      	str	r3, [r4, #16]
 8001c62:	2300      	movs	r3, #0
 8001c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c68:	e79f      	b.n	8001baa <_printf_i+0x126>
 8001c6a:	6923      	ldr	r3, [r4, #16]
 8001c6c:	462a      	mov	r2, r5
 8001c6e:	4639      	mov	r1, r7
 8001c70:	4630      	mov	r0, r6
 8001c72:	47c0      	blx	r8
 8001c74:	3001      	adds	r0, #1
 8001c76:	d0a2      	beq.n	8001bbe <_printf_i+0x13a>
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	079b      	lsls	r3, r3, #30
 8001c7c:	d507      	bpl.n	8001c8e <_printf_i+0x20a>
 8001c7e:	2500      	movs	r5, #0
 8001c80:	f104 0919 	add.w	r9, r4, #25
 8001c84:	68e3      	ldr	r3, [r4, #12]
 8001c86:	9a03      	ldr	r2, [sp, #12]
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	429d      	cmp	r5, r3
 8001c8c:	db05      	blt.n	8001c9a <_printf_i+0x216>
 8001c8e:	68e0      	ldr	r0, [r4, #12]
 8001c90:	9b03      	ldr	r3, [sp, #12]
 8001c92:	4298      	cmp	r0, r3
 8001c94:	bfb8      	it	lt
 8001c96:	4618      	movlt	r0, r3
 8001c98:	e793      	b.n	8001bc2 <_printf_i+0x13e>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	464a      	mov	r2, r9
 8001c9e:	4639      	mov	r1, r7
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	47c0      	blx	r8
 8001ca4:	3001      	adds	r0, #1
 8001ca6:	d08a      	beq.n	8001bbe <_printf_i+0x13a>
 8001ca8:	3501      	adds	r5, #1
 8001caa:	e7eb      	b.n	8001c84 <_printf_i+0x200>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1a7      	bne.n	8001c00 <_printf_i+0x17c>
 8001cb0:	780b      	ldrb	r3, [r1, #0]
 8001cb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cba:	e765      	b.n	8001b88 <_printf_i+0x104>
 8001cbc:	0800238a 	.word	0x0800238a
 8001cc0:	08002379 	.word	0x08002379

08001cc4 <_sbrk_r>:
 8001cc4:	b538      	push	{r3, r4, r5, lr}
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	4c05      	ldr	r4, [pc, #20]	; (8001ce0 <_sbrk_r+0x1c>)
 8001cca:	4605      	mov	r5, r0
 8001ccc:	4608      	mov	r0, r1
 8001cce:	6023      	str	r3, [r4, #0]
 8001cd0:	f7fe fa7e 	bl	80001d0 <_sbrk>
 8001cd4:	1c43      	adds	r3, r0, #1
 8001cd6:	d102      	bne.n	8001cde <_sbrk_r+0x1a>
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	b103      	cbz	r3, 8001cde <_sbrk_r+0x1a>
 8001cdc:	602b      	str	r3, [r5, #0]
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
 8001ce0:	20000188 	.word	0x20000188

08001ce4 <__sread>:
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cec:	f000 faa4 	bl	8002238 <_read_r>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	bfab      	itete	ge
 8001cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8001cf8:	181b      	addge	r3, r3, r0
 8001cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cfe:	bfac      	ite	ge
 8001d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8001d02:	81a3      	strhlt	r3, [r4, #12]
 8001d04:	bd10      	pop	{r4, pc}

08001d06 <__swrite>:
 8001d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d0a:	461f      	mov	r7, r3
 8001d0c:	898b      	ldrh	r3, [r1, #12]
 8001d0e:	4605      	mov	r5, r0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	460c      	mov	r4, r1
 8001d14:	4616      	mov	r6, r2
 8001d16:	d505      	bpl.n	8001d24 <__swrite+0x1e>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d20:	f000 f9b8 	bl	8002094 <_lseek_r>
 8001d24:	89a3      	ldrh	r3, [r4, #12]
 8001d26:	4632      	mov	r2, r6
 8001d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d2c:	81a3      	strh	r3, [r4, #12]
 8001d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d32:	463b      	mov	r3, r7
 8001d34:	4628      	mov	r0, r5
 8001d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3a:	f000 b869 	b.w	8001e10 <_write_r>

08001d3e <__sseek>:
 8001d3e:	b510      	push	{r4, lr}
 8001d40:	460c      	mov	r4, r1
 8001d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d46:	f000 f9a5 	bl	8002094 <_lseek_r>
 8001d4a:	1c43      	adds	r3, r0, #1
 8001d4c:	89a3      	ldrh	r3, [r4, #12]
 8001d4e:	bf15      	itete	ne
 8001d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d5a:	81a3      	strheq	r3, [r4, #12]
 8001d5c:	bf18      	it	ne
 8001d5e:	81a3      	strhne	r3, [r4, #12]
 8001d60:	bd10      	pop	{r4, pc}

08001d62 <__sclose>:
 8001d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d66:	f000 b8d3 	b.w	8001f10 <_close_r>
	...

08001d6c <__swbuf_r>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	460e      	mov	r6, r1
 8001d70:	4614      	mov	r4, r2
 8001d72:	4605      	mov	r5, r0
 8001d74:	b118      	cbz	r0, 8001d7e <__swbuf_r+0x12>
 8001d76:	6983      	ldr	r3, [r0, #24]
 8001d78:	b90b      	cbnz	r3, 8001d7e <__swbuf_r+0x12>
 8001d7a:	f7ff fbe5 	bl	8001548 <__sinit>
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <__swbuf_r+0x98>)
 8001d80:	429c      	cmp	r4, r3
 8001d82:	d12a      	bne.n	8001dda <__swbuf_r+0x6e>
 8001d84:	686c      	ldr	r4, [r5, #4]
 8001d86:	69a3      	ldr	r3, [r4, #24]
 8001d88:	60a3      	str	r3, [r4, #8]
 8001d8a:	89a3      	ldrh	r3, [r4, #12]
 8001d8c:	071a      	lsls	r2, r3, #28
 8001d8e:	d52e      	bpl.n	8001dee <__swbuf_r+0x82>
 8001d90:	6923      	ldr	r3, [r4, #16]
 8001d92:	b363      	cbz	r3, 8001dee <__swbuf_r+0x82>
 8001d94:	6923      	ldr	r3, [r4, #16]
 8001d96:	6820      	ldr	r0, [r4, #0]
 8001d98:	b2f6      	uxtb	r6, r6
 8001d9a:	1ac0      	subs	r0, r0, r3
 8001d9c:	6963      	ldr	r3, [r4, #20]
 8001d9e:	4637      	mov	r7, r6
 8001da0:	4298      	cmp	r0, r3
 8001da2:	db04      	blt.n	8001dae <__swbuf_r+0x42>
 8001da4:	4621      	mov	r1, r4
 8001da6:	4628      	mov	r0, r5
 8001da8:	f000 f94a 	bl	8002040 <_fflush_r>
 8001dac:	bb28      	cbnz	r0, 8001dfa <__swbuf_r+0x8e>
 8001dae:	68a3      	ldr	r3, [r4, #8]
 8001db0:	3001      	adds	r0, #1
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60a3      	str	r3, [r4, #8]
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	6022      	str	r2, [r4, #0]
 8001dbc:	701e      	strb	r6, [r3, #0]
 8001dbe:	6963      	ldr	r3, [r4, #20]
 8001dc0:	4298      	cmp	r0, r3
 8001dc2:	d004      	beq.n	8001dce <__swbuf_r+0x62>
 8001dc4:	89a3      	ldrh	r3, [r4, #12]
 8001dc6:	07db      	lsls	r3, r3, #31
 8001dc8:	d519      	bpl.n	8001dfe <__swbuf_r+0x92>
 8001dca:	2e0a      	cmp	r6, #10
 8001dcc:	d117      	bne.n	8001dfe <__swbuf_r+0x92>
 8001dce:	4621      	mov	r1, r4
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f000 f935 	bl	8002040 <_fflush_r>
 8001dd6:	b190      	cbz	r0, 8001dfe <__swbuf_r+0x92>
 8001dd8:	e00f      	b.n	8001dfa <__swbuf_r+0x8e>
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <__swbuf_r+0x9c>)
 8001ddc:	429c      	cmp	r4, r3
 8001dde:	d101      	bne.n	8001de4 <__swbuf_r+0x78>
 8001de0:	68ac      	ldr	r4, [r5, #8]
 8001de2:	e7d0      	b.n	8001d86 <__swbuf_r+0x1a>
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <__swbuf_r+0xa0>)
 8001de6:	429c      	cmp	r4, r3
 8001de8:	bf08      	it	eq
 8001dea:	68ec      	ldreq	r4, [r5, #12]
 8001dec:	e7cb      	b.n	8001d86 <__swbuf_r+0x1a>
 8001dee:	4621      	mov	r1, r4
 8001df0:	4628      	mov	r0, r5
 8001df2:	f000 f81f 	bl	8001e34 <__swsetup_r>
 8001df6:	2800      	cmp	r0, #0
 8001df8:	d0cc      	beq.n	8001d94 <__swbuf_r+0x28>
 8001dfa:	f04f 37ff 	mov.w	r7, #4294967295
 8001dfe:	4638      	mov	r0, r7
 8001e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	08002328 	.word	0x08002328
 8001e08:	08002348 	.word	0x08002348
 8001e0c:	08002308 	.word	0x08002308

08001e10 <_write_r>:
 8001e10:	b538      	push	{r3, r4, r5, lr}
 8001e12:	4605      	mov	r5, r0
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4c05      	ldr	r4, [pc, #20]	; (8001e30 <_write_r+0x20>)
 8001e1c:	6022      	str	r2, [r4, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	f7fe f9c7 	bl	80001b2 <_write>
 8001e24:	1c43      	adds	r3, r0, #1
 8001e26:	d102      	bne.n	8001e2e <_write_r+0x1e>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	b103      	cbz	r3, 8001e2e <_write_r+0x1e>
 8001e2c:	602b      	str	r3, [r5, #0]
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
 8001e30:	20000188 	.word	0x20000188

08001e34 <__swsetup_r>:
 8001e34:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <__swsetup_r+0xcc>)
 8001e36:	b570      	push	{r4, r5, r6, lr}
 8001e38:	681d      	ldr	r5, [r3, #0]
 8001e3a:	4606      	mov	r6, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	b125      	cbz	r5, 8001e4a <__swsetup_r+0x16>
 8001e40:	69ab      	ldr	r3, [r5, #24]
 8001e42:	b913      	cbnz	r3, 8001e4a <__swsetup_r+0x16>
 8001e44:	4628      	mov	r0, r5
 8001e46:	f7ff fb7f 	bl	8001548 <__sinit>
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <__swsetup_r+0xd0>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d10f      	bne.n	8001e70 <__swsetup_r+0x3c>
 8001e50:	686c      	ldr	r4, [r5, #4]
 8001e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	0715      	lsls	r5, r2, #28
 8001e5a:	d42c      	bmi.n	8001eb6 <__swsetup_r+0x82>
 8001e5c:	06d0      	lsls	r0, r2, #27
 8001e5e:	d411      	bmi.n	8001e84 <__swsetup_r+0x50>
 8001e60:	2209      	movs	r2, #9
 8001e62:	6032      	str	r2, [r6, #0]
 8001e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e68:	81a3      	strh	r3, [r4, #12]
 8001e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <__swsetup_r+0xd4>)
 8001e72:	429c      	cmp	r4, r3
 8001e74:	d101      	bne.n	8001e7a <__swsetup_r+0x46>
 8001e76:	68ac      	ldr	r4, [r5, #8]
 8001e78:	e7eb      	b.n	8001e52 <__swsetup_r+0x1e>
 8001e7a:	4b24      	ldr	r3, [pc, #144]	; (8001f0c <__swsetup_r+0xd8>)
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	bf08      	it	eq
 8001e80:	68ec      	ldreq	r4, [r5, #12]
 8001e82:	e7e6      	b.n	8001e52 <__swsetup_r+0x1e>
 8001e84:	0751      	lsls	r1, r2, #29
 8001e86:	d512      	bpl.n	8001eae <__swsetup_r+0x7a>
 8001e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e8a:	b141      	cbz	r1, 8001e9e <__swsetup_r+0x6a>
 8001e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e90:	4299      	cmp	r1, r3
 8001e92:	d002      	beq.n	8001e9a <__swsetup_r+0x66>
 8001e94:	4630      	mov	r0, r6
 8001e96:	f000 f983 	bl	80021a0 <_free_r>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e9e:	89a3      	ldrh	r3, [r4, #12]
 8001ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ea4:	81a3      	strh	r3, [r4, #12]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	6063      	str	r3, [r4, #4]
 8001eaa:	6923      	ldr	r3, [r4, #16]
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	89a3      	ldrh	r3, [r4, #12]
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	81a3      	strh	r3, [r4, #12]
 8001eb6:	6923      	ldr	r3, [r4, #16]
 8001eb8:	b94b      	cbnz	r3, 8001ece <__swsetup_r+0x9a>
 8001eba:	89a3      	ldrh	r3, [r4, #12]
 8001ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec4:	d003      	beq.n	8001ece <__swsetup_r+0x9a>
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f000 f919 	bl	8002100 <__smakebuf_r>
 8001ece:	89a2      	ldrh	r2, [r4, #12]
 8001ed0:	f012 0301 	ands.w	r3, r2, #1
 8001ed4:	d00c      	beq.n	8001ef0 <__swsetup_r+0xbc>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60a3      	str	r3, [r4, #8]
 8001eda:	6963      	ldr	r3, [r4, #20]
 8001edc:	425b      	negs	r3, r3
 8001ede:	61a3      	str	r3, [r4, #24]
 8001ee0:	6923      	ldr	r3, [r4, #16]
 8001ee2:	b953      	cbnz	r3, 8001efa <__swsetup_r+0xc6>
 8001ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001eec:	d1ba      	bne.n	8001e64 <__swsetup_r+0x30>
 8001eee:	bd70      	pop	{r4, r5, r6, pc}
 8001ef0:	0792      	lsls	r2, r2, #30
 8001ef2:	bf58      	it	pl
 8001ef4:	6963      	ldrpl	r3, [r4, #20]
 8001ef6:	60a3      	str	r3, [r4, #8]
 8001ef8:	e7f2      	b.n	8001ee0 <__swsetup_r+0xac>
 8001efa:	2000      	movs	r0, #0
 8001efc:	e7f7      	b.n	8001eee <__swsetup_r+0xba>
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	08002328 	.word	0x08002328
 8001f08:	08002348 	.word	0x08002348
 8001f0c:	08002308 	.word	0x08002308

08001f10 <_close_r>:
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	2300      	movs	r3, #0
 8001f14:	4c05      	ldr	r4, [pc, #20]	; (8001f2c <_close_r+0x1c>)
 8001f16:	4605      	mov	r5, r0
 8001f18:	4608      	mov	r0, r1
 8001f1a:	6023      	str	r3, [r4, #0]
 8001f1c:	f7fe f972 	bl	8000204 <_close>
 8001f20:	1c43      	adds	r3, r0, #1
 8001f22:	d102      	bne.n	8001f2a <_close_r+0x1a>
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	b103      	cbz	r3, 8001f2a <_close_r+0x1a>
 8001f28:	602b      	str	r3, [r5, #0]
 8001f2a:	bd38      	pop	{r3, r4, r5, pc}
 8001f2c:	20000188 	.word	0x20000188

08001f30 <__sflush_r>:
 8001f30:	898a      	ldrh	r2, [r1, #12]
 8001f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f36:	4605      	mov	r5, r0
 8001f38:	0710      	lsls	r0, r2, #28
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	d45a      	bmi.n	8001ff4 <__sflush_r+0xc4>
 8001f3e:	684b      	ldr	r3, [r1, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	dc05      	bgt.n	8001f50 <__sflush_r+0x20>
 8001f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dc02      	bgt.n	8001f50 <__sflush_r+0x20>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f52:	2e00      	cmp	r6, #0
 8001f54:	d0f9      	beq.n	8001f4a <__sflush_r+0x1a>
 8001f56:	2300      	movs	r3, #0
 8001f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f5c:	682f      	ldr	r7, [r5, #0]
 8001f5e:	602b      	str	r3, [r5, #0]
 8001f60:	d033      	beq.n	8001fca <__sflush_r+0x9a>
 8001f62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f64:	89a3      	ldrh	r3, [r4, #12]
 8001f66:	075a      	lsls	r2, r3, #29
 8001f68:	d505      	bpl.n	8001f76 <__sflush_r+0x46>
 8001f6a:	6863      	ldr	r3, [r4, #4]
 8001f6c:	1ac0      	subs	r0, r0, r3
 8001f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f70:	b10b      	cbz	r3, 8001f76 <__sflush_r+0x46>
 8001f72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f74:	1ac0      	subs	r0, r0, r3
 8001f76:	2300      	movs	r3, #0
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f7c:	6a21      	ldr	r1, [r4, #32]
 8001f7e:	4628      	mov	r0, r5
 8001f80:	47b0      	blx	r6
 8001f82:	1c43      	adds	r3, r0, #1
 8001f84:	89a3      	ldrh	r3, [r4, #12]
 8001f86:	d106      	bne.n	8001f96 <__sflush_r+0x66>
 8001f88:	6829      	ldr	r1, [r5, #0]
 8001f8a:	291d      	cmp	r1, #29
 8001f8c:	d84b      	bhi.n	8002026 <__sflush_r+0xf6>
 8001f8e:	4a2b      	ldr	r2, [pc, #172]	; (800203c <__sflush_r+0x10c>)
 8001f90:	40ca      	lsrs	r2, r1
 8001f92:	07d6      	lsls	r6, r2, #31
 8001f94:	d547      	bpl.n	8002026 <__sflush_r+0xf6>
 8001f96:	2200      	movs	r2, #0
 8001f98:	6062      	str	r2, [r4, #4]
 8001f9a:	6922      	ldr	r2, [r4, #16]
 8001f9c:	04d9      	lsls	r1, r3, #19
 8001f9e:	6022      	str	r2, [r4, #0]
 8001fa0:	d504      	bpl.n	8001fac <__sflush_r+0x7c>
 8001fa2:	1c42      	adds	r2, r0, #1
 8001fa4:	d101      	bne.n	8001faa <__sflush_r+0x7a>
 8001fa6:	682b      	ldr	r3, [r5, #0]
 8001fa8:	b903      	cbnz	r3, 8001fac <__sflush_r+0x7c>
 8001faa:	6560      	str	r0, [r4, #84]	; 0x54
 8001fac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fae:	602f      	str	r7, [r5, #0]
 8001fb0:	2900      	cmp	r1, #0
 8001fb2:	d0ca      	beq.n	8001f4a <__sflush_r+0x1a>
 8001fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fb8:	4299      	cmp	r1, r3
 8001fba:	d002      	beq.n	8001fc2 <__sflush_r+0x92>
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f000 f8ef 	bl	80021a0 <_free_r>
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	6360      	str	r0, [r4, #52]	; 0x34
 8001fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fca:	6a21      	ldr	r1, [r4, #32]
 8001fcc:	2301      	movs	r3, #1
 8001fce:	4628      	mov	r0, r5
 8001fd0:	47b0      	blx	r6
 8001fd2:	1c41      	adds	r1, r0, #1
 8001fd4:	d1c6      	bne.n	8001f64 <__sflush_r+0x34>
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0c3      	beq.n	8001f64 <__sflush_r+0x34>
 8001fdc:	2b1d      	cmp	r3, #29
 8001fde:	d001      	beq.n	8001fe4 <__sflush_r+0xb4>
 8001fe0:	2b16      	cmp	r3, #22
 8001fe2:	d101      	bne.n	8001fe8 <__sflush_r+0xb8>
 8001fe4:	602f      	str	r7, [r5, #0]
 8001fe6:	e7b0      	b.n	8001f4a <__sflush_r+0x1a>
 8001fe8:	89a3      	ldrh	r3, [r4, #12]
 8001fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fee:	81a3      	strh	r3, [r4, #12]
 8001ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff4:	690f      	ldr	r7, [r1, #16]
 8001ff6:	2f00      	cmp	r7, #0
 8001ff8:	d0a7      	beq.n	8001f4a <__sflush_r+0x1a>
 8001ffa:	0793      	lsls	r3, r2, #30
 8001ffc:	bf18      	it	ne
 8001ffe:	2300      	movne	r3, #0
 8002000:	680e      	ldr	r6, [r1, #0]
 8002002:	bf08      	it	eq
 8002004:	694b      	ldreq	r3, [r1, #20]
 8002006:	eba6 0807 	sub.w	r8, r6, r7
 800200a:	600f      	str	r7, [r1, #0]
 800200c:	608b      	str	r3, [r1, #8]
 800200e:	f1b8 0f00 	cmp.w	r8, #0
 8002012:	dd9a      	ble.n	8001f4a <__sflush_r+0x1a>
 8002014:	4643      	mov	r3, r8
 8002016:	463a      	mov	r2, r7
 8002018:	6a21      	ldr	r1, [r4, #32]
 800201a:	4628      	mov	r0, r5
 800201c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800201e:	47b0      	blx	r6
 8002020:	2800      	cmp	r0, #0
 8002022:	dc07      	bgt.n	8002034 <__sflush_r+0x104>
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202a:	81a3      	strh	r3, [r4, #12]
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002034:	4407      	add	r7, r0
 8002036:	eba8 0800 	sub.w	r8, r8, r0
 800203a:	e7e8      	b.n	800200e <__sflush_r+0xde>
 800203c:	20400001 	.word	0x20400001

08002040 <_fflush_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	690b      	ldr	r3, [r1, #16]
 8002044:	4605      	mov	r5, r0
 8002046:	460c      	mov	r4, r1
 8002048:	b1db      	cbz	r3, 8002082 <_fflush_r+0x42>
 800204a:	b118      	cbz	r0, 8002054 <_fflush_r+0x14>
 800204c:	6983      	ldr	r3, [r0, #24]
 800204e:	b90b      	cbnz	r3, 8002054 <_fflush_r+0x14>
 8002050:	f7ff fa7a 	bl	8001548 <__sinit>
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <_fflush_r+0x48>)
 8002056:	429c      	cmp	r4, r3
 8002058:	d109      	bne.n	800206e <_fflush_r+0x2e>
 800205a:	686c      	ldr	r4, [r5, #4]
 800205c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002060:	b17b      	cbz	r3, 8002082 <_fflush_r+0x42>
 8002062:	4621      	mov	r1, r4
 8002064:	4628      	mov	r0, r5
 8002066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800206a:	f7ff bf61 	b.w	8001f30 <__sflush_r>
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <_fflush_r+0x4c>)
 8002070:	429c      	cmp	r4, r3
 8002072:	d101      	bne.n	8002078 <_fflush_r+0x38>
 8002074:	68ac      	ldr	r4, [r5, #8]
 8002076:	e7f1      	b.n	800205c <_fflush_r+0x1c>
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <_fflush_r+0x50>)
 800207a:	429c      	cmp	r4, r3
 800207c:	bf08      	it	eq
 800207e:	68ec      	ldreq	r4, [r5, #12]
 8002080:	e7ec      	b.n	800205c <_fflush_r+0x1c>
 8002082:	2000      	movs	r0, #0
 8002084:	bd38      	pop	{r3, r4, r5, pc}
 8002086:	bf00      	nop
 8002088:	08002328 	.word	0x08002328
 800208c:	08002348 	.word	0x08002348
 8002090:	08002308 	.word	0x08002308

08002094 <_lseek_r>:
 8002094:	b538      	push	{r3, r4, r5, lr}
 8002096:	4605      	mov	r5, r0
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	2200      	movs	r2, #0
 800209e:	4c05      	ldr	r4, [pc, #20]	; (80020b4 <_lseek_r+0x20>)
 80020a0:	6022      	str	r2, [r4, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	f7fe f8b8 	bl	8000218 <_lseek>
 80020a8:	1c43      	adds	r3, r0, #1
 80020aa:	d102      	bne.n	80020b2 <_lseek_r+0x1e>
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	b103      	cbz	r3, 80020b2 <_lseek_r+0x1e>
 80020b0:	602b      	str	r3, [r5, #0]
 80020b2:	bd38      	pop	{r3, r4, r5, pc}
 80020b4:	20000188 	.word	0x20000188

080020b8 <__swhatbuf_r>:
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	460e      	mov	r6, r1
 80020bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020c0:	b090      	sub	sp, #64	; 0x40
 80020c2:	2900      	cmp	r1, #0
 80020c4:	4614      	mov	r4, r2
 80020c6:	461d      	mov	r5, r3
 80020c8:	da07      	bge.n	80020da <__swhatbuf_r+0x22>
 80020ca:	2300      	movs	r3, #0
 80020cc:	602b      	str	r3, [r5, #0]
 80020ce:	89b3      	ldrh	r3, [r6, #12]
 80020d0:	061a      	lsls	r2, r3, #24
 80020d2:	d410      	bmi.n	80020f6 <__swhatbuf_r+0x3e>
 80020d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d8:	e00e      	b.n	80020f8 <__swhatbuf_r+0x40>
 80020da:	aa01      	add	r2, sp, #4
 80020dc:	f000 f8be 	bl	800225c <_fstat_r>
 80020e0:	2800      	cmp	r0, #0
 80020e2:	dbf2      	blt.n	80020ca <__swhatbuf_r+0x12>
 80020e4:	9a02      	ldr	r2, [sp, #8]
 80020e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020ee:	425a      	negs	r2, r3
 80020f0:	415a      	adcs	r2, r3
 80020f2:	602a      	str	r2, [r5, #0]
 80020f4:	e7ee      	b.n	80020d4 <__swhatbuf_r+0x1c>
 80020f6:	2340      	movs	r3, #64	; 0x40
 80020f8:	2000      	movs	r0, #0
 80020fa:	6023      	str	r3, [r4, #0]
 80020fc:	b010      	add	sp, #64	; 0x40
 80020fe:	bd70      	pop	{r4, r5, r6, pc}

08002100 <__smakebuf_r>:
 8002100:	898b      	ldrh	r3, [r1, #12]
 8002102:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002104:	079d      	lsls	r5, r3, #30
 8002106:	4606      	mov	r6, r0
 8002108:	460c      	mov	r4, r1
 800210a:	d507      	bpl.n	800211c <__smakebuf_r+0x1c>
 800210c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002110:	6023      	str	r3, [r4, #0]
 8002112:	6123      	str	r3, [r4, #16]
 8002114:	2301      	movs	r3, #1
 8002116:	6163      	str	r3, [r4, #20]
 8002118:	b002      	add	sp, #8
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	ab01      	add	r3, sp, #4
 800211e:	466a      	mov	r2, sp
 8002120:	f7ff ffca 	bl	80020b8 <__swhatbuf_r>
 8002124:	9900      	ldr	r1, [sp, #0]
 8002126:	4605      	mov	r5, r0
 8002128:	4630      	mov	r0, r6
 800212a:	f7ff fa97 	bl	800165c <_malloc_r>
 800212e:	b948      	cbnz	r0, 8002144 <__smakebuf_r+0x44>
 8002130:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002134:	059a      	lsls	r2, r3, #22
 8002136:	d4ef      	bmi.n	8002118 <__smakebuf_r+0x18>
 8002138:	f023 0303 	bic.w	r3, r3, #3
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	81a3      	strh	r3, [r4, #12]
 8002142:	e7e3      	b.n	800210c <__smakebuf_r+0xc>
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <__smakebuf_r+0x7c>)
 8002146:	62b3      	str	r3, [r6, #40]	; 0x28
 8002148:	89a3      	ldrh	r3, [r4, #12]
 800214a:	6020      	str	r0, [r4, #0]
 800214c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002150:	81a3      	strh	r3, [r4, #12]
 8002152:	9b00      	ldr	r3, [sp, #0]
 8002154:	6120      	str	r0, [r4, #16]
 8002156:	6163      	str	r3, [r4, #20]
 8002158:	9b01      	ldr	r3, [sp, #4]
 800215a:	b15b      	cbz	r3, 8002174 <__smakebuf_r+0x74>
 800215c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002160:	4630      	mov	r0, r6
 8002162:	f000 f88d 	bl	8002280 <_isatty_r>
 8002166:	b128      	cbz	r0, 8002174 <__smakebuf_r+0x74>
 8002168:	89a3      	ldrh	r3, [r4, #12]
 800216a:	f023 0303 	bic.w	r3, r3, #3
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	81a3      	strh	r3, [r4, #12]
 8002174:	89a3      	ldrh	r3, [r4, #12]
 8002176:	431d      	orrs	r5, r3
 8002178:	81a5      	strh	r5, [r4, #12]
 800217a:	e7cd      	b.n	8002118 <__smakebuf_r+0x18>
 800217c:	080014c9 	.word	0x080014c9

08002180 <memchr>:
 8002180:	b510      	push	{r4, lr}
 8002182:	b2c9      	uxtb	r1, r1
 8002184:	4402      	add	r2, r0
 8002186:	4290      	cmp	r0, r2
 8002188:	4603      	mov	r3, r0
 800218a:	d101      	bne.n	8002190 <memchr+0x10>
 800218c:	2000      	movs	r0, #0
 800218e:	bd10      	pop	{r4, pc}
 8002190:	781c      	ldrb	r4, [r3, #0]
 8002192:	3001      	adds	r0, #1
 8002194:	428c      	cmp	r4, r1
 8002196:	d1f6      	bne.n	8002186 <memchr+0x6>
 8002198:	4618      	mov	r0, r3
 800219a:	bd10      	pop	{r4, pc}

0800219c <__malloc_lock>:
 800219c:	4770      	bx	lr

0800219e <__malloc_unlock>:
 800219e:	4770      	bx	lr

080021a0 <_free_r>:
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	4605      	mov	r5, r0
 80021a4:	2900      	cmp	r1, #0
 80021a6:	d043      	beq.n	8002230 <_free_r+0x90>
 80021a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ac:	1f0c      	subs	r4, r1, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bfb8      	it	lt
 80021b2:	18e4      	addlt	r4, r4, r3
 80021b4:	f7ff fff2 	bl	800219c <__malloc_lock>
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <_free_r+0x94>)
 80021ba:	6813      	ldr	r3, [r2, #0]
 80021bc:	4610      	mov	r0, r2
 80021be:	b933      	cbnz	r3, 80021ce <_free_r+0x2e>
 80021c0:	6063      	str	r3, [r4, #4]
 80021c2:	6014      	str	r4, [r2, #0]
 80021c4:	4628      	mov	r0, r5
 80021c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021ca:	f7ff bfe8 	b.w	800219e <__malloc_unlock>
 80021ce:	42a3      	cmp	r3, r4
 80021d0:	d90b      	bls.n	80021ea <_free_r+0x4a>
 80021d2:	6821      	ldr	r1, [r4, #0]
 80021d4:	1862      	adds	r2, r4, r1
 80021d6:	4293      	cmp	r3, r2
 80021d8:	bf01      	itttt	eq
 80021da:	681a      	ldreq	r2, [r3, #0]
 80021dc:	685b      	ldreq	r3, [r3, #4]
 80021de:	1852      	addeq	r2, r2, r1
 80021e0:	6022      	streq	r2, [r4, #0]
 80021e2:	6063      	str	r3, [r4, #4]
 80021e4:	6004      	str	r4, [r0, #0]
 80021e6:	e7ed      	b.n	80021c4 <_free_r+0x24>
 80021e8:	4613      	mov	r3, r2
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	b10a      	cbz	r2, 80021f2 <_free_r+0x52>
 80021ee:	42a2      	cmp	r2, r4
 80021f0:	d9fa      	bls.n	80021e8 <_free_r+0x48>
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	1858      	adds	r0, r3, r1
 80021f6:	42a0      	cmp	r0, r4
 80021f8:	d10b      	bne.n	8002212 <_free_r+0x72>
 80021fa:	6820      	ldr	r0, [r4, #0]
 80021fc:	4401      	add	r1, r0
 80021fe:	1858      	adds	r0, r3, r1
 8002200:	4282      	cmp	r2, r0
 8002202:	6019      	str	r1, [r3, #0]
 8002204:	d1de      	bne.n	80021c4 <_free_r+0x24>
 8002206:	6810      	ldr	r0, [r2, #0]
 8002208:	6852      	ldr	r2, [r2, #4]
 800220a:	4401      	add	r1, r0
 800220c:	6019      	str	r1, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	e7d8      	b.n	80021c4 <_free_r+0x24>
 8002212:	d902      	bls.n	800221a <_free_r+0x7a>
 8002214:	230c      	movs	r3, #12
 8002216:	602b      	str	r3, [r5, #0]
 8002218:	e7d4      	b.n	80021c4 <_free_r+0x24>
 800221a:	6820      	ldr	r0, [r4, #0]
 800221c:	1821      	adds	r1, r4, r0
 800221e:	428a      	cmp	r2, r1
 8002220:	bf01      	itttt	eq
 8002222:	6811      	ldreq	r1, [r2, #0]
 8002224:	6852      	ldreq	r2, [r2, #4]
 8002226:	1809      	addeq	r1, r1, r0
 8002228:	6021      	streq	r1, [r4, #0]
 800222a:	6062      	str	r2, [r4, #4]
 800222c:	605c      	str	r4, [r3, #4]
 800222e:	e7c9      	b.n	80021c4 <_free_r+0x24>
 8002230:	bd38      	pop	{r3, r4, r5, pc}
 8002232:	bf00      	nop
 8002234:	200000e4 	.word	0x200000e4

08002238 <_read_r>:
 8002238:	b538      	push	{r3, r4, r5, lr}
 800223a:	4605      	mov	r5, r0
 800223c:	4608      	mov	r0, r1
 800223e:	4611      	mov	r1, r2
 8002240:	2200      	movs	r2, #0
 8002242:	4c05      	ldr	r4, [pc, #20]	; (8002258 <_read_r+0x20>)
 8002244:	6022      	str	r2, [r4, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f7fd ffa5 	bl	8000196 <_read>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_read_r+0x1e>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	b103      	cbz	r3, 8002256 <_read_r+0x1e>
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	20000188 	.word	0x20000188

0800225c <_fstat_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	2300      	movs	r3, #0
 8002260:	4c06      	ldr	r4, [pc, #24]	; (800227c <_fstat_r+0x20>)
 8002262:	4605      	mov	r5, r0
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	f7fd ffce 	bl	800020a <_fstat>
 800226e:	1c43      	adds	r3, r0, #1
 8002270:	d102      	bne.n	8002278 <_fstat_r+0x1c>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	b103      	cbz	r3, 8002278 <_fstat_r+0x1c>
 8002276:	602b      	str	r3, [r5, #0]
 8002278:	bd38      	pop	{r3, r4, r5, pc}
 800227a:	bf00      	nop
 800227c:	20000188 	.word	0x20000188

08002280 <_isatty_r>:
 8002280:	b538      	push	{r3, r4, r5, lr}
 8002282:	2300      	movs	r3, #0
 8002284:	4c05      	ldr	r4, [pc, #20]	; (800229c <_isatty_r+0x1c>)
 8002286:	4605      	mov	r5, r0
 8002288:	4608      	mov	r0, r1
 800228a:	6023      	str	r3, [r4, #0]
 800228c:	f7fd ffc2 	bl	8000214 <_isatty>
 8002290:	1c43      	adds	r3, r0, #1
 8002292:	d102      	bne.n	800229a <_isatty_r+0x1a>
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	b103      	cbz	r3, 800229a <_isatty_r+0x1a>
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	bd38      	pop	{r3, r4, r5, pc}
 800229c:	20000188 	.word	0x20000188

080022a0 <_init>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr

080022ac <_fini>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	bf00      	nop
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr
